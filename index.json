[{"categories":["学习"],"content":"力扣-两数之和","date":"2022-11-29","objectID":"/two-sum/","tags":["力扣"],"title":"力扣-两数之和","uri":"/two-sum/"},{"categories":["学习"],"content":"🔗 题目链接 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 示例 1： 输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 示例 2： 输入：nums = [3,2,4], target = 6 输出：[1,2] 示例 2： 输入：nums = [3,3], target = 6 输出：[0,1] ","date":"2022-11-29","objectID":"/two-sum/:0:0","tags":["力扣"],"title":"力扣-两数之和","uri":"/two-sum/"},{"categories":["学习"],"content":"方法一：暴力枚举 思路及算法 最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。 当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。 代码 def twoSum(nums: List[int], target: int) -\u003e List[int]: n = len(nums) for i in range(n): for j in range(i + 1, n): if nums[i] + nums[j] == target: return [i, j] return [] 复杂度分析 时间复杂度：$O(N^2)$，其中 $N$ 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。 空间复杂度：$O(1)$。 ","date":"2022-11-29","objectID":"/two-sum/:1:0","tags":["力扣"],"title":"力扣-两数之和","uri":"/two-sum/"},{"categories":["学习"],"content":"方法二：哈希表 思路及算法 注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。 使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 $O(N)$ 降低到 $O(1)$。 这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。 代码 def twoSum(nums: List[int], target: int) -\u003e List[int]: hashtable = dict() for i, num in enumerate(nums): if target - num in hashtable: return [hashtable[target - num], i] hashtable[nums[i]] = i return [] 复杂度分析 时间复杂度：$O(N)$，其中 $N$ 是数组中的元素数量。对于每一个元素 x，我们可以 $O(1)$ 地寻找 target - x。 空间复杂度：$O(N)$，其中 $N$ 是数组中的元素数量。主要为哈希表的开销。 ","date":"2022-11-29","objectID":"/two-sum/:2:0","tags":["力扣"],"title":"力扣-两数之和","uri":"/two-sum/"},{"categories":["学习"],"content":"力扣-数组中重复的数据","date":"2022-11-29","objectID":"/duplicates/","tags":["力扣"],"title":"力扣-数组中重复的数据","uri":"/duplicates/"},{"categories":["学习"],"content":"🔗 题目链接 给你一个长度为 n 的整数数组 nums ，其中 nums 的所有整数都在范围 [1, n] 内，且每个整数出现一次或两次。请你找出所有出现两次的整数，并以数组形式返回。 你必须设计并实现一个时间复杂度为 O(n) 且仅使用常量额外空间的算法解决此问题。 示例 1： 输入：nums = [4,3,2,7,8,2,3,1] 输出：[2,3] 示例 2： 输入：nums = [1,1,2] 输出：[1] 示例 3： 输入：nums = [1] 输出：[] ","date":"2022-11-29","objectID":"/duplicates/:0:0","tags":["力扣"],"title":"力扣-数组中重复的数据","uri":"/duplicates/"},{"categories":["学习"],"content":"方法一：将元素交换到对应的位置 思路与算法 由于给定的 $n$ 个数都在 $[1,n]$ 的范围内，如果有数字出现了两次，就意味着 $[1,n]$ 中有数字没有出现过。 因此，我们可以尝试将每一个数放在对应的位置。由于数组的下标范围是 $[0,n−1]$，我们需要将数 $i$ 放在数组中下标为 $i−1$ 的位置： 如果 $i$ 恰好出现了一次，那么将 $i$ 放在数组中下标为 $i−1$ 的位置即可； 如果 $i$ 出现了两次，那么我们希望其中的一个 $i$ 放在数组下标中为 $i−1$ 的位置，另一个 $i$ 放置在任意「不冲突」的位置 $j$。也就是说，数 $j+1$ 没有在数组中出现过。 这样一来，如果我们按照上述的规则放置每一个数，那么我们只需要对数组进行一次遍历。当遍历到位置 $i$ 时，如果 $nums[i]−1 \\neq i$，说明 $nums[i]$ 出现了两次（另一次出现在位置 $num[i]−1$），我们就可以将 $num[i]$ 放入答案。 放置的方法也很直观：我们对数组进行一次遍历。当遍历到位置 $i$ 时，我们知道 $nums[i]$ 应该被放在位置 $nums[i]−1$。因此我们交换 $num[i]$ 和 $nums[nums[i]−1]$ 即可，直到待交换的两个元素相等为止。 代码 def findDuplicates(nums: List[int]) -\u003e List[int]: for i in range(len(nums)): while nums[i] != nums[nums[i] - 1]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] return [num for i, num in enumerate(nums) if num - 1 != i] 复杂度分析 时间复杂度：$O(n)$。每一次交换操作会使得至少一个元素被交换到对应的正确位置，因此交换的次数为 $O(n)$，总时间复杂度为 $O(n)$。 空间复杂度：$O(1)$。返回值不计入空间复杂度。 ","date":"2022-11-29","objectID":"/duplicates/:1:0","tags":["力扣"],"title":"力扣-数组中重复的数据","uri":"/duplicates/"},{"categories":["学习"],"content":"方法二：使用正负号作为标记 思路与算法 我们也可以给 $nums[i]$ 加上「负号」表示数 $i+1$ 已经出现过一次。具体地，我们首先对数组进行一次遍历。当遍历到位置 $i$ 时，我们考虑 $nums[nums[i]−1]$ 的正负性： 如果 $nums[nums[i]−1]$ 是正数，说明 $nums[i]$ 还没有出现过，我们将 $nums[nums[i]−1]$ 加上负号； 如果 $nums[nums[i]−1]$ 是负数，说明 $nums[i]$ 已经出现过一次，我们将 $nums[i]$ 放入答案。 细节 由于 $nums[i]$ 本身可能已经为负数，因此在将 $nums[i]$ 作为下标或者放入答案时，需要取绝对值。 代码 def findDuplicates(nums: List[int]) -\u003e List[int]: ans = [] for x in nums: x = abs(x) if nums[x - 1] \u003e 0: nums[x - 1] = -nums[x - 1] else: ans.append(x) return ans 复杂度分析 时间复杂度：$O(n)$。我们只需要对数组 $nums$ 进行一次遍历。 空间复杂度：$O(1)$。返回值不计入空间复杂度。 ","date":"2022-11-29","objectID":"/duplicates/:2:0","tags":["力扣"],"title":"力扣-数组中重复的数据","uri":"/duplicates/"},{"categories":["学习"],"content":"Inmon 范式建模和 Kimball 维度建模","date":"2022-11-29","objectID":"/kimball/","tags":["维度建模"],"title":"Inmon 范式建模和 Kimball 维度建模","uri":"/kimball/"},{"categories":["学习"],"content":"本文开始先简单理解两种建模的核心思想，然后根据一个具体的例子，分别使用这两种建模方式进行建模，大家便会一目了然！ 😏。 Inmon：《数据仓库》 Kimball：《数仓工具箱》 范式建模 自上向下(数据的流向)，“上\"即数据的上游，“下\"即数据的下游 分散异构的数据源—\u003e数据仓库—\u003e数据集市 以数据源头为导向 将数据抽取为实体-关系模型 并不强调事实表和维度表 维度建模 自下向上，数据集市—\u003e数据仓库—\u003e分散异构的数据源 以最终任务为导向 按照目标拆分需求，抽取为事实-维度模型，数据源经过ETL转化为事实表和维度表导入数据集市 以星型模型或雪花模型构建维度数据仓库 数据集市是数据仓库中的一个逻辑上的主题域 建模实践 以电商系统为例，有4张表，分别是： 用户信息表 城市信息表 用户等级表 用户订单表 ","date":"2022-11-29","objectID":"/kimball/:0:0","tags":["维度建模"],"title":"Inmon 范式建模和 Kimball 维度建模","uri":"/kimball/"},{"categories":["学习"],"content":"Inmon建模 将数据抽取为实体-关系(ER)模型 用户实体表(ETL已过滤掉注销用户) 支付成功订单实体表 城市信息实体表 订单与用户关系表 用户与城市信息关系表 用户与用户等级关系表 数据没有冗余，符合三范式设计规范 ","date":"2022-11-29","objectID":"/kimball/:1:0","tags":["维度建模"],"title":"Inmon 范式建模和 Kimball 维度建模","uri":"/kimball/"},{"categories":["学习"],"content":"Kimball建模 将数据抽取为事实表和维度表 在 Kimball 维度建模中，不需要单独维护数据关系表，因为关系已经冗余在事实表和维度表中 支付成功订单事实表 用户维度表 城市信息维度表 用户等级维度表 以上是雪花模型，特点是维度表可以拥有其他维度表 ","date":"2022-11-29","objectID":"/kimball/:2:0","tags":["维度建模"],"title":"Inmon 范式建模和 Kimball 维度建模","uri":"/kimball/"},{"categories":["学习"],"content":"范式建模 优点： 没有数据冗余，保证了数据一致性 数据解耦，方便维护 缺点： 表的数量多 查询时多表联查降低查询性能 ","date":"2022-11-29","objectID":"/kimball/:3:0","tags":["维度建模"],"title":"Inmon 范式建模和 Kimball 维度建模","uri":"/kimball/"},{"categories":["学习"],"content":"维度建模 优点： 模型简单，面向分析 增加数据冗余，开发周期短，能快速迭代 缺点： 数据大量冗余，预处理阶段开销大 后期维护麻烦 维度设计不好的话不能保证数据口径一致性 ☺️ 维度就是看待问题的角度，量度就是事实表中数据类型的字段 如果把省份当作一个单独维度，城市当作一个单独维度，计算城市的人口数量。 这时省份和城市都是单独的维度，它们之间没有了关系，会出现： 广东省 杭州市 1500 浙江省 广州市 1200 在范式建模中，强调实体-关系模型，省份和城市之间一定存在归属关系，所以范式建模能保证口径的一致性，而维度建模不能！ ","date":"2022-11-29","objectID":"/kimball/:4:0","tags":["维度建模"],"title":"Inmon 范式建模和 Kimball 维度建模","uri":"/kimball/"},{"categories":["学习"],"content":"建模方式对比 特性 Kimball Inmon 开发周期 短 长 维护难度 大 小 数据要求 针对具体业务 站在企业角度 缓慢变化维 是 否 数据模型 维度建模、星型模型、雪花模型 实体-关系模型，准三范式设计 ","date":"2022-11-29","objectID":"/kimball/:5:0","tags":["维度建模"],"title":"Inmon 范式建模和 Kimball 维度建模","uri":"/kimball/"},{"categories":["学习"],"content":"三范式","date":"2022-11-29","objectID":"/3nf/","tags":["面试","三范式"],"title":"三范式","uri":"/3nf/"},{"categories":["学习"],"content":"三范式都有哪些？举例说明具体含义 😏。 第一范式：原子性(不可分割) 第二范式：消除部分依赖 第三范式：消除传递依赖 举例：存在一张学生关系模型表，按照三范式去改进该模型，如下： 三范式 根据第一范式：字段 contact 联系方式还可划分为邮箱和联系电话，改进如下： 三范式 根据第二范式：当需要录入学生张三另一课程 856 的新成绩，除了把学生号 stu_id，课程号 cou_no，成绩 grade，还需填张三的其他基本信息，你觉得该工作十分冗余。 你思考发现：成绩 grade 依赖于学生号 stu_id 和课程号 cou_no 才能唯一确定，而张三基本信息只依赖于学生号 stu_id，于是你把该表分拆为两个表，改进如下： 三范式 通过消除部分依赖，你只需要录入学生号 stu_id，课程号 cou_no，成绩 grade 即可。 根据第三范式：又在录入同一个系的学生成绩时，发现系主任都是一样，即：学生号 stu_id 确定则系 stu_dept 确定，系 stu_dept 则系主任 dean 确定。你思考发现：系主任 dean 传递依赖于学生号 stu_id，再次改进了关系模型，分拆为三个表描述，如下： 三范式 于是又减少了录入李主任的工作。 ","date":"2022-11-29","objectID":"/3nf/:0:0","tags":["面试","三范式"],"title":"三范式","uri":"/3nf/"},{"categories":["学习"],"content":"学习之联通沃音乐","date":"2022-11-16","objectID":"/study-of-liantong/","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"本文主要摘联通沃音乐的一些题目，以便后续查阅复习 😋。 ","date":"2022-11-16","objectID":"/study-of-liantong/:0:0","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"shell 题目 ","date":"2022-11-16","objectID":"/study-of-liantong/:1:0","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 1 题 如何把文件 a.txt 赋权为755，另外解释 755 是什么权限？ 答案 chmod 755 a.txt 具体的权限是由数字来表示的 读取的权限等于 4，用 r 表示； 写入的权限等于 2，用 w 表示； 执行的权限等于 1，用 x 表示； 以 755 为例： 1-3 位 7 等于 4+2+1，rwx，文件所有者具有读取、写入、执行权限； 4-6 位 5 等于 4+1+0，r-x，同组用户具有读取、执行权限但没有写入权限； 7-9 位 5，同上，也是 r-x，其他用户具有读取、执行权限但没有写入权限。 ","date":"2022-11-16","objectID":"/study-of-liantong/:1:1","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 2 题 如何把文件 a.txt 重命名为 b.txt 答案 mv a.txt b.txt ","date":"2022-11-16","objectID":"/study-of-liantong/:1:2","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 3 题 如何查询包含 a.sh 的所有进程，并进行批量杀进程？ 答案 使用 awk 批量杀进程的命令 ps -ef | grep a.sh | grep -v grep | awk '{print \"kill -9 \"$2}'|sh 说明： #列出了当前主机中运行的进程中包含a.sh关键字的进程 ps -ef | grep a.sh | grep -v grep #列出了要kill掉这些进程的命令，并将之打印在了屏幕上 ps -ef | grep a.sh | grep -v grep | awk '{print \"kill -9 \"$2}' #后面加上|sh后，则执行这些命令，进而杀掉了这些进程 ps -ef | grep a.sh | grep -v grep | awk '{print \"kill -9 \"$2}' | sh ","date":"2022-11-16","objectID":"/study-of-liantong/:1:3","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 4 题 请列举 vi 的 6 种命名及其用途 i: 在光标前插内内容 x: 删除光标后面的字符 yy: 复制整行 :w 保存 :q 退出 :q! 强制退出 :w! 强制保存 ","date":"2022-11-16","objectID":"/study-of-liantong/:1:4","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 5 题 文件 a.txt 只有一列数据，请进行排序剔重得到 b.txt？ a.txt b.txt 12 12 45 35 48 =\u003e 45 35 48 85 85 45 35 答案 sort -u a.txt \u003e b.txt 默认是升序，降序的话加上 -r ","date":"2022-11-16","objectID":"/study-of-liantong/:1:5","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 6 题 请写一个 shell 循环得到 1 到 100 的相加之和。 答案 vim sum1_100.sh #!/bin/bash sum = 0 for i in {1..100} do let sum = sum + i done $echo $sum chmod +x sum1_100.sh sh sum1_100.sh 或者 ./sum1_100.sh ","date":"2022-11-16","objectID":"/study-of-liantong/:1:6","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"数据库题 ","date":"2022-11-16","objectID":"/study-of-liantong/:2:0","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 7 题 以表 a 作为主表，外连接表 b，得出表 c。 数据表 答案 select a.id, a.Score1, coalesce(b.Score2, '') as Score2 from tab1 a left join tab2 b on a.id = b.id ","date":"2022-11-16","objectID":"/study-of-liantong/:2:1","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 8 题 参加一个活动，表 a 记录了活动的年龄及该年龄的人数，现需要求出表 b 年龄分段的人数。 数据表 答案 select case when age \u003e= 0 and age \u003c 10 then '[0,10)' when age \u003e= 10 and age \u003c 20 then '[10,20)' when age \u003e= 20 and age \u003c 30 then '[20,30)' when age \u003e= 30 then '大于30' end as Age, sum(cnt) as Cnt from tab1 a group by 1 ","date":"2022-11-16","objectID":"/study-of-liantong/:2:2","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 9 题 表 a 有学生 id 及其成绩，现做排名得出表 b 数据表 答案 select a.id, a.Score, rank() over (order by Score desc) pm from tab1 a order by id ","date":"2022-11-16","objectID":"/study-of-liantong/:2:3","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 10 题 每天 1000 万条的数据（有时间（具体到秒），字段2，字段3，字段4……）从前端写入数据库，如何设置表结构，可以快速的查询到 2017年3月11日20点31分到32分的所有数据？ 答案 思路是把时间进行拆解，按照天+小时+分钟的格式，然后对时间字段加上索引，这样查询的速度就会提升。 CREATE TABLE `tab1` ( `f_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id', `f_date` varchar(64) NOT NULL DEFAULT '' COMMENT '日期', `f_hour` varchar(64) NOT NULL DEFAULT '' COMMENT '小时', `f_min` varchar(64) NOT NULL DEFAULT '' COMMENT '分钟', 字段2，字段3.... `f_update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY ( `f_id` ), KEY `all_index` (`f_date`, `f_hour`, `f_min`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 COMMENT = '注释' ","date":"2022-11-16","objectID":"/study-of-liantong/:2:4","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 11 题 如下图：表 a 是营业厅，所属区，地市，省销售金额，现得出表 b 区、地市和全省汇总 数据表 答案 select City, Area, sum(amt) as amt from tab1 group by 1,2 union all select '全省' as City, '' as Area, sum(amt) as amt from tab1 group by 1,2 union all select City as City, '全市' as Area, sum(amt) as amt from tab1 group by 1,2 ","date":"2022-11-16","objectID":"/study-of-liantong/:2:5","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 12 题 表 a 字段是以日期作为分区表，有日期、用户id、产品id，使用的时间详细时间，每天有 50 亿条数据，即 31 天总数据为 1550 亿。需要每天得到一个表 b，以 b 表的日期、产品id为联合汇总，算出 1 号到当前的日期的 pv 和 uv。但 Hadoop 集群只能计算 100 亿数据，如何通过逻辑方式计算请写出具体 sql。答案需要考虑集群的计算能力，提示每天新增的用户大概 3 千万。 数据表 答案 insert overwrite table tab_with_pv partition(static_dat='计算日') select static_dat, product_id, count(user_id) pv from tab1 where static_dat = '计算日' group by 1,2 pv 的计算 select static_dat, product_id, sum(pv) pv from tab_with_pv where substr(static_dat,1,6) = '计算月' and static_dat \u003c= '计算日' group by 1,2 tab_with_user 这个表需要加上自依赖 insert overwrite table tab_with_user partition(static_dat='计算日') select distinct static_dat, product_id, user_id from tab_with_user where static_dat = '计算日' union select distinct static_dat, product_id, user_id from tab_with_user where static_dat = '计算日前一日' and substr(static_dat,1,6) = '计算月' uv 的计算 select static_dat, product_id, count(distinct user_id) uv from tab_with_user where static_dat = '计算日' 最后把 pv 和 uv 的数据拼接在一起即可。 ","date":"2022-11-16","objectID":"/study-of-liantong/:2:6","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"JAVA题目 ","date":"2022-11-16","objectID":"/study-of-liantong/:3:0","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 13 题 用代码或伪代码实现一个 java 限流工具类（说明：调用关系为我方系统调用对方系统，我方系统调用频次不能大于对方系统的限制，如：阿里云限制我方每秒调用不能大于1000次）。 答案 public class RateLimiterSimpleWindow { // 阈值 private static Integer QPS = 2; // 时间窗口（毫秒） private static long TIME_WINDOWS = 1000; // 计数器 private static AtomicInteger REQ_COUNT = new AtomicInteger(); private static long START_TIME = System.currentTimeMillis(); public synchronized static boolean tryAcquire() { if ((System.currentTimeMillis() - START_TIME) \u003e TIME_WINDOWS) { REQ_COUNT.set(0); START_TIME = System.currentTimeMillis(); } return REQ_COUNT.incrementAndGet() \u003c= QPS; } public static void main(String[] args) throws InterruptedException { for (int i = 0; i \u003c 10; i++) { Thread.sleep(250); LocalTime now = LocalTime.now(); if (!tryAcquire()) { System.out.println(now + \" 被限流\"); } else { System.out.println(now + \" 做点什么\"); } } ","date":"2022-11-16","objectID":"/study-of-liantong/:3:1","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 14 题 假设在 5 台 linux 服务器上我们部署了 5 个应用实例（外部访问默认通过 ngix 负载），该应用涉及到文件的上传和下载，你会如何设计，保证用户上传文件和下载文件时不会出现异常问题，同时也需要保证存储数据访问的安全性（假设不能使用对象存储服务）。 ","date":"2022-11-16","objectID":"/study-of-liantong/:3:2","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"Python题目 ","date":"2022-11-16","objectID":"/study-of-liantong/:4:0","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"第 15 题 现有一个 dataframe 对象 df，如下： name age sex score zhangsan 10 50 lisi 女 60 12 男 90 chenyi 11 女 chenhai 9 64 请分别写出相关代码： （1）将性别 sex 为空的使用男来替代；将 name 为空的记录删除；将 age、score 列为空的分别使用改列平均值替代。 df[\"sex\"].fillna(\"男\", inplace = True) # 将性别 sex 为空的使用男来替代 df[\"name\"].dropna() # 将 name 为空的记录删除 age_mean = df[\"age\"].mean() score_mean = df[\"score\"].mean() df[\"age\"].fillna(age_mean, inplace = True) df[\"score\"].fillna(score_mean, inplace = True) （2）完成 2.1 数据后，对性别进行分组汇总，得出每个性别的 score 汇总得分。 df.groupby(\"sex\").agg({\"score\":\"sum\"}) （3）找出分数大于平均分的记录，并输出 name 和 score df[df[\"score\"] \u003e df[\"score\"].mean()][[\"name\",\"score\"]] ","date":"2022-11-16","objectID":"/study-of-liantong/:4:1","tags":["面试"],"title":"学习之联通沃音乐","uri":"/study-of-liantong/"},{"categories":["学习"],"content":"学习之基础知识篇","date":"2022-11-08","objectID":"/study-of-interview/","tags":["面试","基础"],"title":"学习之基础知识篇","uri":"/study-of-interview/"},{"categories":["学习"],"content":"本文主要摘抄一些面试过程可能会遇到的一些基础知识问题，以便后续查阅复习。 ","date":"2022-11-08","objectID":"/study-of-interview/:0:0","tags":["面试","基础"],"title":"学习之基础知识篇","uri":"/study-of-interview/"},{"categories":["学习"],"content":"Linux操作系统常用命令 使用 shell 命令查看路径下的文件大小和属性 答案 ls -lrth 使用s hell 命令找出路径下带有关键字 “test” 的 go 语言文件 答案 find . -name \"*.go\"|xargs grep \"test\" 查看服务器的进程资源使用情况 答案 top 使用 shell 命令查看服务监听 80 端口的进程 id 答案 netstat -anp|grep EST|grep 80 ","date":"2022-11-08","objectID":"/study-of-interview/:1:0","tags":["面试","基础"],"title":"学习之基础知识篇","uri":"/study-of-interview/"},{"categories":["学习"],"content":"数仓之SQL篇","date":"2022-11-07","objectID":"/study-of-sql/","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"本文主要摘抄数仓中的一些 SQL 问题，包括一些常用的语法和练习题，以便后续查阅复习。 ","date":"2022-11-07","objectID":"/study-of-sql/:0:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"MySQL窗口函数和单行函数的使用 ","date":"2022-11-07","objectID":"/study-of-sql/:1:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"窗口函数 窗口函数也叫OLAP函数（Online Anallytical Processing联机分析处理），可以对数据进行实时分析处理。窗口函数是面试中考察的重点。窗口函数通常用来解决统计汇总、排名、TopN、连续登录天数等问题。 语法：函数名(字段名) over(partition by \u003c要分列的组\u003e order by \u003c要排序的列\u003e rows between \u003c数据范围\u003e) 数据范围：通过下面的案例来讲解数据范围如何使用。 # 取本行和前面两行 rows between 2 preceding and current row # 取本行和之前所有的行 rows between unbounded preceding and current row # 取本行和之后所有的行 rows between current row and unbounded following # 从前面三行和下面一行，总共五行 rows between 3 preceding and 1 following # 当order by后面没有rows between时，窗口规范默认是取本行和之前所有的行 # 当order by和rows between都没有时，窗口规范默认是分组下所有行（rows between unbounded preceding and unbounded following） 分类：按照窗口函数的意义大概可以分为下面 5 类，其中排序函数最为常用。 排序函数：row_number()、rank()、dense_rank() 分布函数：percent_rank()、cume_dist() 相对位置函数：lag(expr,n)、lead(expr,n)，用于返回某字段的前 n 行或后 n 行的值。expr 既可以是表达式也可以是列名。 绝对位置函数：first_value(expr)、last_value(expr)、nth_value(expr,n)，返回第一个或最后一个或第 n 个 expr 的值。 分桶函数：ntile(x) 另外，聚合函数也可以作为窗口函数使用： 聚合函数：avg()，sum()，min()，max() 排序函数 row_number()：对每一行分配一个序号，序号连续加1，不会重复。常用于排序。 rank()：给每行分配一个序号，相同值的序号相同，序号不连续。常用于排序。 dense_rank()：给每行分配一个序号，相同值的序号相同，序号连续。常用于排序。 分布函数 percent_rank()：每行按照公式$(rank-1) / (rows-1)$进行计算。其中，rank 为 RANK() 函数产生的序号，rows 为当前窗口的记录总行数。 cume_dist()：分组内小于、等于当前 rank 值的行数 / 分组内总行数 相对位置函数 lag(expr,n)：返回位于当前行的前 n 行的值 lead(expr,n)：返回位于当前行的后 n 行的值 绝对位置函数 first_value(expr)：返回第一个 expr 的值。 last_value(expr)：返回最后一个 expr 的值。 nth_value(expr,n)：返回窗口中第 n 个 expr 的值。 应用场景 1 举例：求首次登录和末次登录时间 select id, log_dt, first_value(log_dt) over(partition by id order by log_dt) f_dt, last_value(log_dt) over(partition by id order by log_dt) l_dt from tb; id log_dt f_dt l_dt 1 2020-11-10 2020-11-10 2020-11-10 1 2021-01-20 2020-11-10 2021-01-20 1 2021-08-12 2020-11-10 2021-08-12 2 2021-12-05 2021-12-05 2021-12-05 2 2021-12-29 2021-12-05 2021-12-29 应用场景 2 举例：求部门中工资第二的员工 SELECT id, dept_id did, salary s, NTH_VALUE(salary,2) over(PARTITION BY dept_id ORDER BY salary DESC) s2 FROM employee; id did s s2 2 1 200 100 1 1 100 100 4 2 400 300 3 2 300 300 6 3 560 500 5 3 500 500 分桶函数 ntile(n)：对每个分区继续分成 n 组，每组的行数为：分区的总行数 / n。不常用。 ","date":"2022-11-07","objectID":"/study-of-sql/:1:1","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"日期时间函数 CURDATE() 或 CURRENT_DATE() 返回当前日期 NOW() 返回当前系统日期时间 YEAR(date) 返回年 MONTH(date) 返回月 DAY(date) 返回日 DATEDIFF(date1,date2) 返回 date1 - date2 的日期间隔 DATE_FORMAT(datetime ,fmt) 按照字符串 fmt 格式化日期 datetime 值。 %Y 4 位数字表示年份 %m 两位数字表示月份（01,02,03,…） %d 两位数字表示月中的天数(01,02…) %H 两位数字表示小时，24小时制（01,02,…） ","date":"2022-11-07","objectID":"/study-of-sql/:1:2","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"流程函数 IF(value,t ,f) 如果 value 是真，返回 t，否则返回 f IFNULL(value1, value2) 如果 value1 不为空，返回 value1，否则返回 value2 CASE WHEN ","date":"2022-11-07","objectID":"/study-of-sql/:1:3","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"数学函数 ABS(x) 返回 x 的绝对值 CEIL(x) 返回大于 x 的最小整数值 FLOOR(x) 返回小于 x 的最大整数值 MOD(x,y) 返回 x/y 的模 RAND(x) 返回 0~1 的随机值，x可以不写 ROUND(x,y) 返回参数 x 的四舍五入的有 y 位的小数的值 TRUNCATE(x,y) 返回数字 x 截断为 y 位小数的结果 SQRT(x) 返回 x 的平方根 POW(x,y) 返回 x 的 y 次方 ","date":"2022-11-07","objectID":"/study-of-sql/:1:4","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"字符串函数 CONCAT(S1,S2,......,Sn) 连接 S1, S2, ......, Sn 为一个字符串 CONCAT_WS(separator, S1, S2, ......, Sn) 同 CONCAT(s1, s2, ...) 函数，但是每个字符串之间要加上分隔符 separator分隔符 TRIM(s) 去掉字符串 s 开始与结尾的空格 ","date":"2022-11-07","objectID":"/study-of-sql/:1:5","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"支付金额在前 20% 的用户 思路 利用 ntile select user_name from ( select user_name, ntile(5) over(order by sum(pay_amt) desc) as level from ( select 'A' user_name, 100 pay_amt union all select 'A' user_name, 10 pay_amt union all select 'A' user_name, 300 pay_amt union all select 'B' user_name, 100 pay_amt union all select 'B' user_name, 1090 pay_amt union all select 'C' user_name, 1030 pay_amt union all select 'D' user_name, 70 pay_amt union all select 'F' user_name, 770 pay_amt union all select 'G' user_name, 710 pay_amt union all select 'E' user_name, 800 pay_amt ) group by 1 ) where level = 1; ","date":"2022-11-07","objectID":"/study-of-sql/:2:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"连续 7 天都登陆平台 现有用户登陆表 user_login_table 如下： user_name 用户名 date 用户登陆时间 现在老板想知道连续 7 天都登陆平台的重要用户。 输出要求如下： user_name 用户名（连续 7 天都登陆的用户数） 思路1 首先利用偏移窗口函数 lead 求得每个用户在每个登陆时间向后偏移 7 行的登陆时间，再计算每个用户在每个登陆时间滞后 7 天的登陆时间，如果每个用户向后偏移 7 行的登陆时间正好等于滞后 7 天的时间，说明该用户连续登陆了 7 天。 select user_name from ( select user_name, log_date, lead(log_date, 7) over (partition by user_name order by log_date) log_date_7 from ( select 'A' user_name, '2020-01-01' log_date union all select 'A' user_name, '2020-01-02' log_date union all select 'A' user_name, '2020-01-03' log_date union all select 'A' user_name, '2020-01-04' log_date union all select 'A' user_name, '2020-01-05' log_date union all select 'A' user_name, '2020-01-06' log_date union all select 'A' user_name, '2020-01-07' log_date union all select 'A' user_name, '2020-01-08' log_date union all select 'A' user_name, '2020-01-19' log_date ) ) where log_date_7 is not null and date_add(log_date, 7) = log_date_7; 思路2 把用户每天登陆的日期进行排序，如果用当前天数减去序号，连续 3 天的话相同的数据就有 7 个 select user_id, count(1) cnt from ( select user_id, login_date, row_number() over(partition by user_id order by login_date) rn from tab1 ) group by user_id,date_sub(login_date, rn) having count(1) \u003e= 7; ","date":"2022-11-07","objectID":"/study-of-sql/:3:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"平均活跃天数和月活人数 用户在牛客试卷作答区作答记录存储在表 exam_record 中，内容如下： exam_record表（uid 用户 ID, exam_id 试卷 ID, start_time 开始作答时间, submit_time 交卷时间, score 得分） id uid exam_id start_time submit_time score 1 1001 9001 2021-07-02 09:01:01 2021-07-02 09:21:01 80 2 1002 9001 2021-09-05 19:01:01 2021-09-05 19:40:01 81 3 1002 9002 2021-09-02 12:01:01 (NULL) (NULL) 4 1002 9003 2021-09-01 12:01:01 (NULL) (NULL) 5 1002 9001 2021-07-02 19:01:01 2021-07-02 19:30:01 82 6 1002 9002 2021-07-05 18:01:01 2021-07-05 18:59:02 90 7 1003 9002 2021-07-06 12:01:01 (NULL) (NULL) 8 1003 9003 2021-09-07 10:01:01 2021-09-07 10:31:01 86 9 1004 9003 2021-09-06 12:01:01 (NULL) (NULL) 10 1002 9003 2021-09-01 12:01:01 2021-09-01 12:31:01 81 11 1005 9001 2021-09-01 12:01:01 2021-09-01 12:31:01 88 12 1006 9002 2021-09-02 12:11:01 2021-09-02 12:31:01 89 13 1007 9002 2020-09-02 12:11:01 2020-09-02 12:31:01 89 请计算 2021 年每个月里试卷作答区用户平均月活跃天数 avg_active_days 和月度活跃人数 mau，上面数据的示例输出如下： month avg_active_days mau 202107 1.50 2 202109 1.25 4 思路 对于用户平均活跃天数，则需要得到用户的总活跃天数和不同的用户数。不同的用户数和月活的求解方式一样，总活跃天数则需要同时读用户和日期进行去重，因为如果同一天有多个用户活跃，则最终的总活跃天数中是会计算多天的。 select date_format(submit_time,'%Y%m') month, round(count(distinct uid,date_format(submit_time,'%Y%m%d'))/count(distinct uid),2) avg_active_days, count(distinct uid) mau from exam_record where year(submit_time)=2021 group by month; ","date":"2022-11-07","objectID":"/study-of-sql/:4:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"每天的日活数及新用户占比 用户行为日志表 tb_user_log（uid-用户ID, artical_id-文章ID, in_time-进入时间, out_time-离开时间, sign_in-是否签到） id uid artical_id in_time out_time sign_cin 1 101 9001 2021-10-31 10:00:00 2021-10-31 10:00:09 0 2 102 9001 2021-10-31 10:00:00 2021-10-31 10:00:09 0 3 101 0 2021-11-01 10:00:00 2021-11-01 10:00:42 1 4 102 9001 2021-11-01 10:00:00 2021-11-01 10:00:09 0 5 108 9001 2021-11-01 10:00:01 2021-11-01 10:00:50 0 6 108 9001 2021-11-02 10:00:01 2021-11-02 10:00:50 0 7 104 9001 2021-11-02 10:00:28 2021-11-02 10:00:50 0 8 106 9001 2021-11-02 10:00:28 2021-11-02 10:00:50 0 9 108 9001 2021-11-03 10:00:01 2021-11-03 10:00:50 0 10 109 9002 2021-11-03 11:00:55 2021-11-03 11:00:59 0 11 104 9003 2021-11-03 11:00:45 2021-11-03 11:00:55 0 12 105 9003 2021-11-03 11:00:53 2021-11-03 11:00:59 0 13 106 9003 2021-11-03 11:00:45 2021-11-03 11:00:55 0 问题：统计每天的日活数及新用户占比 注： 新用户占比 = 当天的新用户数 ÷ 当天活跃用户数（日活数）。 如果in_time-进入时间和out_time-离开时间跨天了，在两天里都记为该用户活跃过。 新用户占比保留2位小数，结果按日期升序排序。 输出示例： 示例数据的输出结果如下 dt dau uv_new_ratio 2021-10-30 2 1.00 2021-11-01 3 0.33 2021-11-02 3 0.67 2021-11-03 5 0.40 思路1 日活就是每天访问的不同用户数，所以我们首先要得到一张登录表，登录表记录了每天登录的用户，并按天对用户进行了去重，也就是下面的 t1。而要统计新用户的占比，我们就需要识别每天登录用户中哪些用户是新用户（即第一次登录）。一个可行的思路是，使用窗口函数对每个用户的登录日期进行排序得到下面的 t2。统计的时候进行判断，如果统计当天该用户的序号为 1，则表示用户今天是第一次登录，即为新用户。 with t1 as ( # 用户登录表，记录了用户 id 和登录时间，对每天的登录用户进行了去重 select uid, date(in_time) dt from tb_user_log union # union 实现去重，union all 不去重 select uid, date(out_time) dt from tb_user_log ), t2 as ( # 对每个用户的登录日期进行排序，注册日期的序号是 1 select uid,dt, row_number() over(partition by uid order by dt) rn from t1 ) # 获得答案 select dt, count(uid) dau, round(sum(if(rn=1, 1, 0))/count(uid),2) uv_new_ration from t2 group by dt order by dt; 思路2 同样的思路得到用户登录表 t1。每个用户的注册日期肯定在登录表中是最小的，因此用 min 函数可以得到用户登录表即下面的 t2。最后在求解答案的时候，用 t1 left join t2，关联的字段是 uid 以及日期，由于使用了 left join，t1 中每个用户所有的登录日期都得到了保留，count 计数即可得到 dau，而 t2 表中不是当天注册的用户 uid 和 reg_dt 都为 null，同样使用 count 计数就能得到当天的新用户。 with t1 as ( # 用户登录表，记录了用户 id 和登录时间，对每天的登录用户进行了去重 select uid, date(in_time) dt from tb_user_log union select uid, date(out_time) dt from tb_user_log ), t2 as ( # 得到用户注册表 select uid, min(dt) reg_dt from t1 group by uid ) select dt, count(t1.uid) dau, round(count(t2.uid)/count(t1.uid),2) uv_new_ration from t1 left join t2 on t1.uid = t2.uid and t1.dt = t2.reg_dt group by dt order by dt; ","date":"2022-11-07","objectID":"/study-of-sql/:5:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"用户留存分析 n日留存率 = 第 n 天还在登录的用户数/新增的用户数，假如某日新增了 100 个用户，第二天登录了 50 个，则次日留存率为 50/100 = 50%，第三天登录了 30 个，则第二日留存率为 30/100 = 30%，以此类推，第 7 天登录了 10 个用户，则 7 日留存率就是 10/100 = 10%。 首先，我们需要计算出每个user的首次登录日期，也就是下面的代码。 SELECT user_id, MIN(log_date) AS first_log_date FROM user_log GROUP BY user_id 然后，我们和 user_log 表进行关联之后再进行日期差的计算，这就得到了某一天登录离第一次登录有多长时间。 --用户留存计算 SELECT first_log_date, SUM(CASE WHEN t3.diff_days = 0 THEN 1 ELSE 0 END) AS day_0, SUM(CASE WHEN t3.diff_days = 1 THEN 1 ELSE 0 END) AS day_1, SUM(CASE WHEN t3.diff_days = 2 THEN 1 ELSE 0 END) AS day_2, SUM(CASE WHEN t3.diff_days = 3 THEN 1 ELSE 0 END) AS day_3, SUM(CASE WHEN t3.diff_days = 4 THEN 1 ELSE 0 END) AS day_4, SUM(CASE WHEN t3.diff_days = 5 THEN 1 ELSE 0 END) AS day_5, SUM(CASE WHEN t3.diff_days = 6 THEN 1 ELSE 0 END) AS day_6, SUM(CASE WHEN t3.diff_days = 7 THEN 1 ELSE 0 END) AS day_7 FROM ( SELECT t1.user_id, t2.first_log_date, DATEDIFF(DAY, t2.first_log_date, t1.log_date) AS diff_days FROM user_log AS t1 LEFT JOIN ( SELECT user_id, MIN(log_date) AS first_log_date FROM user_log GROUP BY user_id ) as t2 ON t1.user_id = t2.user_id ) AS t3 GROUP BY first_log_date ","date":"2022-11-07","objectID":"/study-of-sql/:6:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"列转行 数据准备 create table t1 as select '1' as id ,'mike' as name ,'22' as age,'0' as gender union all select '2' as id ,'kangkang' as name ,'19' as age,'1' as gender ","date":"2022-11-07","objectID":"/study-of-sql/:7:0","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"使用 union select id,'name' as type,name as value from t1 union all select id,'age' as type,age as value from t1 union all select id,'gender' as type,gender as value from t1 order by id ","date":"2022-11-07","objectID":"/study-of-sql/:7:1","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"采用concat_ws() + posexplode()方法 select id, type, value from ( select t.id, t1.pos1, t1.value1 as value, t2.pos2, t2.type2 as type from ( select id, concat_ws(',', name, age, gender) as value, array('name', 'age', 'gender') as type from t1 ) t lateral view posexplode(split(t.value, ',')) t1 as pos1, value1 lateral view posexplode(t.type) t2 as pos2, type2 ) t where t.pos1 = t.pos2 SQL简化如下： select id, b.type2 as type, a.value1 as value from t1 lateral view posexplode(split(concat_ws(',', t1.name, t1.age, t1.gender), ',')) a as pos1, value1 lateral view posexplode(array('name', 'age', 'gender')) b as pos2, type2 where a.pos1 = b.pos2 ","date":"2022-11-07","objectID":"/study-of-sql/:7:2","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"采用explode()+case when方法 select id, type, case type when 'name' then name when 'age' then age when 'gender' then gender else null end as value from t1 lateral view explode(array('name', 'age', 'gender')) t2 as type ","date":"2022-11-07","objectID":"/study-of-sql/:7:3","tags":["数仓","SQL"],"title":"数仓之SQL篇","uri":"/study-of-sql/"},{"categories":["学习"],"content":"数仓之学无止境","date":"2022-11-03","objectID":"/study-of-all-life/","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"本文主要摘抄数仓面试中的一些常见问题，以便后续查阅复习。 ","date":"2022-11-03","objectID":"/study-of-all-life/:0:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"数仓是什么？ 数据仓库是一个面向主题的、集成的、相对稳定的、反映历史变化的数据集合，用于支持管理决策。 ","date":"2022-11-03","objectID":"/study-of-all-life/:1:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"Hive 是什么？ 是基于 Hadoop 的一个数据仓库工具； 可以将结构化的数据映射为一张数据库表； 并提供 HQL(Hive SQL) 查询功能； 底层数据是存储在 HDFS 上； Hive 的本质是将 SQL 语句转换为 MapReduce、Tez 或者 spark 等任务执行； 适用于离线的批量数据计算。 ","date":"2022-11-03","objectID":"/study-of-all-life/:2:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"ETL 是哪三个单词的缩写 Extraction 提取 Transformation 转换 Loading 加载 ","date":"2022-11-03","objectID":"/study-of-all-life/:3:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"知道笛卡尔积吗？ 根据笛卡尔积的定义，JOIN 的两表中的任意一行都会形成一组关系对，如果 A 表有 N 条记录，B 表有 M 条记录，A X B 会生产 N*M 条数据。 1 可 以 通 过 CROSS JOIN 来实现笛卡尔积 select * from A cross join b 如果不支持 CROSS JOIN 的情况下，可以采用 select * from A join B on 1 = 1 的方式实现。 第二种方法可能在语法检测阶段就报错不支持，可以转成如下语法 select * from (select * , '1' as flag from A) t1 on (select *, '1' as flag from B) t2 where t1.flag = t2.flag ","date":"2022-11-03","objectID":"/study-of-all-life/:4:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"shuffle 用来干什么？ 为了让相同的 key 都到一个 reduce 中进行处理，reduce 要去每个 map 中拉取数据，all-to-all 的过程，跨分区聚集相同的 key。 ","date":"2022-11-03","objectID":"/study-of-all-life/:5:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"数据倾斜的场景与解决方法 ","date":"2022-11-03","objectID":"/study-of-all-life/:6:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"内部表和外部表 ","date":"2022-11-03","objectID":"/study-of-all-life/:7:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"离线数仓最大的挑战是什么，如何克服的，是否沉淀方法论 ","date":"2022-11-03","objectID":"/study-of-all-life/:8:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["学习"],"content":"实时数仓如何保障数据质量，有哪些手段和方式 参考链接：大数据SQL如何实现笛卡尔积 ↩︎ ","date":"2022-11-03","objectID":"/study-of-all-life/:9:0","tags":["数仓"],"title":"数仓之学无止境","uri":"/study-of-all-life/"},{"categories":["诗歌"],"content":"诗歌之荟萃","date":"2022-11-03","objectID":"/poetry-of-others/","tags":["张若虚"],"title":"诗歌之荟萃","uri":"/poetry-of-others/"},{"categories":["诗歌"],"content":"本文主要汇总一些诗人的著名诗篇，这些作者留下的诗篇不多，但是都是非常经典的，比如张若虚的春江花月夜。 ","date":"2022-11-03","objectID":"/poetry-of-others/:0:0","tags":["张若虚"],"title":"诗歌之荟萃","uri":"/poetry-of-others/"},{"categories":["诗歌"],"content":"张若虚 ","date":"2022-11-03","objectID":"/poetry-of-others/:1:0","tags":["张若虚"],"title":"诗歌之荟萃","uri":"/poetry-of-others/"},{"categories":["诗歌"],"content":"春江花月夜 春江潮水连海平，海上明月共潮生。 滟滟随波千万里，何处春江无月明！ 江流宛转绕芳甸，月照花林皆似霰； 空里流霜不觉飞，汀上白沙看不见。 江天一色无纤尘，皎皎空中孤月轮。 江畔何人初见月？江月何年初照人？ 人生代代无穷已，江月年年望相似。 不知江月待何人，但见长江送流水。 白云一片去悠悠，青枫浦上不胜愁。 谁家今夜扁舟子？何处相思明月楼？ 可怜楼上月裴回，应照离人妆镜台。 玉户帘中卷不去，捣衣砧上拂还来。 此时相望不相闻，愿逐月华流照君。 鸿雁长飞光不度，鱼龙潜跃水成文。 昨夜闲潭梦落花，可怜春半不还家。 江水流春去欲尽，江潭落月复西斜。 斜月沉沉藏海雾，碣石潇湘无限路。 不知乘月几人归，落月摇情满江树。 ","date":"2022-11-03","objectID":"/poetry-of-others/:1:1","tags":["张若虚"],"title":"诗歌之荟萃","uri":"/poetry-of-others/"},{"categories":["诗歌"],"content":"代答闺梦还 关塞年华早，楼台别望违。 试衫著暖气，开镜觅春晖。 燕入窥罗幕，蜂来上画衣。 情催桃李艳，心寄管弦飞。 妆洗朝相待，风花暝不归。 梦魂何处入，寂寂掩重扉。 ","date":"2022-11-03","objectID":"/poetry-of-others/:1:2","tags":["张若虚"],"title":"诗歌之荟萃","uri":"/poetry-of-others/"},{"categories":["诗歌"],"content":"诗歌之李商隐","date":"2022-11-02","objectID":"/poetry-of-lishangyin/","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"李商隐（约813年～约858年），字义山，号玉谿生，怀州河内（今河南省沁阳市）人。晚唐著名诗人，和杜牧合称“小李杜”。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:0:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"夜雨寄北 君问归期未有期，巴山夜雨涨秋池。 何当共剪西窗烛，却话巴山夜雨时。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:1:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"无题·相见时难别亦难 相见时难别亦难，东风无力百花残。 春蚕到死丝方尽，蜡炬成灰泪始干。 晓镜但愁云鬓改，夜吟应觉月光寒。 蓬山此去无多路，青鸟殷勤为探看。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:2:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"锦瑟 锦瑟无端五十弦，一弦一柱思华年。 庄生晓梦迷蝴蝶，望帝春心托杜鹃。 沧海月明珠有泪，蓝田日暖玉生烟。 此情可待成追忆？只是当时已惘然。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:3:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"嫦娥 云母屏风烛影深，长河渐落晓星沉。 嫦娥应悔偷灵药，碧海青天夜夜心。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:4:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"登乐游原 向晚意不适，驱车登古原。 夕阳无限好，只是近黄昏。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:5:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"贾生 宣室求贤访逐臣，贾生才调更无伦。 可怜夜半虚前席，不问苍生问鬼神。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:6:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"宿骆氏亭寄怀崔雍崔衮 竹坞无尘水槛清，相思迢递隔重城。 秋阴不散霜飞晚，留得枯荷听雨声。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:7:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"无题二首 昨夜星辰昨夜风，画楼西畔桂堂东。 身无彩凤双飞翼，心有灵犀一点通。 隔座送钩春酒暖，分曹射覆蜡灯红。 嗟余听鼓应官去，走马兰台类转蓬。 闻道阊门萼绿华，昔年相望抵天涯。 岂知一夜秦楼客，偷看吴王苑内花。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:8:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"安定城楼 迢递高城百尺楼，绿杨枝外尽汀洲。 贾生年少虚垂泪，王粲春来更远游。 永忆江湖归白发，欲回天地入扁舟。 不知腐鼠成滋味，猜意鹓雏竟未休。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:9:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"无题·八岁偷照镜 八岁偷照镜，长眉已能画。 十岁去踏青，芙蓉作裙衩。 十二学弹筝，银甲不曾卸。 十四藏六亲，悬知猜想犹未嫁。 十五泣春风，背面秋千下。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:10:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["诗歌"],"content":"夕阳楼 花明柳暗绕天愁，上尽重城更上楼。 欲问孤鸿向何处，不知身世自悠悠。 ","date":"2022-11-02","objectID":"/poetry-of-lishangyin/:11:0","tags":["李商隐"],"title":"诗歌之李商隐","uri":"/poetry-of-lishangyin/"},{"categories":["股市"],"content":"股市2022Q4记录","date":"2022-10-30","objectID":"/stock-of-2022q4/","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":" 碳中和基金的每日总结 日期 Step1 Step2 Step3 Step4 20221101 高开 拉升 下来了一半 然后冲高 20221102 低开 拉升 冲高 震荡 20221103 低开 拉升 震荡 跳水 20221106 高开 拉升 走强 横盘 20221107 平开 拉升 跳水 震荡 20221108 低开 拉升 跳水 小V 20221109 高开 下跌 跳水 横盘 20221110 低开 下跌 回落 横盘 20221111 高开 下跌 小V 横盘 20221113 低开 下跌 跳水 跳水 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:0:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.10.14 医疗ETF 日丰转债 今天医疗赛道涨到天花板去了，ETF都涨了 10 个点 尾盘入了日丰转债，成本 131.479，希望下周一高开，赚一点 周天召开 20 大，希望出利好消息，下周开启起飞模式 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:1:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.11.01 供销社概念 碳中和今天回血 3.36 个点 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:2:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.11.02 腾讯和联通合作成立了一个公司 回暖 3000 点 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:3:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.11.03 美联储加息，A股大跳水 高开低走的一天 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:4:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.11.07 连续涨了好几天，希望明天大跌啊 在川投转债撸了 200 多元 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:5:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.11.08 入了嘉诚转债，希望早点解套 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:6:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.11.09 嘉诚转债 嘉诚转债被深套 1.9 个点，下次冲高的话还是先出一部分吧 今天行情不太好，大盘在回调 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:7:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["股市"],"content":"2022.11.14 今天惨兮兮，碳中和放量大跌，血亏 3 个点 对嘉诚无语了，早盘还冲高了，后面直接跳水 最近医药有点猛 ","date":"2022-10-30","objectID":"/stock-of-2022q4/:8:0","tags":["投资"],"title":"股市2022Q4记录","uri":"/stock-of-2022q4/"},{"categories":["学习"],"content":"学习刷题Part1","date":"2022-10-30","objectID":"/exercise-1/","tags":["牛客","刷题"],"title":"学习刷题Part1","uri":"/exercise-1/"},{"categories":["学习"],"content":"比特和波特 关于比特和波特，下面说法正确的是( )。 (A) 比特和波特施一个概念 (B) 比特是码元传输速率单位 (C) 波特是信息量单位 (D) 在某些情况下，“比特/秒”和“波特”在数值上是相等的 参考答案 ","date":"2022-10-30","objectID":"/exercise-1/:1:0","tags":["牛客","刷题"],"title":"学习刷题Part1","uri":"/exercise-1/"},{"categories":["学习"],"content":"比特和波特 正确答案: D 比特 比特率是信息量传送速率单位，即每秒传输二 进制代码位数。bit/s 波特 波特率是码元传输速率单位，他说明单位时间 传输了多少个码元 ","date":"2022-10-30","objectID":"/exercise-1/:2:0","tags":["牛客","刷题"],"title":"学习刷题Part1","uri":"/exercise-1/"},{"categories":["诗歌"],"content":"诗歌之李白篇","date":"2022-10-29","objectID":"/poetry-of-libai/","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"李白（701年2月28日—762年12月），字太白，号青莲居士，又号“谪仙人”，唐代伟大的浪漫主义诗人，被后人誉为“诗仙”，与杜甫并称为“李杜”。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:0:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"黄鹤楼送孟浩然之广陵 故人西辞黄鹤楼，烟花三月下扬州。 孤帆远影碧空尽，唯见长江天际流。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:1:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"望庐山瀑布 日照香炉生紫烟，遥看瀑布挂前川。 飞流直下三千尺，疑是银河落九天。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:2:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"静夜思 床前明月光，疑是地上霜。 举头望明月，低头思故乡。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:3:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"早发白帝城 朝辞白帝彩云间，千里江陵一日还。 两岸猿声啼不住，轻舟已过万重山。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:4:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"独坐敬亭山 众鸟高飞尽，孤云独去闲。 相看两不厌，只有敬亭山。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:5:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"赠汪伦 李白乘舟将欲行，忽闻岸上踏歌声。 桃花潭水深千尺，不及汪伦送我情。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:6:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"清平调·其一 云想衣裳花想容，春风拂槛露华浓。 若非群玉山头见，会向瑶台月下逢。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:7:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"清平调·其二 一枝秾艳露凝香，云雨巫山枉断肠。 借问汉宫谁得似，可怜飞燕倚新妆。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:8:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"清平调·其三 名花倾国两相欢，常得君王带笑看。 解释春风无限恨，沉香亭北倚阑干。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:9:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"渡荆门送别 渡远荆门外，来从楚国游。 山随平野尽，江入大荒流。 月下飞天镜，云生结海楼。 仍怜故乡水，万里送行舟。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:10:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"将进酒·君不见 君不见，黄河之水天上来，奔流到海不复回。 君不见，高堂明镜悲白发，朝如青丝暮成雪。 人生得意须尽欢，莫使金樽空对月。 天生我材必有用，千金散尽还复来。 烹羊宰牛且为乐，会须一饮三百杯。 岑夫子，丹丘生，将进酒，杯莫停。 与君歌一曲，请君为我倾耳听。 钟鼓馔玉不足贵，但愿长醉不愿醒。 古来圣贤皆寂寞，惟有饮者留其名。 陈王昔时宴平乐，斗酒十千恣欢谑。 主人何为言少钱，径须沽取对君酌。 五花马，千金裘， 呼儿将出换美酒，与尔同销万古愁。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:11:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"望天门山 天门中断楚江开，碧水东流至此回。 两岸青山相对出，孤帆一片日边来。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:12:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"春夜洛城闻笛 谁家玉笛暗飞声，散入春风满洛城。 此夜曲中闻折柳，何人不起故园情。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:13:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"闻王昌龄左迁龙标遥有此寄 杨花落尽子规啼，闻道龙标过五溪。 我寄愁心与明月，随君直到夜郎西。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:14:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"峨眉山月歌 峨眉山月半轮秋，影入平羌江水流。 夜发清溪向三峡，思君不见下渝州。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:15:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"宣州谢朓楼饯别校书叔云 弃我去者，昨日之日不可留； 乱我心者，今日之日多烦忧。 长风万里送秋雁，对此可以酣高楼。 蓬莱文章建安骨，中间小谢又清发。 俱怀逸兴壮思飞，欲上青天览明月。 抽刀断水水更流，举杯消愁愁更愁。 人生在世不称意，明朝散发弄扁舟。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:16:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"行路难·其一 金樽清酒斗十千，玉盘珍羞直万钱。 停杯投箸不能食，拔剑四顾心茫然。 欲渡黄河冰塞川，将登太行雪满山。 闲来垂钓碧溪上，忽复乘舟梦日边。 行路难，行路难，多歧路，今安在？ 长风破浪会有时，直挂云帆济沧海。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:17:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"夜宿山寺 危楼高百尺，手可摘星辰。 不敢高声语，恐惊天上人。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:18:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"秋风词 秋风清，秋月明， 落叶聚还散，寒鸦栖复惊。 相思相见知何日？此时此夜难为情！ ","date":"2022-10-29","objectID":"/poetry-of-libai/:19:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"赠孟浩然 吾爱孟夫子，风流天下闻。 红颜弃轩冕，白首卧松云。 醉月频中圣，迷花不事君。 高山安可仰，徒此揖清芬。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:20:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"},{"categories":["诗歌"],"content":"听蜀僧濬弹琴 蜀僧抱绿绮，西下峨眉峰。 为我一挥手，如听万壑松。 客心洗流水，馀响入霜钟。 不觉碧山暮，秋云暗几重。 ","date":"2022-10-29","objectID":"/poetry-of-libai/:21:0","tags":["李白"],"title":"诗歌之李白篇","uri":"/poetry-of-libai/"}]