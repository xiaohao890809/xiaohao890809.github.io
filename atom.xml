<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Etiquette&#39;s Blog</title>
  <subtitle>越努力，越幸运！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaohao890809.github.io/"/>
  <updated>2019-01-07T15:47:56.973Z</updated>
  <id>http://xiaohao890809.github.io/</id>
  
  <author>
    <name>追寻原风景</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大数据积累笔记</title>
    <link href="http://xiaohao890809.github.io/2018/03/18/The-note-of-big-data/"/>
    <id>http://xiaohao890809.github.io/2018/03/18/The-note-of-big-data/</id>
    <published>2018-03-18T15:55:23.000Z</published>
    <updated>2019-01-07T15:47:56.973Z</updated>
    
    <content type="html"><![CDATA[<p>本文记载一些平时遇到的大数据相关的问题，坑遇多了，相应的处理问题的能力也提高了。<br><a id="more"></a> </p>
<h2 id="presto"><a href="#presto" class="headerlink" title="presto"></a>presto</h2><h3 id="presto无法删除表"><a href="#presto无法删除表" class="headerlink" title="presto无法删除表"></a>presto无法删除表</h3><blockquote>
<p>presto Access Denied: Cannot drop table</p>
</blockquote>
<p><strong>解决办法：</strong><br>在 Catalog 文件里修改 hive 配置 😇<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hive.allow-drop-table = true</div></pre></td></tr></table></figure></p>
<h3 id="presto不能删除某行"><a href="#presto不能删除某行" class="headerlink" title="presto不能删除某行"></a>presto不能删除某行</h3><p>建表的时候设置 partitioned_by 参数，如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</div><div class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span>,</div><div class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span></div><div class="line">)<span class="keyword">WITH</span>(</div><div class="line">    partitioned_by = <span class="built_in">ARRAY</span>[<span class="string">'name'</span>]</div><div class="line">);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记载一些平时遇到的大数据相关的问题，坑遇多了，相应的处理问题的能力也提高了。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习基础之概率论</title>
    <link href="http://xiaohao890809.github.io/2018/03/07/The-note-of-probability-theory/"/>
    <id>http://xiaohao890809.github.io/2018/03/07/The-note-of-probability-theory/</id>
    <published>2018-03-07T15:54:23.000Z</published>
    <updated>2019-01-07T11:57:53.097Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习算法中有很多用到概率论知识的地方，比如贝叶斯定理，频繁挖掘，条件概率等，掌握好概率论的基础知识有利于更好的理解机器学习中的相关算法。<br><a id="more"></a> </p>
<p>三箱零件，其中第一箱 10 个零件，第二箱 20 个零件，第三箱 15 个。检验结果表明第一箱有 1 个不合格，第二箱有 3 个不合格，第三箱有 2 个不合格，从中抽取一个零件，合格的概率有多少？</p>
<blockquote>
<p>记 $A_i$ 为从第 $i$ 个箱子拿的零件，拿到正品的事件记为B。<br>$$<br>\begin{align}<br>P(B)&amp;=P(A_1)\cdot P(B|A_1)+P(A_2)\cdot P(B|A_2)+P(A_3)\cdot P(B|A_3)\\<br>&amp;=P(A_1)+P(A_2)\cdot P(B|A_2)+P(A_3)\cdot P(B|A_3)\\<br>&amp;=\frac{1}{3}\cdot \frac{9}{10}+\frac{1}{3}\cdot \frac{17}{20}+\frac{1}{3}\cdot \frac{13}{15}\\<br>&amp;=0.872<br>\end{align}<br>$$问题：求逆向概率$P(A_{1}|B)$，抽到的这个合格品来自箱子 $A_{1}$ 的概率。<br>$$<br>\begin{align}<br>P(A_{1}|B)&amp;=\frac{P(A_1\cdot B)}{P(B)}\\<br>&amp;=\frac{P(A_1)\cdot P(B|A_1)}{P(B)}\\<br>&amp;=\frac{\frac{1}{3}\cdot \frac{9}{10}}{P(B)}\\<br>&amp;=\frac{0.3}{0.872}=0.344<br>\end{align}<br>$$</p>
</blockquote>
<p>注意条件概率 $P(B|A_1)$ 和联合概率 $P(A_1\cdot B)$ 的使用。</p>
<p><strong>分类问题概述：</strong><br>通过对已知类别信息的数据进行学习后获得分类模型(classifier)，利用分类模型对未知类别信息的数据进行分类(classification)。</p>
<h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><p>分类算法举例——朴素贝叶斯(Naive Bayesian Model, NBM)</p>
<p>$$\begin{cases}<br>P(C_i|X)=\frac{P(X|C_i)\cdot P(C_i)}{P(X)}\\<br>P(X|C_i)=\prod_{K=1}^{n}P(X_k|C_i)\\<br>P(AB)=P(A)\cdot P(B)\\<br>\end{cases}<br>$$</p>
<ul>
<li>$P(C_i|X)$: 后验概率</li>
<li>$P(X|C_i)$: 条件概率</li>
<li>$P(C_i)$: 最大似然估计</li>
</ul>
<p>通过数据元组的各个属性表示(值)，计算出该数据元素属于$C_i$的概率。<br>根据贝叶斯定理，将已知各属性表示求所属后验概率的问题转为已知所属类各属性表示组合的条件概率的问题。</p>
<p>需要对已标记类别的训练样本进行统计分析。<br>对样本库数据计算各类的最大似然用以估计各类的先验概率。<br>计算各属性值的条件概率。<br>假设各属性间相互独立。</p>
<table>
<thead>
<tr>
<th style="text-align:center">ID</th>
<th style="text-align:center">age</th>
<th style="text-align:center">income</th>
<th style="text-align:center">student</th>
<th style="text-align:center">credit</th>
<th style="text-align:center">class:buy</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">high</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">high</td>
<td style="text-align:center">no</td>
<td style="text-align:center">excellent</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">high</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">high</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">no</td>
</tr>
</tbody>
</table>
<p>样本库中各类数据的先验概率：<br>$$<br>\begin{align}<br>&amp;P(buy=yes)=\frac{9}{14}=0.643\\<br>&amp;P(buy=no)=\frac{5}{14}=0.357<br>\end{align}<br>$$</p>
<p>每一项属性值的条件概率：<br>$$<br>\begin{align}<br>&amp;P(age=youth|buy=yes)=\frac{2}{9}=0.222\\<br>&amp;P(age=youth|buy=no)=\frac{3}{5}=0.600\\<br>&amp;P(income=medium|buy=yes)=\frac{4}{9}=0.444\\<br>&amp;P(income=medium|buy=no)=\frac{2}{5}=0.400\\<br>&amp;P(student=yes|buy=yes)=\frac{6}{9}=0.667\\<br>&amp;P(student=yes|buy=no)=\frac{1}{5}=0.200\\<br>&amp;P(credict=fair|buy=yes)=\frac{6}{9}=0.667\\<br>&amp;P(credict=fair|buy=no)=\frac{2}{5}=0.400<br>\end{align}<br>$$</p>
<p>求 $x=(youth,medium,yes,fair)$ 属于哪个类？<br>假设各属性之间相互独立，求得测试数据属性向量的条件该概率：<br>$$<br>\begin{align}<br>P(x|buy=yes)&amp;=P(age=youth|buy=yes)\\<br>&amp;\cdot P(income=medium|buy=yes)\\<br>&amp;\cdot P(student=yes|buy=yes)\\<br>&amp;\cdot P(credit=fair|buy=yes)\\<br>&amp;=0.222\cdot 0.444\cdot 0.667\cdot 0.667\\<br>&amp;=0.044<br>\end{align}<br>$$</p>
<p>同理：<br>$$<br>P(x|buy=no)=0.019<br>$$</p>
<p>选取能使以下公式取值最大的分类：<br>$$<br>P(C_i|x)=\frac{P(x|C_i)\cdot P(C_i)}{P(x)}<br>$$</p>
<p>其中 $P(x)$ 为该特征向量取值的先验概率，始终为常量。<br>$$<br>\begin{align}<br>&amp;P(x|buy=yes)\cdot P(buy=yes)=0.044\cdot 0.643=0.082\\<br>&amp;P(x|buy=no)\cdot P(buy=no)=0.019\cdot 0.357=0.007<br>\end{align}<br>$$<br>所以判定测试数据属于 $buy=yes$类。</p>
<h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><blockquote>
<p>摘自：数据挖掘中决策树的探讨(马秀红)</p>
</blockquote>
<p>某装备维修项目如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">役龄</th>
<th style="text-align:center">价格</th>
<th style="text-align:center">是否关键部件</th>
<th style="text-align:center">可靠性</th>
<th style="text-align:center">是否更换</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">高</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">高</td>
<td style="text-align:center">否</td>
<td style="text-align:center">好</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">高</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">低</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">高</td>
<td style="text-align:center">是</td>
<td style="text-align:center">好</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">低</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">中</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">低</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">是</td>
<td style="text-align:center">好</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">好</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">高</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">好</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>使用信息增益进行属性选择，更新的备件数为$p$，不更新的备件数为$n$，则样本分类的期望信息：</p>
<p>$$<br>\begin{align}<br>I(p,n)&amp;=I(9,5)\\<br>&amp;=-\frac{9}{14}\cdot log_{2}\frac{9}{14}-\frac{5}{14}\cdot log_{2}\frac{5}{14}\\<br>&amp;=0.940<br>\end{align}<br>$$</p>
<p>计算各属性的熵：</p>
<table>
<thead>
<tr>
<th style="text-align:center">役龄</th>
<th style="text-align:center">$P_i$</th>
<th style="text-align:center">$N_i$</th>
<th style="text-align:center">$I(P_i,N_i)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">0.971</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0.971</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>有役龄划分为子集的熵：</p>
<p>$$<br>\begin{align}<br>E(役龄)&amp;=\frac{5}{14}I(2,3)+\frac{5}{14}I(3,2)+\frac{4}{14}I(4,0)\\<br>&amp;=0.6936<br>\end{align}<br>$$</p>
<p>役龄为属性，具有3个不同取值的信息增益为：</p>
<p>$$<br>Gain(役龄)=I(p,n)-E(役龄)=0.2464<br>$$</p>
<p>同理：</p>
<p>$$<br>\begin{align}<br>&amp;Gain(价格)=0.2098\\<br>&amp;Gain(关键部件)=0.151\\<br>&amp;Gain(可靠性)=0.10194<br>\end{align}<br>$$</p>
<p>因此：<br>$$<br>Gain(可靠性)&lt;Gain(关键部件)&lt;Gain(价格)&lt;Gain(役龄)<br>$$</p>
<p>分类结果如图所示：<br><img src="/images/信息增益.jpg" alt="信息增益" title="信息增益"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习算法中有很多用到概率论知识的地方，比如贝叶斯定理，频繁挖掘，条件概率等，掌握好概率论的基础知识有利于更好的理解机器学习中的相关算法。&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://xiaohao890809.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>VBA知识点总结</title>
    <link href="http://xiaohao890809.github.io/2018/03/01/The-note-of-vba/"/>
    <id>http://xiaohao890809.github.io/2018/03/01/The-note-of-vba/</id>
    <published>2018-03-01T14:53:23.000Z</published>
    <updated>2018-04-18T13:58:43.621Z</updated>
    
    <content type="html"><![CDATA[<p>VBA是一门比较早的语言了，用于处理 Office 办公软件的数据，不过最近听说以后会被 Python 代替（笑脸），现在总结一些使用 VBA 的过程遇到的一些问题以及解决办法。<br><a id="more"></a> </p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><blockquote>
<p>此文件正由应用程序或另一用户使用。</p>
</blockquote>
<p>解决方案：打开后记得做退出关闭操作。</p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Set</span> wdApp = GetObject(,<span class="string">"word.application"</span>)</div><div class="line"><span class="keyword">If</span> wdApp <span class="keyword">is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">   Sef wdApp = CreatObject(<span class="string">"word.application"</span>)</div><div class="line">   wdApp.Visible = <span class="literal">True</span></div><div class="line"><span class="keyword">End</span> <span class="keyword">If</span></div><div class="line">wdApp.NormalTemplate.Saved = <span class="literal">True</span></div><div class="line">wdApp.Quit</div><div class="line"><span class="keyword">Set</span> wdApp = <span class="literal">Nothing</span></div></pre></td></tr></table></figure>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="获取最大有效行数"><a href="#获取最大有效行数" class="headerlink" title="获取最大有效行数"></a>获取最大有效行数</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> GetLastRow(theSheet <span class="keyword">As</span> Worksheet, <span class="keyword">ByVal</span> col <span class="keyword">As</span> <span class="built_in">Integer</span>) <span class="keyword">As</span> <span class="built_in">Integer</span></div><div class="line">  </div><div class="line">   <span class="keyword">Dim</span> findreg <span class="keyword">As</span> Range, ret <span class="keyword">As</span> Range</div><div class="line">   <span class="keyword">Set</span> findreg = theSheet.Columns(col)</div><div class="line">   <span class="keyword">Set</span> ret = findreg.Find(what:=<span class="string">"*"</span>, searchDirection:=xlPrevious)</div><div class="line">   <span class="keyword">If</span> <span class="keyword">Not</span> ret <span class="keyword">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">      GetLastRow = ret.Row</div><div class="line">   <span class="keyword">Else</span></div><div class="line">      GetLastRow = <span class="number">0</span></div><div class="line">   <span class="keyword">End</span> <span class="keyword">If</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h3 id="获取最大有效列数"><a href="#获取最大有效列数" class="headerlink" title="获取最大有效列数"></a>获取最大有效列数</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> GetLastCol(theSheet <span class="keyword">As</span> Worksheet, <span class="keyword">ByVal</span> row <span class="keyword">As</span> <span class="built_in">Integer</span>) <span class="keyword">As</span> <span class="built_in">Integer</span></div><div class="line">  </div><div class="line">   <span class="keyword">Dim</span> findreg <span class="keyword">As</span> Range, ret <span class="keyword">As</span> Range </div><div class="line">   <span class="keyword">Set</span> findreg = theSheet.Rows(row)</div><div class="line">   <span class="keyword">Set</span> ret = findreg.Find(what:=<span class="string">"*"</span>, searchDirection:=xlPrevious)</div><div class="line">   <span class="keyword">If</span> <span class="keyword">Not</span> ret <span class="keyword">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">      GetLastCol = ret.Column</div><div class="line">   <span class="keyword">Else</span></div><div class="line">      GetLastCol = <span class="number">0</span></div><div class="line">   <span class="keyword">End</span> <span class="keyword">If</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Dim a as Variant</div><div class="line">Dim b as Variant</div><div class="line">a = Split("Red$Blue$Yellow","$")</div><div class="line">b = ubound(a)</div><div class="line">For i = 0 to b</div><div class="line">   MsgBox a(i)</div><div class="line">Next</div></pre></td></tr></table></figure>
<h3 id="写入txt"><a href="#写入txt" class="headerlink" title="写入txt"></a>写入txt</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Sub</span> test()</div><div class="line">   Open ThisWorkbook.Path &amp; <span class="string">"1.txt"</span> <span class="keyword">For</span> Output(覆盖)/Append(追加) <span class="keyword">As</span> <span class="meta">#1</span></div><div class="line">   Print <span class="meta">#1, "test2"</span></div><div class="line">   Print <span class="meta">#1, "test3"</span></div><div class="line">   Close <span class="meta">#1</span></div><div class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></div></pre></td></tr></table></figure>
<h3 id="查看下拉框所有内容"><a href="#查看下拉框所有内容" class="headerlink" title="查看下拉框所有内容"></a>查看下拉框所有内容</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Range(<span class="string">"D4"</span>).Validation.Formula1</div></pre></td></tr></table></figure>
<h3 id="下拉框进行赋值"><a href="#下拉框进行赋值" class="headerlink" title="下拉框进行赋值"></a>下拉框进行赋值</h3><ol>
<li><p>第一种方法</p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ComboBox1.List = Split(<span class="string">"张三,李四"</span>,<span class="string">","</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方法</p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">With</span> ComboBox1</div><div class="line">   .AddItem(<span class="string">"str1"</span>)</div><div class="line"><span class="keyword">End</span> <span class="keyword">With</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="获取选定单元格所在的行和列"><a href="#获取选定单元格所在的行和列" class="headerlink" title="获取选定单元格所在的行和列"></a>获取选定单元格所在的行和列</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ActiveCell.Row</div><div class="line">ActiveCell.Column</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VBA是一门比较早的语言了，用于处理 Office 办公软件的数据，不过最近听说以后会被 Python 代替（笑脸），现在总结一些使用 VBA 的过程遇到的一些问题以及解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式知识积累</title>
    <link href="http://xiaohao890809.github.io/2018/02/27/The-study-of-reg-expression/"/>
    <id>http://xiaohao890809.github.io/2018/02/27/The-study-of-reg-expression/</id>
    <published>2018-02-27T15:07:23.000Z</published>
    <updated>2018-04-04T11:28:54.887Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，正则表达式是非常重要的一个模块，在爬虫中用的好的话可以事半功倍，从复杂文本中根据规则去筛选数据等，掌握常用的一些正则通配符，从此刻开始。<br><a id="more"></a> </p>
<h2 id="正则表达式概念"><a href="#正则表达式概念" class="headerlink" title="正则表达式概念"></a>正则表达式概念</h2><ol>
<li>使用单个字符串来描述匹配一系列符合某个句法规则的字符串</li>
<li>是对字符串操作的一种逻辑公式</li>
<li>应用场景：处理文本和数据</li>
</ol>
<h2 id="举例分析"><a href="#举例分析" class="headerlink" title="举例分析"></a>举例分析</h2><h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><p>匹配中括号中有任何一个字符，匹配里面的或者情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'\[[\w]\]'</span>,<span class="string">'[a]'</span>)</div><div class="line">ret = re.findall(<span class="string">r'[abc]f'</span>,<span class="string">'afufobfidlfodcfr'</span>)</div><div class="line"><span class="comment"># ['af', 'bf', 'cf']</span></div></pre></td></tr></table></figure>
<h3 id="含有换行"><a href="#含有换行" class="headerlink" title="含有换行"></a>含有换行</h3><p>正则修饰符re.S可以匹配包括换行在内的所有字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">content = <span class="string">'''Hello 1234567Word-This</span></div><div class="line">    is a Regex Demo'''</div><div class="line"><span class="comment"># 非贪婪匹配</span></div><div class="line">result = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, content, re.S)</div><div class="line">print(result.group(<span class="number">1</span>)) <span class="comment"># 1234567</span></div></pre></td></tr></table></figure></p>
<h3 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="comment"># 贪婪模式，最大范围的匹配标准</span></div><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(.*)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/div&gt;&lt;div&gt;hello&lt;/div&gt;'</span>)</div><div class="line">print(ret) <span class="comment"># ['hello&lt;/div&gt;&lt;div&gt;hello']</span></div><div class="line"><span class="comment"># 非贪婪模式</span></div><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(.*?)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/div&gt;&lt;div&gt;hello&lt;/div&gt;'</span>)</div><div class="line">print(ret) <span class="comment"># ['hello', 'hello']</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'[0-9][a-z]*'</span>,<span class="string">'1bc'</span>) <span class="comment">#全部匹配</span></div><div class="line">print(ma.group()) <span class="comment">#1bc</span></div><div class="line">ma = re.match(<span class="string">r'[0-9][a-z]*?'</span>,<span class="string">'1bc'</span>) <span class="comment">#最小匹配，0个</span></div><div class="line">print(ma.group()) <span class="comment">#1</span></div><div class="line">ma = re.match(<span class="string">r'[0-9][a-z]+?'</span>,<span class="string">'1bc'</span>) <span class="comment">#最小匹配，一个</span></div><div class="line">print(ma.group()) <span class="comment">#1b</span></div></pre></td></tr></table></figure>
<h3 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(hello)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/DIV&gt;'</span>)</div><div class="line">print(ret) <span class="comment"># []</span></div><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(hello)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/DIV&gt;'</span>,re.I)</div><div class="line">print(ret) <span class="comment"># ['hello']</span></div></pre></td></tr></table></figure>
<h3 id="匹配邮箱"><a href="#匹配邮箱" class="headerlink" title="匹配邮箱"></a>匹配邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mail = re.finall(<span class="string">r'\w+@\w+\.com|\w+@\w+\.cn|\w+@\w+\.net'</span>,<span class="string">'...'</span>)</div></pre></td></tr></table></figure>
<h3 id="匹配多个"><a href="#匹配多个" class="headerlink" title="匹配多个"></a>匹配多个</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'[a-zA-Z0-9]&#123;6&#125;'</span>,<span class="string">'abc123'</span>)</div><div class="line">print(ma.group()) <span class="comment">#abc123</span></div><div class="line"><span class="comment"># 匹配6-10个字符</span></div><div class="line">ma = re.match(<span class="string">r'[a-zA-Z0-9]&#123;6,10&#125;'</span>,<span class="string">'abc123456'</span>)</div><div class="line">print(ma.group()) <span class="comment">#abc123456</span></div></pre></td></tr></table></figure>
<h3 id="的用法"><a href="#的用法" class="headerlink" title="| 的用法"></a>| 的用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'[\w]&#123;4,6&#125;@(126|163).com'</span>,<span class="string">'immoc@126.com'</span>)</div><div class="line">print(ma.group()) <span class="comment">#immoc@126.com</span></div></pre></td></tr></table></figure>
<h2 id="findall的用法"><a href="#findall的用法" class="headerlink" title="findall的用法"></a>findall的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">str2 = <span class="string">'c++=100, java=90, python=80'</span></div><div class="line">info = re.findall(<span class="string">r'\d+'</span>,str2)</div><div class="line">print(info) <span class="comment">#['100', '90', '80']</span></div><div class="line">print(sum([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> info])) <span class="comment">#270</span></div></pre></td></tr></table></figure>
<h2 id="sub的用法"><a href="#sub的用法" class="headerlink" title="sub的用法"></a>sub的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(match)</span>:</span></div><div class="line">    val = match.group()</div><div class="line">    num = int(val) + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> str(num)</div><div class="line"></div><div class="line">str1 = <span class="string">'immodc vedio = 1001'</span></div><div class="line"><span class="comment"># 将数字整体加1</span></div><div class="line">ret = re.sub(<span class="string">r'\d+'</span>,add1,str1)</div><div class="line">print(ret) <span class="comment">#immodc vedio = 1002</span></div></pre></td></tr></table></figure>
<h2 id="split的用法"><a href="#split的用法" class="headerlink" title="split的用法"></a>split的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str1 = <span class="string">'immoc:C C++ Java Python,C#'</span></div><div class="line">list1 = re.split(<span class="string">r':| |,'</span>, str1)</div><div class="line">print(list1) <span class="comment">#['immoc', 'C', 'C++', 'Java', 'Python', 'C#']</span></div></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.imooc.com/learn/550" target="_blank" rel="external">python正则表达式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，正则表达式是非常重要的一个模块，在爬虫中用的好的话可以事半功倍，从复杂文本中根据规则去筛选数据等，掌握常用的一些正则通配符，从此刻开始。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="正则" scheme="http://xiaohao890809.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Python知识总结</title>
    <link href="http://xiaohao890809.github.io/2018/01/30/The-functions-of-python/"/>
    <id>http://xiaohao890809.github.io/2018/01/30/The-functions-of-python/</id>
    <published>2018-01-30T13:42:23.000Z</published>
    <updated>2018-03-18T16:10:27.573Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些有用的函数方法，封装好以后可以直接调用。</p>
<h2 id="计算函数的执行时间"><a href="#计算函数的执行时间" class="headerlink" title="计算函数的执行时间"></a>计算函数的执行时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(fn, args)</span>:</span></div><div class="line">    start = time.clock()</div><div class="line">    <span class="keyword">return</span> fn(*args),time.clock()-start</div><div class="line"></div><div class="line">print(timer(max, range(<span class="number">1000</span>)))</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>利用装饰器计算耗时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_cost_time</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">import</span> time</div><div class="line">        begin = time.time()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            print(<span class="string">'func %s cost %s'</span> %(func.__name__,time.time()-begin))</div><div class="line">    <span class="keyword">return</span> wrapped</div><div class="line"></div><div class="line"><span class="meta">@log_cost_time</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex_func</span><span class="params">(num)</span>:</span></div><div class="line">    ret = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">        ret += i*i</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(complex_func(<span class="number">1000</span>))</div></pre></td></tr></table></figure></p>
<h2 id="数组转为csv存储"><a href="#数组转为csv存储" class="headerlink" title="数组转为csv存储"></a>数组转为csv存储</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">arr1 = np.arange(<span class="number">100</span>).reshape(<span class="number">10</span>,<span class="number">10</span>)</div><div class="line">data1 = pd.DataFrame(arr1)</div><div class="line">data1.to_csv(<span class="string">'data1.csv'</span>,index=<span class="keyword">False</span>,header=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<h2 id="给矩阵添加一行或者一列"><a href="#给矩阵添加一行或者一列" class="headerlink" title="给矩阵添加一行或者一列"></a>给矩阵添加一行或者一列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</div><div class="line">b = np.ones(<span class="number">3</span>)</div><div class="line"><span class="comment"># 使用np.c_[_,_],np.r_[_,_]分别添加列和行</span></div><div class="line">print(np.c_[a,b])</div><div class="line"></div><div class="line">[[ <span class="number">1.</span>  <span class="number">2.</span>  <span class="number">3.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">4.</span>  <span class="number">5.</span>  <span class="number">6.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">7.</span>  <span class="number">8.</span>  <span class="number">9.</span>  <span class="number">1.</span>]]</div><div class="line"></div><div class="line"><span class="comment"># 在首行插入</span></div><div class="line">print(np.insert(a,<span class="number">0</span>,values=b,axis=<span class="number">0</span>)) <span class="comment"># 0为行，1为列</span></div><div class="line"></div><div class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</div><div class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</div><div class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</div></pre></td></tr></table></figure>
<h2 id="去掉列表的括号和引号"><a href="#去掉列表的括号和引号" class="headerlink" title="去掉列表的括号和引号"></a>去掉列表的括号和引号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>&#39;,&#39;.join(list1)</code> 1,2,3</li>
<li><code>map(int,list1)</code> [1,2,3]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一些有用的函数方法，封装好以后可以直接调用。&lt;/p&gt;
&lt;h2 id=&quot;计算函数的执行时间&quot;&gt;&lt;a href=&quot;#计算函数的执行时间&quot; class=&quot;headerlink&quot; title=&quot;计算函数的执行时间&quot;&gt;&lt;/a&gt;计算函数的执行时间&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fn, args)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    start = time.clock()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fn(*args),time.clock()-start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(timer(max, range(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://xiaohao890809.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>VBA实现Excel的笛卡尔积</title>
    <link href="http://xiaohao890809.github.io/2018/01/12/The-decare-by-excel/"/>
    <id>http://xiaohao890809.github.io/2018/01/12/The-decare-by-excel/</id>
    <published>2018-01-12T15:40:23.000Z</published>
    <updated>2018-01-30T13:47:04.580Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个任务需求，就是把 Excel 里的两列元素，里面的元素有多个信息，将其分别拆分，然后取笛卡尔积，写到一个新的工作簿中。刚开始准备用 Python 实现的，后来想了下，VBA作为 Office 工具的原生态语言，何不用 VBA 实现呢，于是整理了下便写出来了，下面介绍下过程，为方便起见，弄了一些简易的数据，针对不同的数据需要做一些相应的调整。<br><a id="more"></a> </p>
<p>Excel的原始数据如下：</p>
<p><img src="http://opsnyxhx4.bkt.clouddn.com/beforeDiCar.jpeg" alt="原始数据" title="原始数据"></p>
<p>整个 <code>VBA</code> 的代码框架如下：</p>
<p><img src="http://opsnyxhx4.bkt.clouddn.com/mould.jpeg" alt="代码框架" title="代码框架"></p>
<h2 id="类模块"><a href="#类模块" class="headerlink" title="类模块"></a>类模块</h2><p>原始数据对应的首行信息，每一列对应一个元素，将其列出，作为一个新的数组。<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> a <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">Public</span> b <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">Public</span> c <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">Public</span> d <span class="keyword">As</span> <span class="built_in">String</span></div></pre></td></tr></table></figure></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Const</span> maxNum = <span class="number">100000</span></div><div class="line"><span class="keyword">Public</span> MyArr(maxNum) <span class="keyword">As</span> <span class="keyword">New</span> MyAttr</div><div class="line"><span class="keyword">Public</span> MyNum <span class="keyword">As</span> <span class="built_in">Integer</span></div></pre></td></tr></table></figure>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>思路是分别拆分每一行的那两列元素，然后将得到的元素做两个循环，遍历写入新的数组中，然后将新的数组传到工作簿中。</p>
<h3 id="获取最大行数"><a href="#获取最大行数" class="headerlink" title="获取最大行数"></a>获取最大行数</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> GetLastRow(theSheet <span class="keyword">As</span> Worksheet, <span class="keyword">ByVal</span> col <span class="keyword">As</span> <span class="built_in">Integer</span>) <span class="keyword">As</span> <span class="built_in">Integer</span></div><div class="line">  </div><div class="line">  <span class="keyword">Dim</span> findreg <span class="keyword">As</span> Range, ret <span class="keyword">As</span> Range</div><div class="line">  <span class="keyword">Set</span> findreg = theSheet.Columns(col)</div><div class="line">  <span class="keyword">Set</span> ret = findreg.Find(what:=<span class="string">"*"</span>, searchDirection:=xlPrevious)</div><div class="line">  <span class="keyword">If</span> <span class="keyword">Not</span> ret <span class="keyword">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">    GetLastRow = ret.Row</div><div class="line">  <span class="keyword">Else</span></div><div class="line">    GetLastRow = <span class="number">0</span></div><div class="line">  <span class="keyword">End</span> <span class="keyword">If</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h3 id="写入数组元素"><a href="#写入数组元素" class="headerlink" title="写入数组元素"></a>写入数组元素</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> WriteMsg(a <span class="keyword">As</span> <span class="built_in">String</span>, b <span class="keyword">As</span> <span class="built_in">String</span>, c <span class="keyword">As</span> <span class="built_in">String</span>, d <span class="keyword">As</span> <span class="built_in">String</span>)</div><div class="line"></div><div class="line">  MyArr(MyNum).a = a</div><div class="line">  MyArr(MyNum).b = b</div><div class="line">  MyArr(MyNum).c = c</div><div class="line">  MyArr(MyNum).d = d</div><div class="line">  MyNum = MyNum + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>假设新的工作簿的名字叫<code>Sheet2</code>，并且首行元素已经事先写好。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">Sub calc()</div><div class="line">    </div><div class="line">  Dim thisSheet As Worksheet</div><div class="line">  Set thisSheet = ActiveSheet</div><div class="line">  </div><div class="line">  Dim lastRow As Integer</div><div class="line">  lastRow = GetLastRow(thisSheet, 1)</div><div class="line"></div><div class="line">  MyNum = 0</div><div class="line">  </div><div class="line">  Dim a As Variant</div><div class="line">  Dim b As Variant</div><div class="line">  Dim c As Variant</div><div class="line">  Dim d As Variant</div><div class="line"></div><div class="line">  Dim tmp1 As String</div><div class="line">  Dim tmp2 As String</div><div class="line"></div><div class="line">  For i = 2 To lastRow</div><div class="line">    a = Split(Range("B" &amp; i), ";")</div><div class="line">    b = UBound(a)</div><div class="line">    c = Split(Range("C" &amp; i), ";")</div><div class="line">    d = UBound(c)</div><div class="line"></div><div class="line">    For j = 0 To b</div><div class="line">      tmp1 = a(j)</div><div class="line">      For k = 0 To d</div><div class="line">        tmp2 = c(k)</div><div class="line">        WriteMsg Range("A" &amp; i), tmp1, tmp2, Range("D" &amp; i)</div><div class="line">      Next</div><div class="line"></div><div class="line">    Next</div><div class="line"></div><div class="line">  Next</div><div class="line">  </div><div class="line">  MsgBox MyNum</div><div class="line">  </div><div class="line">  For i = 0 To MyNum - 1</div><div class="line">    Sheets("Sheet2").Range("A" &amp; i + 2) = MyArr(i).a</div><div class="line">    Sheets("Sheet2").Range("B" &amp; i + 2) = MyArr(i).b</div><div class="line">    Sheets("Sheet2").Range("C" &amp; i + 2) = MyArr(i).c</div><div class="line">    Sheets("Sheet2").Range("D" &amp; i + 2) = MyArr(i).d</div><div class="line">  Next</div><div class="line"></div><div class="line">End Sub</div></pre></td></tr></table></figure></p>
<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="http://opsnyxhx4.bkt.clouddn.com/afterDiCar.jpeg" alt="效果预览" title="效果预览"></p>
<h2 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h2><p><a href="http://opsnyxhx4.bkt.clouddn.com/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF.xlsm" target="_blank" rel="external">笛卡尔积.xlsm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有一个任务需求，就是把 Excel 里的两列元素，里面的元素有多个信息，将其分别拆分，然后取笛卡尔积，写到一个新的工作簿中。刚开始准备用 Python 实现的，后来想了下，VBA作为 Office 工具的原生态语言，何不用 VBA 实现呢，于是整理了下便写出来了，下面介绍下过程，为方便起见，弄了一些简易的数据，针对不同的数据需要做一些相应的调整。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>经典排序法之Python版</title>
    <link href="http://xiaohao890809.github.io/2018/01/11/The-classic-sorts/"/>
    <id>http://xiaohao890809.github.io/2018/01/11/The-classic-sorts/</id>
    <published>2018-01-11T15:11:23.000Z</published>
    <updated>2019-02-27T03:09:07.064Z</updated>
    
    <content type="html"><![CDATA[<p>大学的时候学习的经典算法忘记差不多了，现在赶紧拾起来，基本算法往往是复杂算法的基础，牢记掌握才是王道。<br><a id="more"></a> </p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="/images/冒泡排序.gif" alt="冒泡排序"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">BubbleSorted</span><span class="params">(nums)</span>:</span></div><div class="line">    length = len(nums)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length-i<span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> nums[j]&gt;nums[j+<span class="number">1</span>]:</div><div class="line">                nums[j],nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>],nums[j]</div><div class="line">    <span class="keyword">return</span> nums</div></pre></td></tr></table></figure>
<p><strong>思考：</strong>如果原来的列表是有序列表呢，能否优化一下呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(input_list)</span>:</span></div><div class="line">    <span class="string">"""冒泡排序"""</span></div><div class="line">    length = len(input_list)</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(length - <span class="number">1</span>):</div><div class="line">        <span class="comment"># 当列表已经是有序列表的，节省空间</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length - j - <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> input_list[i] &gt; input_list[i+<span class="number">1</span>]:</div><div class="line">                input_list[i], input_list[i+<span class="number">1</span>] = input_list[i+<span class="number">1</span>], input_list[i]</div><div class="line">                count += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> count == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div></pre></td></tr></table></figure>
<blockquote>
<p>属性：</p>
</blockquote>
<ul>
<li>最有时间复杂度：$O(n)$ (表示遍历一次没有发现任何可以交换的元素，排序结束)</li>
<li>最坏时间复杂度：$O(n^2)$</li>
<li>稳定性：稳定</li>
</ul>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="/images/插入排序.gif" alt="插入排序"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSorted</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="comment"># 从第二元素开始直到最后一个元素</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</div><div class="line">        tmp = nums[i]</div><div class="line">        print(nums)</div><div class="line">        j = i<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> nums[j]&gt;tmp:</div><div class="line">            nums[j+<span class="number">1</span>] = nums[j]</div><div class="line">            j = j - <span class="number">1</span></div><div class="line">        nums[j+<span class="number">1</span>] = tmp</div><div class="line">    <span class="keyword">return</span> nums</div></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="/images/选择排序.gif" alt="选择排序"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SelectSorted</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</div><div class="line">        minIndex = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(nums)):</div><div class="line">            <span class="keyword">if</span> nums[j] &lt; nums[minIndex]:</div><div class="line">                minIndex = j</div><div class="line">        nums[i],nums[minIndex] = nums[minIndex],nums[i]</div><div class="line">    <span class="keyword">return</span> nums</div></pre></td></tr></table></figure>
<p><strong>图片来源：</strong><a href="http://www.cnblogs.com/ytb-wpq/p/6479240.html" target="_blank" rel="external">常用算法js版</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学的时候学习的经典算法忘记差不多了，现在赶紧拾起来，基本算法往往是复杂算法的基础，牢记掌握才是王道。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://xiaohao890809.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>近代诗歌节选</title>
    <link href="http://xiaohao890809.github.io/2018/01/07/The-poetry-of-nowdays/"/>
    <id>http://xiaohao890809.github.io/2018/01/07/The-poetry-of-nowdays/</id>
    <published>2018-01-07T13:04:23.000Z</published>
    <updated>2018-01-07T13:08:19.790Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己喜欢的一些诗人的诗句，主要是近代诗歌。喜欢那些简短而富有哲理的诗句，字里行间透出了很多人生道理和韵味。</p>
<h2 id="顾城"><a href="#顾城" class="headerlink" title="顾城"></a>顾城</h2><h3 id="避免"><a href="#避免" class="headerlink" title="避免"></a>避免</h3><blockquote class="blockquote-center"><p>你不愿意种花<br>你说：<br>“我不愿看见它<br>一点点凋落”<br>是的<br>为了避免结束<br>您避免了一切开始</p>
</blockquote>
<a id="more"></a> 
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录自己喜欢的一些诗人的诗句，主要是近代诗歌。喜欢那些简短而富有哲理的诗句，字里行间透出了很多人生道理和韵味。&lt;/p&gt;
&lt;h2 id=&quot;顾城&quot;&gt;&lt;a href=&quot;#顾城&quot; class=&quot;headerlink&quot; title=&quot;顾城&quot;&gt;&lt;/a&gt;顾城&lt;/h2&gt;&lt;h3 id=&quot;避免&quot;&gt;&lt;a href=&quot;#避免&quot; class=&quot;headerlink&quot; title=&quot;避免&quot;&gt;&lt;/a&gt;避免&lt;/h3&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;你不愿意种花&lt;br&gt;你说：&lt;br&gt;“我不愿看见它&lt;br&gt;一点点凋落”&lt;br&gt;是的&lt;br&gt;为了避免结束&lt;br&gt;您避免了一切开始&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://xiaohao890809.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode题解Python版本</title>
    <link href="http://xiaohao890809.github.io/2017/12/31/The-leetcode-of-python/"/>
    <id>http://xiaohao890809.github.io/2017/12/31/The-leetcode-of-python/</id>
    <published>2017-12-31T03:26:23.000Z</published>
    <updated>2019-01-02T12:51:45.803Z</updated>
    
    <content type="html"><![CDATA[<p>记录 LeetCode 的算法习题，用 Python3 语言进行实现，Python还是很强大的，有些 built-in 函数很简洁，一行代码解决问题。<br><a id="more"></a> </p>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="3的幂"><a href="#3的幂" class="headerlink" title="3的幂"></a>3的幂<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/power-of-three/description/" target="_blank" rel="external">326. 3的幂</a><br>给定一个整数，写一个函数来判断它是否是 3 的幂次方。<br><strong>进阶:</strong><br>你能不使用循环或者递归来完成本题吗？?</p>
<p><strong>题解：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfThree</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> n&gt;<span class="number">0</span> <span class="keyword">and</span> <span class="number">1162261467</span>%n == <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>最大正整数：$2^{31}-1$，寻找 3 的最大次幂数</li>
<li>此题疑似作弊</li>
</ol>
<h3 id="自除数"><a href="#自除数" class="headerlink" title="自除数"></a>自除数<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/self-dividing-numbers/description/" target="_blank" rel="external">728. 自除数</a><br><em>自除数</em> 是指可以被它包含的每一位数除尽的数。<br>例如，128 是一个自除数，因为 <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>。<br>还有，自除数不允许包含 0 。<br>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入： 上边界left = 1, 下边界right = 22</div><div class="line">输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong><br>每个输入参数的边界满足 <code>1 &lt;= left &lt;= right &lt;= 10000</code>.</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selfDividingNumbers</span><span class="params">(left, right)</span>:</span></div><div class="line">    selfDivde = <span class="keyword">lambda</span> num: <span class="string">'0'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(num) <span class="keyword">and</span> all(num % int(item) == <span class="number">0</span> <span class="keyword">for</span> item <span class="keyword">in</span> str(num))</div><div class="line">    <span class="keyword">return</span> list(filter(selfDivde,range(left, right+<span class="number">1</span>)))</div><div class="line">    <span class="comment"># return filter(selfDivde,range(left, right+1)) Python2的写法</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：all([num % int(item) == 0 for item in str(num)])中的括号去掉了，这样子节省了一部分时间复杂度。</p>
</blockquote>
<p><strong>学习要点：</strong></p>
<ol>
<li>lamba表达式</li>
<li>过滤器 filter 的用法</li>
<li>all函数的用法</li>
</ol>
<h3 id="计数质数"><a href="#计数质数" class="headerlink" title="计数质数"></a>计数质数<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/count-primes/description/" target="_blank" rel="external">204. 计数质数</a><br>统计所有小于非负整数 n 的质数的数量。</p>
<p><strong>示例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 10</div><div class="line">输出: 4</div><div class="line">解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    res = [<span class="keyword">True</span>] * n</div><div class="line">    res[<span class="number">0</span>] = res[<span class="number">1</span>] = <span class="keyword">False</span></div><div class="line">    tmpDict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</div><div class="line">        <span class="keyword">if</span> res[i]:</div><div class="line">            <span class="comment"># 查看是否有因子，如果有因子的话，肯定不是质数</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, (n<span class="number">-1</span>)//i+<span class="number">1</span>):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> i*j <span class="keyword">in</span> tmpDict:</div><div class="line">                    <span class="comment"># 是否出现重复的情况呢</span></div><div class="line">                    tmpDict[i*j] = <span class="string">'Yes'</span></div><div class="line">                    print(<span class="string">'i*j:'</span>, i * j)</div><div class="line">                    res[i*j] = <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> sum(res)</div></pre></td></tr></table></figure></p>
<h3 id="旋转函数"><a href="#旋转函数" class="headerlink" title="旋转函数"></a>旋转函数<i class="fa fa-star-half-o"></i></h3><p><a href="https://leetcode.com/problems/rotate-function/description/" target="_blank" rel="external">396. 旋转函数</a><br>给定一个长度为 n 的整数数组 <code>A</code>。<br>假设 $B_{k}$ 是数组 <code>A</code> 顺时针旋转 k 个位置后的数组，我们定义 <code>A</code> 的“旋转函数” <code>F</code> 为:<br>$F(k) = 0 \cdot B_k[0] + 1 \cdot B_k[1] + \dots + (n-1) \cdot B_k[n-1]$.<br>计算 <code>F(0), F(1), ..., F(n-1)</code> 中的最大值。</p>
<p><strong>注意:</strong><br>可以认为 n 的值小于 $10^5$。</p>
<p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">A = [4, 3, 2, 6]</div><div class="line">F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25</div><div class="line">F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16</div><div class="line">F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23</div><div class="line">F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26</div><div class="line">所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26.</div></pre></td></tr></table></figure></p>
<p><strong>题解：</strong><br><del>之前的思路是这样子的(不可取)</del>，一次旋转列表，得到新的列表，然后用各自的元素乘以索引得到结果，后来发现这样子会列表溢出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxRotateFunction</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type A: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    ret = sum(i * num <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(A))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(A)):</div><div class="line">        B = A[i:] + A[:i] <span class="comment"># 或者下面两行代替，by 刘亮钧</span></div><div class="line">        <span class="comment"># num = A.pop()</span></div><div class="line">        <span class="comment"># A.insert(0,num) # 下面的B改为A</span></div><div class="line">        cal = sum(i * num <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(B))</div><div class="line">        <span class="keyword">if</span> cal &gt; ret:</div><div class="line">            ret = cal</div><div class="line">    <span class="keyword">return</span> ret</div></pre></td></tr></table></figure></p>
<p>后来参考了答案，不拼接列表，采取巧妙的方法计算出结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxRotateFunction</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type A: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    lMax = sum(i * num <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(A))</div><div class="line">    totalSum = sum(A)</div><div class="line">    rMax = lMax</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</div><div class="line">        lMax += (totalSum - A[i]*len(A))</div><div class="line">        rMax = max(lMax, rMax)</div><div class="line">    <span class="keyword">return</span> rMax</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>考虑操作列表会溢出的情形</li>
<li>enumerate的用法，返回两个值，一个是索引，一个是元素的值</li>
</ol>
<h3 id="最大交换"><a href="#最大交换" class="headerlink" title="最大交换"></a>最大交换<i class="fa fa-star-half-o"></i></h3><p><a href="https://leetcode.com/problems/maximum-swap/description/" target="_blank" rel="external">670. 最大交换</a><br>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 2736</div><div class="line">输出: 7236</div><div class="line">解释: 交换数字2和数字7。</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 9973</div><div class="line">输出: 9973</div><div class="line">解释: 不需要交换。</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong><br>给定数字的范围是 $[0,10^8]$ </p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximumSwap</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type num: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    numList = list(str(num))</div><div class="line">    newList = sorted(str(num), reverse=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numList)):</div><div class="line">        <span class="keyword">if</span> numList[i] != newList[i]:</div><div class="line">            numList[len(numList) - <span class="number">1</span> - numList[::<span class="number">-1</span>].index(newList[i])], numList[i] = \</div><div class="line">            numList[i], numList[len(numList) - <span class="number">1</span> - numList[::<span class="number">-1</span>].index(newList[i])]</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(<span class="string">''</span>.join(numList))</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>[1,2,6,6]中取最后一个 6 的索引的方法</li>
<li>交换顺序 a,b = b,a 的时候注意 index 的那个调换的数字必须放在前面的位置</li>
</ol>
<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><h3 id="两整数之和"><a href="#两整数之和" class="headerlink" title="两整数之和"></a>两整数之和<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/sum-of-two-integers/description/" target="_blank" rel="external">371. 两整数之和</a><br><strong>不使用</strong>运算符 + 和-，计算两整数a 、b之和。</p>
<p><strong>示例:</strong><br>若 a = 1 ，b = 2，返回 3。</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSum</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type a: int</div><div class="line">    :type b: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 32 bits integer max</span></div><div class="line">    MAX = <span class="number">0x7FFFFFFF</span></div><div class="line">    <span class="comment"># 32 bits interger min</span></div><div class="line">    MIN = <span class="number">0x80000000</span></div><div class="line">    <span class="comment"># mask to get last 32 bits</span></div><div class="line">    mask = <span class="number">0xFFFFFFFF</span></div><div class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</div><div class="line">        <span class="comment"># ^ get different bits and &amp; gets double 1s, &lt;&lt; moves carry</span></div><div class="line">        a, b = (a ^ b) &amp; mask, ((a &amp; b) &lt;&lt; <span class="number">1</span>) &amp; mask</div><div class="line">    <span class="comment"># if a is negative, get a's 32 bits complement positive first</span></div><div class="line">    <span class="comment"># then get 32-bit positive's Python complement negative</span></div><div class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> a &lt;= MAX <span class="keyword">else</span> ~(a ^ mask)</div></pre></td></tr></table></figure></p>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和<i class="fa fa-star-half-o"></i></h3><p><a href="https://leetcode.com/problems/minimum-path-sum/description/" target="_blank" rel="external">64. 最小路径和</a><br>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<br><strong>说明：</strong>每次只能向下或者向右移动一步。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[</div><div class="line">  [1,3,1],</div><div class="line">  [1,5,1],</div><div class="line">  [4,2,1]</div><div class="line">]</div><div class="line">输出: 7</div><div class="line">解释: 因为路径 1→3→1→1→1 的总和最小。</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(grid)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type grid: List[List[int]]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    m = len(grid) <span class="comment"># 宽度</span></div><div class="line">    n = len(grid[<span class="number">0</span>]) <span class="comment"># 长度</span></div><div class="line">    <span class="comment"># 第一列累加求和</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</div><div class="line">        grid[i][<span class="number">0</span>] += grid[i<span class="number">-1</span>][<span class="number">0</span>]</div><div class="line">    <span class="comment"># 第一行累加求和</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</div><div class="line">        grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i<span class="number">-1</span>]</div><div class="line">    <span class="comment"># 依次往下往右取上面和左边的最小值进行累加求和</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</div><div class="line">            grid[i][j] += min(grid[i][j<span class="number">-1</span>],grid[i<span class="number">-1</span>][j])</div><div class="line">    <span class="keyword">return</span> grid[<span class="number">-1</span>][<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 类似百度地图的求最短路径</span></div></pre></td></tr></table></figure></p>
<h2 id="腾讯2018秋招精选"><a href="#腾讯2018秋招精选" class="headerlink" title="腾讯2018秋招精选"></a>腾讯2018秋招精选</h2><h3 id="数学与数字"><a href="#数学与数字" class="headerlink" title="数学与数字"></a>数学与数字</h3><h4 id="求众数"><a href="#求众数" class="headerlink" title="求众数"></a>求众数<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/majority-element/description/" target="_blank" rel="external">169. 求众数</a><br>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,3]</div><div class="line">输出: 3</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [2,2,1,1,1,2,2]</div><div class="line">输出: 2</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 思路1：用字典进行存储</span></div><div class="line">    <span class="comment"># dic = &#123;&#125;</span></div><div class="line">    <span class="comment"># for item in nums:</span></div><div class="line">    <span class="comment">#     if item not in dic:</span></div><div class="line">    <span class="comment">#         dic[item] = 1</span></div><div class="line">    <span class="comment">#     if dic[item] &gt; len(nums)//2:</span></div><div class="line">    <span class="comment">#         return item</span></div><div class="line">    <span class="comment">#     else:</span></div><div class="line">    <span class="comment">#         dic[item] += 1</span></div><div class="line"></div><div class="line">    <span class="comment"># 思路2：简介的思路，因为传入的众数总是存在</span></div><div class="line">    <span class="keyword">return</span> sorted(nums)[len(nums)//<span class="number">2</span>]</div></pre></td></tr></table></figure></p>
<h4 id="2的幂"><a href="#2的幂" class="headerlink" title="2的幂"></a>2的幂<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/power-of-two/description/" target="_blank" rel="external">231. 2的幂</a><br>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p>
<p><strong>题解：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> (n &amp; n<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>n &amp; n - 1 removes the left most bit of n. If an integer is power of 2, there is a single bit in the binary representation of n. e.g. 16 = b10000, 16 - 1 = b01111, and 16 &amp; 16 - 1 = b10000 &amp; b01111 = 0, also 16 != 0, based on these facts there is only one bit in b10000, so 16 is power of 2.</p>
</blockquote>
<h4 id="反转整数"><a href="#反转整数" class="headerlink" title=" 反转整数 "></a><font color="#f47920"> 反转整数<i class="fa fa-star-o"></i> </font></h4><p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="external">7. 反转整数</a><br>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 123</div><div class="line">输出: 321</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: -123</div><div class="line">输出: -321</div></pre></td></tr></table></figure></p>
<p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 120</div><div class="line">输出: 21</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong><br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 $[−2^{31},  2^{31} − 1]$。根据这个假设，如果反转后的整数溢出，则返回 0。</p>
<p><strong>解题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    result = <span class="number">0</span></div><div class="line">    pos_x = abs(x)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> pos_x:</div><div class="line">        result = result * <span class="number">10</span> + pos_x % <span class="number">10</span></div><div class="line">        <span class="comment"># python3和python2的不同之处，这里求余数是小数，要转换成整数</span></div><div class="line">        pos_x = pos_x // <span class="number">10</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> result &gt;= <span class="number">2147483647</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> result <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> result * (<span class="number">-1</span>)</div></pre></td></tr></table></figure></p>
<h4 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="external">136. 只出现一次的数字</a><br>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br><strong>说明：</strong><br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [2,2,1]</div><div class="line">输出: 1</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [4,1,2,1,2]</div><div class="line">输出: 4</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span> * sum(set(nums)) - sum(nums)</div></pre></td></tr></table></figure></p>
<h4 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">9. 回文数</a><br>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 121</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: -121</div><div class="line">输出: false</div><div class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</div></pre></td></tr></table></figure></p>
<p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 10</div><div class="line">输出: false</div><div class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</div></pre></td></tr></table></figure></p>
<p><strong>进阶:</strong><br>你能不将整数转为字符串来解决这个问题吗？</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    x = str(x)</div><div class="line">    length = len(x)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length//<span class="number">2</span>):</div><div class="line">        <span class="keyword">if</span> x[i] != x[length - i - <span class="number">1</span>]:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 另外一种思路，将数字倒序，然后进行比较</span></div><div class="line"><span class="string">'''</span></div><div class="line">x = str(x)</div><div class="line">return True if x==x[::-1] else False</div><div class="line">'''</div></pre></td></tr></table></figure></p>
<p><em>不转换成字符串</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome2</span><span class="params">(x)</span>:</span></div><div class="line"></div><div class="line">    num = x</div><div class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    res = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>):</div><div class="line">        <span class="comment"># 从各位到高位依次取出</span></div><div class="line">        res = res * <span class="number">10</span></div><div class="line">        res = res + x % <span class="number">10</span></div><div class="line">        x = x // <span class="number">10</span></div><div class="line">    <span class="keyword">return</span> (num == res)</div></pre></td></tr></table></figure>
<p><strong>学习要点：</strong></p>
<ol>
<li>逆向字符串的表示方法</li>
<li>不使用字符串的转换方式要熟练</li>
</ol>
<h3 id="数组与字符串"><a href="#数组与字符串" class="headerlink" title="数组与字符串"></a>数组与字符串</h3><h4 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/reverse-string/description/" target="_blank" rel="external">344. 反转字符串</a><br>编写一个函数，其作用是将输入的字符串反转过来。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;hello&quot;</div><div class="line">输出: &quot;olleh&quot;</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</div><div class="line">输出: &quot;amanaP :lanac a ,nalp a ,nam A&quot;</div></pre></td></tr></table></figure></p>
<p><strong>解题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">def reverseString(s):</div><div class="line">    """</div><div class="line">    :type s: str</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    return s[::-1]</div><div class="line"></div><div class="line"># 另一种方法，夹逼法则</div><div class="line">def reverseString(s):</div><div class="line">    s_list = list(s)</div><div class="line">    i,j = 0, len(s_list)-1</div><div class="line">    while i&lt;j:</div><div class="line">        s_list[i],s_list[j] = s_list[j],s_list[i]</div><div class="line">        i += 1</div><div class="line">        j -= 1</div><div class="line">    return ''.join(s_list)</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># 递归的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(s)</span>:</span></div><div class="line">    l = len(s)</div><div class="line">    <span class="keyword">if</span> l &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> s</div><div class="line">    <span class="keyword">return</span> reverseString(s[l//<span class="number">2</span>:]) + reverseString(s[:l//<span class="number">2</span>])</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>多种角度，多种思路。</li>
</ol>
<h4 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/contains-duplicate/description/" target="_blank" rel="external">217. 存在重复元素</a><br>给定一个整数数组，判断是否存在重复元素。<br>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3,1]</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3,4]</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>示例3</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [1,1,1,3,3,4,3,2,4,2]</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="comment"># 去重前和去重后比较列表长度</span></div><div class="line">    <span class="keyword">return</span> len(set(nums)) != len(nums)</div><div class="line">    <span class="comment"># 另外一种解法</span></div><div class="line">    <span class="comment"># return True if len(set(nums)) &lt; len(nums) else False</span></div></pre></td></tr></table></figure></p>
<h4 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="external">20. 有效的括号</a><br>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;()&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;()[]&#123;&#125;&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;(]&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>示例 4:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;([)]&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>示例 5:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;&#123;[]&#125;&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    my_dict = &#123;<span class="string">']'</span>:<span class="string">'['</span>, <span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>,<span class="string">')'</span>:<span class="string">'('</span>&#125;</div><div class="line">    stack = []</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> my_dict.values():</div><div class="line">            stack.append(char)</div><div class="line">        <span class="keyword">elif</span> char <span class="keyword">in</span> my_dict.keys():</div><div class="line">            <span class="keyword">if</span> stack == [] <span class="keyword">or</span> my_dict[char] != stack.pop():</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> stack == []</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid2</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    n = len(s)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> n %<span class="number">2</span> != <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'()'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'[]'</span> <span class="keyword">in</span> s:</div><div class="line">        s.replace(<span class="string">'()'</span>,<span class="string">''</span>).replace(<span class="string">'[]'</span>,<span class="string">''</span>).replace(<span class="string">'&#123;&#125;'</span>,<span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> s == <span class="string">''</span></div></pre></td></tr></table></figure></p>
<h4 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/" target="_blank" rel="external">26. 删除排序数组中的重复项</a><br>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定数组 nums = [1,1,2], </div><div class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</div><div class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<p><strong>说明:</strong><br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:<br>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p>
<p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    dulNum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</div><div class="line">        <span class="keyword">if</span> nums[i] != nums[dulNum]:</div><div class="line">            dulNum += <span class="number">1</span></div><div class="line">            nums[dulNum] = nums[i]</div><div class="line">            </div><div class="line">    <span class="comment"># 返回处理后数组的长度，前几位就是想要的结果</span></div><div class="line">    <span class="comment"># print(nums)</span></div><div class="line">    <span class="comment"># print(dulNum+1)</span></div><div class="line">    <span class="keyword">return</span> dulNum+<span class="number">1</span></div></pre></td></tr></table></figure></p>
<h4 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title=" 最长回文子串 "></a><font color="#f47920"> 最长回文子串<i class="fa fa-star-half-o"></i> </font></h4><p><a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="external">5. 最长回文子串</a><br>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: &quot;babad&quot;</div><div class="line">输出: &quot;bab&quot;</div><div class="line">注意: &quot;aba&quot;也是一个有效答案。</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;cbbd&quot;</div><div class="line">输出: &quot;bb&quot;</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(s, l, r)</span>:</span></div><div class="line">    <span class="keyword">while</span> l &gt;= <span class="number">0</span> <span class="keyword">and</span> r &lt; len(s) <span class="keyword">and</span> s[l] == s[r]:</div><div class="line">        l -= <span class="number">1</span>; r += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> s[l+<span class="number">1</span>:r]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    res = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">        <span class="comment"># odd case, like "aba"</span></div><div class="line">        tmp = helper(s, i, i)</div><div class="line">        print(<span class="string">'tmp1:'</span>,tmp)</div><div class="line">        <span class="keyword">if</span> len(tmp) &gt; len(res):</div><div class="line">            res = tmp</div><div class="line">        <span class="comment"># even case, like "abba"</span></div><div class="line">        tmp = helper(s, i, i + <span class="number">1</span>)</div><div class="line">        <span class="comment"># print('tmp2:',tmp)</span></div><div class="line">        <span class="keyword">if</span> len(tmp) &gt; len(res):</div><div class="line">            res = tmp</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure></p>
<h4 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和<i class="fa fa-star-half-o"></i></h4><p><a href="https://leetcode.com/problems/3sum/description/" target="_blank" rel="external">15. 三数之和</a><br>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 $a，b，c$ ，使得 $a + b + c = 0 ？$ 找出所有满足条件且不重复的三元组。<br><strong>注意：</strong>答案中不可以包含重复的三元组。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</div><div class="line">满足要求的三元组集合为：</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    <span class="comment"># 当长度小于3时，直接返回空列表</span></div><div class="line">    <span class="keyword">if</span> len(nums) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="comment"># 进行排序处理</span></div><div class="line">    nums.sort()</div><div class="line">    ret = set()</div><div class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(nums[:len(nums)<span class="number">-2</span>]):</div><div class="line">        <span class="comment"># 防止出现重复的情况</span></div><div class="line">        <span class="keyword">if</span> i &gt; <span class="number">1</span> <span class="keyword">and</span> j == nums[i<span class="number">-1</span>]:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        d = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nums[i+<span class="number">1</span>:]:</div><div class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> d:</div><div class="line">                d[-j-v] = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                ret.add((j,-v-j,v))</div><div class="line"></div><div class="line">    <span class="comment"># 对于Python2而言，map(list,ret)即可</span></div><div class="line">    <span class="keyword">return</span> [*map(list,ret)]</div></pre></td></tr></table></figure></p>
<h4 id="字符串相乘"><a href="#字符串相乘" class="headerlink" title="字符串相乘"></a>字符串相乘<i class="fa fa-star-half-o"></i></h4><p><a href="https://leetcode.com/problems/multiply-strings/" target="_blank" rel="external">43. 字符串相乘</a><br>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;</div><div class="line">输出: &quot;6&quot;</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: num1 = &quot;123&quot;, num2 = &quot;456&quot;</div><div class="line">输出: &quot;56088&quot;</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ol>
<li>num1 和 num2 的长度小于110。</li>
<li>num1 和 num2 只包含数字 0-9。</li>
<li>num1 和 num2 均不以零开头，除非是数字 0 本身。</li>
<li><strong>不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。</strong></li>
</ol>
<p><strong>题解</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(num1, num2)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type num1: str</div><div class="line">    :type num2: str</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    res = [<span class="number">0</span>]*(len(num1) + len(num2))</div><div class="line">    <span class="keyword">for</span> i,e1 <span class="keyword">in</span> enumerate(reversed(num1)):</div><div class="line">        <span class="keyword">for</span> j,e2 <span class="keyword">in</span> enumerate(reversed(num2)):</div><div class="line">            <span class="comment"># res[i+j] += int(e1) * int(e2)</span></div><div class="line">            res[i + j] += (ord(e1) - ord(<span class="string">'0'</span>)) * (ord(e2) - ord(<span class="string">'0'</span>))</div><div class="line">            res[i+j+<span class="number">1</span>] += res[i+j] // <span class="number">10</span></div><div class="line">            res[i+j] %= <span class="number">10</span></div><div class="line">    print(res)</div><div class="line">    <span class="keyword">while</span> len(res) &gt; <span class="number">1</span> <span class="keyword">and</span> res[<span class="number">-1</span>] == <span class="number">0</span> : res.pop()</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(map(str,res[::<span class="number">-1</span>]))</div></pre></td></tr></table></figure></p>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="external">121. 买卖股票的最佳时机</a><br>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。<br>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 5</div><div class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5。</div><div class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div><div class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</div></pre></td></tr></table></figure></p>
<p><strong>题解</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自己的思路：从前往后遍历寻找，直到找到相差最大的数为止</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 这种算法超出时间限制了</span></div><div class="line">    <span class="keyword">if</span> len(prices) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    maxPrice = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices)<span class="number">-1</span>):</div><div class="line">        tmpPriceList = [x-prices[i] <span class="keyword">for</span> x <span class="keyword">in</span> prices[i+<span class="number">1</span>:]]</div><div class="line">        maxPrice.extend(tmpPriceList)</div><div class="line">    print(maxPrice)</div><div class="line">    <span class="comment"># 最大差值为负数的时候利润应该为0</span></div><div class="line">    <span class="keyword">return</span> max(max(maxPrice),<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 参考答案</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    maxProfit,minPrice = <span class="number">0</span>,float(<span class="string">'inf'</span>)</div><div class="line">    <span class="keyword">for</span> price <span class="keyword">in</span> prices:</div><div class="line">        minPrice = min(minPrice, price)</div><div class="line">        profit = price - minPrice</div><div class="line">        maxProfit = max(maxProfit,profit)</div><div class="line">    <span class="keyword">return</span> maxProfit</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>注意考虑时间限制</li>
<li>充分利用前后之前的数字关系</li>
</ol>
<h3 id="链表突击"><a href="#链表突击" class="headerlink" title="链表突击"></a>链表突击</h3><h4 id="两数相加"><a href="#两数相加" class="headerlink" title=" 两数相加 "></a><font color="#f47920"> 两数相加<i class="fa fa-star-half-o"></i> </font></h4><p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="external">2. 两数相加</a><br>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。<br>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line">输出：7 -&gt; 0 -&gt; 8</div><div class="line">原因：342 + 465 = 807</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># 打印链表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printListNode</span><span class="params">(l)</span>:</span></div><div class="line">    strList = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> l != <span class="keyword">None</span>:</div><div class="line">        strList = strList + str(l.val)</div><div class="line">        l = l.next</div><div class="line">    <span class="comment"># strList = strList[::-1]</span></div><div class="line">    print(strList)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(l1, l2)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type l1: ListNode</div><div class="line">    :type l2: ListNode</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    carry = <span class="number">0</span></div><div class="line">    root = n = ListNode(<span class="number">0</span>)</div><div class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</div><div class="line">        v1 = v2 = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> l1:</div><div class="line">            v1 = l1.val</div><div class="line">            l1 = l1.next</div><div class="line">        <span class="keyword">if</span> l2:</div><div class="line">            v2 = l2.val</div><div class="line">            l2 = l2.next</div><div class="line">        carry,val = divmod(v1+v2+carry,<span class="number">10</span>)</div><div class="line">        n.next = ListNode(val)</div><div class="line">        n = n.next</div><div class="line">    <span class="keyword">return</span> root.next</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 初始化第一个链表</span></div><div class="line">currNode1 = ListNode1 = ListNode(<span class="number">2</span>)</div><div class="line">currNode1.next = ListNode(<span class="number">4</span>)</div><div class="line">currNode1 = currNode1.next</div><div class="line">currNode1.next = ListNode(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 初始化第二个链表</span></div><div class="line">currNode2 = ListNode2 = ListNode(<span class="number">5</span>)</div><div class="line">currNode2.next = ListNode(<span class="number">6</span>)</div><div class="line">currNode2 = currNode2.next</div><div class="line">currNode2.next = ListNode(<span class="number">4</span>)</div><div class="line"></div><div class="line">printListNode(addTwoNumbers(ListNode1,ListNode2))</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>链表的初始化形式</li>
<li>求和高位进1的用法</li>
</ol>
<h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><h4 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/nim-game/description/" target="_blank" rel="external">292. Nim游戏</a><br>你和你的朋友，两个人一起玩 Nim游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。<br>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: 4</div><div class="line">输出: false </div><div class="line">解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；</div><div class="line">     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</div></pre></td></tr></table></figure></p>
<p><strong>解题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> bool(n % <span class="number">2</span>)</div><div class="line">    <span class="comment"># return bool(b &amp; 3)</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 LeetCode 的算法习题，用 Python3 语言进行实现，Python还是很强大的，有些 built-in 函数很简洁，一行代码解决问题。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://xiaohao890809.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>幽默语录</title>
    <link href="http://xiaohao890809.github.io/2017/12/31/The-humorous-words/"/>
    <id>http://xiaohao890809.github.io/2017/12/31/The-humorous-words/</id>
    <published>2017-12-31T01:56:23.000Z</published>
    <updated>2018-01-07T13:22:44.606Z</updated>
    
    <content type="html"><![CDATA[<p>幽默语录，供自己平时逗逗乐子。。。</p>
<h2 id="第一波"><a href="#第一波" class="headerlink" title="第一波"></a>第一波</h2><ol>
<li>不要和我比懒，我懒得和你比。</li>
<li>法官：你为什么要印假钞？被告无辜地说：因为我不会印真钞。<a id="more"></a> 
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;幽默语录，供自己平时逗逗乐子。。。&lt;/p&gt;
&lt;h2 id=&quot;第一波&quot;&gt;&lt;a href=&quot;#第一波&quot; class=&quot;headerlink&quot; title=&quot;第一波&quot;&gt;&lt;/a&gt;第一波&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不要和我比懒，我懒得和你比。&lt;/li&gt;
&lt;li&gt;法官：你为什么要印假钞？被告无辜地说：因为我不会印真钞。
    
    </summary>
    
    
      <category term="幽默" scheme="http://xiaohao890809.github.io/tags/%E5%B9%BD%E9%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>新概念英语第三册前30篇</title>
    <link href="http://xiaohao890809.github.io/2017/12/26/The-new-concept-english/"/>
    <id>http://xiaohao890809.github.io/2017/12/26/The-new-concept-english/</id>
    <published>2017-12-26T12:01:23.000Z</published>
    <updated>2018-09-14T02:01:37.685Z</updated>
    
    <content type="html"><![CDATA[<p>新概念英语第三册前30篇，一定要熟记于心，长语句，语法这些也是可以套用的。<br><a id="more"></a> </p>
<h2 id="A-Puma-at-large"><a href="#A-Puma-at-large" class="headerlink" title="A Puma at large"></a>A Puma at large</h2><blockquote>
<p>Pumas are large, cat-like animals which are found in America. When reports came into London Zoo that a wild puma had been spotted forty-five miles south of London, they were not taken seriously. However, as the evidence began to accumulate, experts from the Zoo felt obliged to investigate, for the descriptions given by people who claimed to have seen the puma were extraordinarily similar.<br>The hunt for the puma began in a small village where a woman picking blackberries saw ‘a large cat’ only five yards away from her. It immediately ran away when she saw it, and experts confirmed that a puma will not attack a human being unless it is cornered. The search proved difficult, for the puma was often observed at one place in the morning and at another place twenty miles away in the evening. Wherever it went, it left behind it a trail of dead deer and small animals like rabbits. Paw prints were seen in a number of places and puma fur was found clinging to bushes. Several people complained of “cat-like noises’ at night and a businessman on a fishing trip saw the puma up a tree. The experts were now fully convinced that the animal was a puma, but where had it come from? As no pumas had been reported missing from any zoo in the country, this one must have been in the possession of a private collector and somehow managed to escape. The hunt went on for several weeks, but the puma was not caught. It is disturbing to think that a dangerous wild animal is still at large in the quiet countryside.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>美洲狮是一种体形似猫的大动物，产于美洲。当伦敦动物园接到报告说，在伦敦以南45英里处发现一只美洲狮时，这些报告并没有受到重视。可是，随着证据越来越多，动物园的专家们感到有必要进行一番调查，因为凡是声称见到过美洲狮的人们所描述的情况竟是出奇地相似。<br>搜寻美洲狮的工作是从一座小村庄开始的。那里的一位妇女在采摘黑莓时的看见“一只大猫”，离她仅5码远，她刚看见它，它就立刻逃走了。专家证实，美洲狮非被逼得走投无路，是决不会伤人的。事实上搜寻工作很困难，因为常常是早晨在甲地发现那只美洲狮，晚上却在20英里外的乙地发现它的踪迹。无论它走哪儿，一路上总会留下一串死鹿及死兔子之类的小动物，在许多地方看见爪印，灌木丛中发现了粘在上面的美洲狮毛。有人抱怨说夜里听见“像猫一样的叫声”;一位商人去钓鱼，看见那只美洲狮在树上。专家们如今已经完全肯定那只动物就是美洲狮，但它是从哪儿来的呢?由于全国动物园没有一家报告丢了美洲狮，因此那只美洲狮一定是某位私人收藏豢养的，不知怎么设法逃出来了。搜寻工作进行了好几个星期，但始终未能逮住那只美洲狮。想到在宁静的乡村里有一头危险的野兽继续逍遥流窜，真令人担心。</p>
</blockquote>
<h2 id="Thirteen-equals-one"><a href="#Thirteen-equals-one" class="headerlink" title="Thirteen equals one"></a>Thirteen equals one</h2><blockquote>
<p>Our vicar is always raising money for one cause or another, but he has never managed to get enough money to have the church clock repaired. The big clock which used to strike the hours day and night was damaged many years ago and has been silent ever since.<br>One night, however, our vicar woke up with a start: the clock was striking the hours! Looking at his watch, he saw that it was one o’clock, but the bell struck thirteen times before it stopped. Armed with a torch, the vicar went up into the clock tower to see what was going on. In the torchlight, he caught sight of a figure whom he immediately recognized as Bill Wilkins, our local grocer.<br>‘Whatever are you doing up here Bill?’ asked the vicar in surprise.<br>‘I’m trying to repair the bell,’ answered Bill. ‘I’ve been coming up here night after night for weeks now. You see, I was hoping to give you a surprise.’<br>‘You certainly did give me a surprise!’ said the vicar. ‘You’ve probably woken up everyone in the village as well. Still, I’m glad the bell is working again.’<br>That’s the trouble, vicar,’ answered Bill. ‘It’s working all right, but I’m afraid that at one o’clock it will strike thirteen times and there’s nothing I can do about it.”<br>We’ll get used to that, Bill,’ said the vicar. “Thirteen is not as good as one, but it’s better than nothing. Now let’s go downstairs and have a cup of tea.”</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>我们教区的牧师总是为各种各样的事筹集资金。但始终未能筹足资金把教堂的钟修好。教堂的钟很大，以前不分昼夜打点报时，但很多年前遭到毁坏，从此便无声无息了。<br>一天夜里，我们的牧师突然被惊醒了，大钟又在“打点”报时了!他一看表，才1点钟，可是那钟一边敲了13下才停。牧师拿着一支电筒走上钟楼想去看看究竟发生了什么事情。借着电筒光。他看见一个人，马上认出那是本地杂货店主经比尔.威尔金斯。<br>“你究竟在这上面干什么，比尔?”牧师惊讶地问。<br>“我想把这口钟修好，”比尔回答说。“好几个星期了，我天天夜里到钟楼上来。嗯，我是想让你大吃一惊。”<br>“你确实使我大吃了一惊!”牧师说，“也许同时你把村里所有的人都吵醒了。不过，钟又能报时了，我还是很高兴的。”<br>“问题就在这里，牧师，”比尔回答说。“不错，钟能报时了，但是，恐怕每到1点钟，它总要敲13下，对此我已无能为力了。”<br>“大家慢慢就习惯了，比尔，”牧师说。“13下是不如1下好，但总比1下也不敲强。来，咱们下楼去喝杯茶吧。”</p>
</blockquote>
<h2 id="An-unknown-goddess"><a href="#An-unknown-goddess" class="headerlink" title="An unknown goddess"></a>An unknown goddess</h2><blockquote>
<p>Some time ago, an interesting discovery was made by archaeologists on the Aegean island of Kea. An American team explored a temple which stands in an ancient city on the promontory of Ayia Irini. The city at one time must have been prosperous, for it enjoyed a high level of civilization. Houses – often three storeys high – were built of stone. They had large rooms with beautifully decorated walls. The city was equipped with a drainage system, for a great many clay pipes were found beneath the narrow streets.<br>The temple which the archaeologists explored was used as a place of worship from the fifteenth century B.C. until Roman times. In the most sacred room of temple, clay fragments of fifteen statues were found. Each of these represented a goddess and had, at one time, been painted. The body of one statue was found among remains dating from the fifteenth century B.C. It’s missing head happened to be among remains of the fifth century B.C. This head must have been found in Classical times and carefully preserved. It was very old and precious even then. When the archaeologists reconstructed the fragments, they were amazed to find that the goddess turned out to be a very modern-looking woman. She stood three feet high and her hands rested on her hips. She was wearing a full-length skirt which swept the ground. Despite her great age, she was very graceful indeed, but, so far, the archaeologists have been unable to discover her identity.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>不久之前，在爱琴海的基亚岛上，考古工作者有一项有趣的发现。一个美国考古队在阿伊亚.依里尼海角的一座古城里考察了一座庙宇。这座古城肯定一度很繁荣，因为它曾享有高度的文明，房子一般有3层楼高，用石块修建。里面房间很大，墙壁装饰华丽。城里甚至还敷设了排水系统，因为在狭窄的街道底下发现了许许多多陶土制作的排水管道。<br>考古工作者考察的这座庙宇从公元前15世纪直到罗马时代一直是祭祀祈祷的场所。在庙中最神圣的一间殿堂里发现了15尊陶雕像的碎片。每一尊雕像代表一位女神，而且一度上过色。其中有一尊雕像，她的躯体是在公元前15世纪的历史文物中发现的，而她那身异处的脑袋却碰巧是在公元前5世纪的文物中找到的。她的脑袋一定是在古希腊罗马时代就为人所发现，并受到精心的保护。却使在当时，它也属历史悠久的珍奇之物。考古工作者把这些碎片重新拼装起来后，惊奇地发现那位女神原来是一位相貌十分摩登的女郎。她身高3英尺，双手叉腰。身穿一条拖地长裙，尽管上了年纪，但体态确实优美。不过，考古工作者至今未能确定这位女神的身份。</p>
</blockquote>
<h2 id="The-double-life-of-Alfred-Bloggs"><a href="#The-double-life-of-Alfred-Bloggs" class="headerlink" title="The double life of Alfred Bloggs"></a>The double life of Alfred Bloggs</h2><blockquote>
<p>These days, people who do manual work often receive far more money than people who work in offices. People who work in offices are frequently referred to as ‘white-collar workers’ for the simple reason that they usually wear a collar and tie to go to work. Such is human nature, that a great many people are often willing to sacrifice higher pay for the privilege of becoming white-collar workers. This can give rise to curious situations, as it did in the case of Alfred Bloggs who worked as a dustman for the Ellesmere Corporation.<br>When he got married, Alf was too embarrassed to say anything to his wife about his job. He simply told her that he worked for the Corporation. Every morning, he left home dressed in a smart black suit. He then changed into overalls and spent the next eight hours as a dustman. Before returning home at night, he took a shower and changed back into his suit. Alf did this for over two years and his fellow dustmen kept his secret. AlF’s wife has never discovered that she married a dustman and she never will, for Alf has just found another job. He will soon be working in an office. He will be earning only half as much as he used to, but he feels that his rise in status is well worth the loss of money. From now on, he will wear a suit all day and others will call him ‘Mr. Bloggs’, not ‘Alf’.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>如今，从事体力劳动的人的收入一般要比坐办公室的人高出许多。坐办公室的之所以常常被称作：“白领工人”，就是因为他们通常是穿着硬领白衬衫，系着领带去上班。许多人常常情愿放弃较高的薪水以换取做白领工人的殊荣，此乃人之常情。而这常常会引起种种奇怪的现象，在埃尔斯米尔公司当清洁工的艾尔弗雷德·布洛斯就是一个例子。<br>艾尔弗结婚时，感到非常难为情，而没有将自己的职业告诉妻子。他只说在埃尔斯米尔公司上班。每天早晨，他穿上一身漂亮的黑色西装离家上班，然后换上工作服，当8个小时清洁工。晚上回家前，他洗个淋浴，重新换上那身黑色西服。两年多以来，艾尔弗一直这样，他的同事也为他保守秘密。艾尔弗的妻子一直不知道她嫁给了一个清洁工，而且她永远也不会知道了，因为艾尔弗已找到薪职，不久就要坐办公室里工作了。他将来挣的钱只有他现在的一半。不过他觉得，地位升高了，损失点儿钱也值得。从此，艾尔弗可以一天到晚穿西服了。别人将称呼他为“布洛格斯先生”，而不再叫他“艾尔弗”了。</p>
</blockquote>
<h2 id="The-facts"><a href="#The-facts" class="headerlink" title="The facts"></a>The facts</h2><blockquote>
<p>Editors of newspapers and magazines often go to extremes to provide their readers with unimportant facts and statistics. Last year a journalist had been instructed by a well-known magazine to write an article on the president’s palace in a new African republic. When the article arrived, the editor read the first sentence and then refused to publish it. The article began: ‘Hundreds of steps lead to the high wall which surrounds the president’s palace.’ The editor at once sent the journalist a telegram instructing him to find out the exact number of steps and the height of the wall.<br>The journalist immediately set out to obtain these important facts, but he took a long time to send them. Meanwhile, the editor was getting impatient, for the magazine would soon go to press. He sent the journalist two more faxes, but received no reply. He sent yet another fax informing the journalist that if he did not reply soon he would be fired. When the journalist again failed to reply, the editor reluctantly published the article as it had originally been written. A week later, the editor at last received a telegram from the journalist. Not only had the poor man been arrested, but he had been sent to prison as well. However, he had at last been allowed to send a fax in which he informed the editor that he had been arrested while counting the 1,084 steps leading to the fifteen-foot wall which surrounded the president’s palace.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>报刊杂志的编辑常常为了向读者提供成立一些无关紧要的事实和统计数字而走向极端。去年，一位记者受一家有名的杂志的委托写一篇关于非洲某个新成立共和国总统 府的文章。稿子寄来后，编辑看了第一句话就拒绝予以发表。文章的开头是这样的：“几百级台阶通向环绕总统府的高墙。”编辑立即给那位记者发去传真，要求他核实一下台阶的确切数字和围墙的高度。<br>记者立即出发去核实这些重要的事实，但过了好长时间不见他把数字寄来。在此期间，编辑等得不耐烦了，因为杂志马上要付印。他给记者先后发去两份传真，但对方毫无反应。于是他又发了一份传真。通知那位记者说，若再不迅速答复，将被解雇。但记者还是没有回复。编辑无奈，勉强按原样发稿了。一周之后，编辑终于接到了记者的传真。那个可怜的记者不仅被捕了。而且还被送进了监狱。不过，他终于获准发回了一份传真。在传真中他告诉编辑，就在他数通向15英尺高的总统府围墙的l084级台阶时，被抓了起来。</p>
</blockquote>
<h2 id="Smash-and-grab"><a href="#Smash-and-grab" class="headerlink" title="Smash-and-grab"></a>Smash-and-grab</h2><blockquote>
<p>The expensive shops in a famous arcade near Piccadilly were just opening. At this time of the morning, the arcade was almost empty. Mr. Taylor, the owner of a jewellery shop was admiring a new display. Two of his assistants had been working busily since eight o’clock and had only just finished. Diamond necklaces and rings had been beautifully arranged on a background of black velvet. After gazing at the display for several minutes, Mr. Taylor went back into his shop.<br>The silence was suddenly broken when a large car, with its headlights on and its home blaring, roared down the arcade. It came to a stop outside the jeweller’s. One man stayed at the wheel while two others with black stocking over their faces jumped out and smashed the window of the shop with iron bars. While this was going on, Mr. Taylor was upstairs. He and his staff began throwing furniture out of the window. Chairs and tables went flying into the arcade. One of the thieves was struck by a heavy statue, but he was too busy helping himself to diamonds to notice any pain. The raid was all over in three minutes, for the men scrambled back into the car and it moved off at a fantastic speed. Just as it was leaving, Mr. Taylor rushed out and ran after it throwing ashtrays and vases, but it was impossible to stop the thieves. They had got away with thousands of pounds worth of diamonds.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>皮卡迪利大街附近的一条著名拱廊街道上，几家高档商店刚刚开始营业。在早晨的这个时候，拱廊街上几乎空无一人。珠宝店主泰勒先生正在欣赏新布置的橱窗。他手下两名店员从早上8点就开始忙碌，这时刚刚布置完毕。钻石项链、戒指漂亮地陈列在黑色丝绒上面。泰勒先生站在橱窗外凝神欣赏了几分钟就回到了店里。<br>宁静突然被打破，一辆大轿车亮着前灯，响着喇叭，呼啸着冲进了拱廊街，在珠宝店门口停了下来。一人留在驾驶座上，另外两个用黑色长筒丝袜蒙面的人跳下车来。他们用铁棒把商店橱窗的玻璃砸碎。这开始发生时，泰勒先生正在楼上。他与店员动手向窗外投掷家具，椅子，桌子飞落花流水在拱廊街上。一个窃贼被一尊很重的雕像击中，但由于他忙着抢钻石首饰，竟连疼痛都顾不上了。这场抢劫只持续了3分钟，因为窃贼争先恐后地爬上轿车，以惊人的速度开跑了。就在轿车离开的 时候，泰勒先生从店里冲了出来，跟在车后追赶，一边还往车上扔烟灰缸、花瓶。但他已无法抓住那些窃贼了。他们已带着价值数千镑的首饰逃之夭夭了。</p>
</blockquote>
<h2 id="Mutilated-ladies"><a href="#Mutilated-ladies" class="headerlink" title="Mutilated ladies"></a>Mutilated ladies</h2><blockquote>
<p>Has it ever happened to you? Have you ever put your trousers in the washing machine and then remembered there was a large bank note in your back pocket? When you rescued your trousers, did note in your back pocket? When you rescued your trousers, did you find the note was whiter than white? People who live in Britain needn’t despair when they made mistakes like this (and a lot of people do)! Fortunately for them, the Bank of England has a team called Mutilated Ladies which deals with claims from people who fed their money to a machine or to their dog. Dogs, it seems, love to chew up money!<br>A recent case concerns Jane Butlin whose fiancé, John, runs a successful furniture business. John had very good day and put his wallet containing $3,000 into the microwave oven for safekeeping. Then he and Jane went horse-riding. When they got home, Jane cooked their dinner in the microwave oven and without realizing it, cooked her fiancé’s wallet as well. Imagine their dismay when they found a beautifully-cooked wallet and notes turned to ash! John went to see his bank manager who sent the remains of wallet and the money to the special department of the Bank of England in Newcastle: the Mutilate Ladies! They examined the remain and John got all his money back. ‘So long as there’s something to identify, we will give people their money back,’ said a spokeswoman for the Bank. ‘Last year, we paid $1.5m on 21,000 claims. Damaged bank notes. The Queen’s head appears on English bank notes, and ‘lady’ refers to this.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>这种事情在你身上出现过吗？你有没有把裤子塞洗衣机，然后又想在裤子的后兜有一张大面值的纸币？当你把裤子抢救出来时，你有没有发现那张纸币已经变得比白纸还白？当英国人犯这种错误时，他们不必感到绝望（而许多国家的人都有这种绝望的感觉）。对英国人来说，值得庆幸的是英国银行有一个残钞鉴别组，负责理那些把钱塞进机器或塞给狗的人提出的索赔要求。看起来，狗很喜欢咀嚼钱币。<br>最近的一个案例与简.巴特林有关，她的未婚夫约翰拥有一家生意兴隆家具店。有一天约翰的生意很好，他把一只装有3,000 英镑的钱包放进微波炉内保存。然后，他和简一起去骑马。回家后，简用微波炉煮了晚饭，无意中之中把她未婚夫的钱包也一起煮了。可以想像他们发现一只煮得很好看的钱包，钞票已化成灰时的沮丧心情。约翰去找银行经理，经理把约翰的钱包和纸币的残留物送到英国银行在纽卡斯尔的一个专门部门——残钞鉴别组。他们鉴定了这些残留物。约翰拿回了他损失的全部数额。“只要有东西可供识别，我们会把钱还给人家的，”银行的一位女发言人说。“去年，我们对21，000 起索赔要求支付了150万英镑。”</p>
</blockquote>
<h2 id="A-famous-monastery"><a href="#A-famous-monastery" class="headerlink" title="A famous monastery"></a>A famous monastery</h2><blockquote>
<p>The Great St. Bernard Pass connects Switzerland to Italy. At 2,473 metres, it is the highest mountain pass in Europe. The famous monastery of St. Bernard, witch was founded in eleventh century, lies about a mile away. For hundreds of years, St. Bernard dogs have saved the lives of travellers crossing the dangerous Pass. These friendly dogs, which were first brought from Asia, were used as watchdogs even in Roman times. Now that a tunnel has been built through the mountains, the Pass is less dangerous, but each year, the dogs are still sent out into the snow whenever a traveller is in difficulty. Despite the new tunnel, there are still a few people who rashly attempt to cross the Pass on foot.<br>During the summer months, the monastery is very busy, for it is visited by thousands of people who cross the Pass in cars. As there are so many people about, the dogs have to be kept in a special enclosure. In winter, however, life at the monastery is quite different. The temperature drops to – 30 and very few people attempt to cross the Pass. The monks prefer winter to summer of they have more privacy. The dogs have greater freedom, too, for they are allowed to wander outside their enclosure. The only regular visitors to the monastery in winter are parties of skiers who go there at Christmas and Easter. These young people, who love the peace of mountains, always receive a warm welcome at St. Bernard’s monastery.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>圣伯纳德大山口连接着瑞士与意大利，海拔2,473O米，是欧洲最高的山口。11世纪建造的著名的圣伯纳德修道院位于离山口1英里远的地方。几百年来，圣伯纳德修道院驯养狗拯救了许多翻越这道山口的旅游者的生命。那些最先从亚洲引进的狗，待人友好，早在罗马时代就给人当看门狗了。如今由于山里开挖了隧道，翻越山口已不那么危险了。但每年还要派狗到雪山地里去帮助那些遇到困难的旅游者，尽管修通了隧道，但仍有一些人想冒险徒步跨越圣伯纳德山口。<br>夏天的几个月里，修道院十分忙碌，因为有成千上万的人驾车通过山口，顺道来修道院参观。由于来人太多，狗被关在专门的围栏里。然而到了冬天，修道院里的生活则是另一番景象。气温下降到零下30度，试图跨越山口的人寥寥无几。修道士们喜欢冬天，而不太喜欢夏天。因为在冬天，他们可以更多地过无人打扰的生活。狗也比较自由，被放出围栏，四处遛达。冬天常来修道院参观的只有一批批滑雪者。他们在圣诞节或复活节到那儿去。这些热爱高山清静环境的年轻人每年都受到圣伯纳德道院的热烈欢迎。</p>
</blockquote>
<h2 id="Flying-cats"><a href="#Flying-cats" class="headerlink" title="Flying cats"></a>Flying cats</h2><blockquote>
<p>Cats never fail to fascinate human beings. They can be friendly and affectionate towards humans, but they lead mysterious lives of their own as well. They never become submissive like dogs and horses. As a result, humans have learned to respect feline independence. Most cats remain suspicious of humans all their lives. One of the things that fascinates us most about cats is the popular belief that they have nine lives. Apparently, there is a good deal of truth in this idea. A cat’s ability to survive falls is based on fact.<br>Recently the New York Animal Medical Center made a study of 132 cats over a period of five months. All these cats had one experience in common: they had fallen off high buildings, yet only eight of them died from shock or injuries. Of course, New York is the ideal place for such an interesting study, because there is no shortage of tall buildings. There are plenty of high-rise windowsills to fall from! One cat, Sabrina, fell 32 storeys, yet only suffered from a broken tooth. ‘Cats behave like well-trained paratroopers.’ a doctor said. It seems that the further cats fall, the less they are likely to injure themselves. In a long drop, they reach speeds of 60 miles an hour and more. At high speeds, falling cats have time to relax. They stretch out their legs like flying squirrels. This increases their air-resistance and reduces the shock of impact when they hit the ground.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>猫总能引起人们的极大兴趣。它们可以对人友好，充满柔情。但是，它们又有自己神秘的生活方式。它们从不像狗和马一样变得那么顺从。结果是人们已经学会尊重猫的独立性。在它们的一生中，大多数猫都对人存有戒心。最使我们感兴趣的一件事情就是一种通俗的信念——猫有九条命。显然，这种说法里面包含着许多真实性。猫在跌落时能够大难不死是有事实作为依据的。<br>最近，纽约动物医疗中心对132只猫进行了为期5个月的综合研究。所有这些猫有一个共同的经历：它们都曾从高层建筑上摔下来过，但只有其中的8只猫死于震荡或跌伤。当然，纽约是进行这种有趣的试验的一个理想的地方，因为那里根本不缺乏高楼大厦，有的是高层的窗槛从上往下坠落。有一只叫萨伯瑞的猫从32层楼上掉下来，但只摔断一颗牙。“猫就像训练有素的跳伞队员，”一位医生说。看起来，猫跌落的距离越长，它们就越不会伤害自己。在一个长长的跌落过程中，它们可以达到每小时60里甚至更快的速度。在高速下落中，猫有时间放松自己。它们伸展四肢，就像飞行中的松鼠一样。这样就加大了空气阻力，并减少了它们着地时冲击力带来的震动。</p>
</blockquote>
<h2 id="The-loss-of-the-Titanic"><a href="#The-loss-of-the-Titanic" class="headerlink" title="The loss of the Titanic"></a>The loss of the Titanic</h2><blockquote>
<p>The great ship, Titanic, sailed for New York from Southampton on April 10th, 1912. She was carrying 1316 passengers and a crew of 89l. Even by modern standards, the 46,000 ton Titanic was a colossal ship. At that time, however, she was not only the largest ship that had ever been built, but was regarded as unsinkable, for she had sixteen watertight compartments. Even if two of these were flooded, she would still be able to float. The tragic sinking of this great liner will always be remembered, for she went down on her first voyage with heavy loss of life.<br>Four days after setting out, while the Titanic was sailing across the icy waters of the North Atlantic, a huge iceberg was suddenly spotted by a look-out. After the alarm had been given, the great ship turned sharply to avoid a direct collision. The Titanic turned just in time, narrowly missing the immense wall of ice which rose over 100 feet out of the water beside her. Suddenly, there was a slight trembling sound from below, and the captain went down to see what had happened. The noise had been so faint that no one thought that the ship had been damaged. Below, the captain realized to his horror that the Titanic was sinking rapidly, for five of her sixteen watertight compartments had already been flooded! The order to abandon ship was given and hundreds of people plunged into the icy water. As there were not enough life-boats for everybody, 1500 lives were lost.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>巨轮“泰坦尼克”号1912年4月10日从南安普敦起锚驶向纽约。船上载1,316名乘客与891名船员。却使用现代标准来衡量，45,000吨的“泰坦尼克”号与算得上一艘巨轮了。当时，这艘轮船不仅是造船史上建造的最大的一艘船而且也被认为是不会沉没的。因为船由16个密封舱组成，即使有两个舱进水，仍可漂浮的水面上。然而，这艘巨轮首航就下沉，造成大批人员死亡。人们将永远记着这艘巨轮的沉没惨剧。“<br>泰坦尼克”起航后的第4天，它正行驶在北大西洋冰冷的海面上。突然，了望员发现一座冰山。警报响过不久，巨轮急转弯，以避免与冰山正面相撞。“泰坦尼克”这个弯拐得及时，紧贴着高出海面100英尺的巨大的冰墙擦过去。突然，从船舱下部传来一声微颤音，船长走下船舱去查看究竟。由于这个声音非常轻，没人会想到船身已遭损坏。在下面，船长惊恐的地发现“泰坦尼克”号正在急速下沉，16个密封舱已有5个进水。于是，他发出弃船的命令几百人跳进了冰冷刺骨的海水里。由于没有足够的救生艇运载所有乘客，结果，1,500人丧生。</p>
</blockquote>
<h2 id="Not-guilty"><a href="#Not-guilty" class="headerlink" title="Not guilty"></a>Not guilty</h2><blockquote>
<p>Customs Officers are quite tolerant these days, but they can still stop you when you are going through the Green Channel and have nothing to declare. Even really honest people are often made to feel guilty. The hardened professional smuggler, on the other hand, is never troubled by such feelings, even if he has five hundred gold watches hidden in his suitcase. When I returned form abroad recently, a particularly officious young Customs Officer clearly regarded me as a smuggler.<br>‘Have you anything to declare?’ he asked, looking me in the eye.<br>‘No’, I answered confidently.<br>‘Would you mind unlocking this suitcase please?’<br>‘Not at all,’ I answered.<br>The Officer went through the case with great care. All the thing I had packed so carefully were soon in a dreadful mess. I felt sure I would never be able to close the case again. Suddenly, I saw the Officer’s face light up. He had spotted a tiny bottle at the bottom of my case and he pounced on it with delight.<br>‘Perfume, eh?’ he asked sarcastically. ‘You should have declared that. Perfume is not exempt from import duty.’<br>‘But it isn’t perfume,’ I said. ‘It’s hair gel.’ Then I added with a smile, ‘It’s a strange mixture I make myself.’<br>As I expected, he did not believe me.<br>‘Try it!’ I said encouragingly.<br>The officer unscrewed the cap and put the bottle to his nostrils. He was greeted by an unpleasant smell which convinced him that I was telling the truth. A few minutes later, I was able to hurry away with precious chalk marks on my baggage.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>现在的海关官员往往相当宽容。但是，当你通过绿色通道，没有任何东西需要申报时，他们仍可以拦住你。甚至是最诚实的人也常弄得觉得有罪似的，而老练的职业走私犯却使手提箱里藏着500只金表，却也处之泰然。最近一次，我也出国归来，碰上一位特别好管闲事的年轻海关官员，他显然把我当成走私犯。<br>“您有什么需要申报的吗?”他直盯着我的眼睛问。<br>“没有。”我自信地回答说。<br>“请打开这只手提箱好吗?”<br>“好的。”我回答说。<br>那位官员十分仔细地把箱子检查了一遍。所有细心包装好的东西一会儿工夫就乱成一团。我相信那箱子再也关不上了。突然，我看到官员脸上露出了得意的神色。他在我的箱底发现了一只小瓶，高兴地一把抓了起来。<br>“香水，嗯?”他讥讽地说道，“你刚才应该申报，香水要上进口税的。”<br>“不，这不是香水，”我说，“是发胶。”接着我脸带微笑补充说：“这是一种我自己配制的奇特的混合物。”<br>“你就闻一闻吧!”我催促说。<br>海关官员拧开瓶盖，把瓶子放到鼻子底下。一股怪味袭来，使他相信了我说的真话。几分钟后，我终于被放行，手提划着宝贵的粉笔记号的行李，匆匆离去。</p>
</blockquote>
<h2 id="Life-on-a-desert-island"><a href="#Life-on-a-desert-island" class="headerlink" title="Life on a desert island"></a>Life on a desert island</h2><blockquote>
<p>Most of us have formed an unrealistic picture of life on a desert island. We sometimes imagine a desert island to be a sort of paradise where the sun always shines. Life there is simple and good. Ripe fruit falls from the trees and you never have to work. The other side of the picture is quite the opposite. Life on a desert island is wretched. You either starve to death or live like Robinson Crusoe, waiting for a boat which never comes. Perhaps there is an element of truth in both these pictures, but few us have had the opportunity to find out.<br>Two men who recently spent five days on a coral island wished they had stayed there longer. They were taking a badly damaged boat from the Virgin Islands to Miami to have it repaired. During the journey, their boat began to sink. They quickly loaded a small rubber dinghy with food, matches, and cans of beer and rowed for a few miles across the Caribbean until they arrived at a tiny coral island. There were hardly any trees on the island and there was no water, but this did not prove to be a problem. The men collected rainwater in the rubber dinghy. As they had brought a spear gun with them, they had plenty to eat. They caught lobster and fish every day，and, as one of them put it ‘ate like kings’. When a passing tanker rescued them five days later, both men were genuinely sorry that they had to leave.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>我们许多人对于荒岛生活有一种不切实际的想法。我们有时想象荒岛是阳光终日普照的天堂。在那里，生活简单又美好。成熟的水果从树上掉下来，人们根本无需劳动。另一种想法恰恰相反，认为荒岛生活很可怕，要么饿死，要么像鲁滨孙那样，天天盼船来，却总没见船影。也许，这两种都像都有可信之处。但很少有人能有机会去弄个究竟。<br>最近有两个人在一座珊瑚岛上呆了5天，他们真希望在那儿再多呆一些日子。他们驾着一条严重损坏的小船从维尔京群岛阿密修理。途中，船开始下沉，他们迅速把食物、火柴、罐装啤酒往一只救生筏上装。然后在加勒比海上划行了几英里，到了一座珊瑚岛上。岛上几乎没有一颗树，也没有淡水，但这不算什么问题。他们用像皮艇蓄积雨水。由于他们随身带了一支捕鱼枪，因此，吃饭不愁。他们天天捕捉龙虾和鱼，正如其中一位所说，吃得“像国王一样好”。5天后，一条油轮从那儿路过，搭救了他们。这二位不得不离开那个荒岛时，还真的感到遗憾呢!</p>
</blockquote>
<h2 id="It’s-only-me"><a href="#It’s-only-me" class="headerlink" title="It’s only me"></a>It’s only me</h2><blockquote>
<p>After her husband had gone to work. Mrs. Richards sent her children to school and went upstairs to her bedroom. She was too excited to do any housework that morning, for in the evening she would be going to a fancy-dress part with her husband. She intended to dress up as a ghost and as she had made her costume the night before, she was impatient to try it on. Though the costume consisted only of a sheet, it was very effective. After putting it on, Mrs. Richards went downstairs. She wanted to find out whether it would be comfortable to wear.<br>Just as Mrs. Richards was entering the dinning room, there was a knock on the front door. She knew that it must be the baker. She had told him to come straight in if ever she failed to open the door and to leave the bread on the kitchen table. Not wanting to frighten the poor man, Mrs. Richards quickly hid in the small storeroom under the stairs. She heard the front door open and heavy footsteps in the hall. Suddenly the door of the storeroom was opened and a man entered. Mrs. Richards realized that it must be the man from the Electricity Board who had come to read the metre. She tried to explain the situation, saying ‘It’s only me’, but it was too late. The man let out cry and jumped back several paces. When Mrs. Richards walked towards him, he fled, slamming the door behind him.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>理查兹夫人等丈夫上班走后，把孩子送去上学，然后来到楼上自己的卧室。那天上午，她兴奋得什么家务活都不想做，因为晚上她要同丈夫一起参加一个化装舞会。她打算装扮成鬼的模样。头天晚上她已把化装服做好，这时她急于想试试。尽管化装服仅由一个被单制成，却十分逼真。理查兹夫人穿上化装服后下了楼，想看穿起来是否舒服。<br>理查兹夫人刚刚走进餐厅，前门就传来敲门声。她知道来了一定面包师。她曾告诉过面包师，如果她不去开门，他可直接进门，把面包放在厨房的桌上。理查兹夫人不想吓唬这个可怜人，便赶紧躲到了楼梯下的小储藏室里。她听见前门被打开，走廊里响起重重的脚步声。突然贮藏门开了，一个男人走了进来。理查兹夫人这才想到一定是供电局来人查电表了。她说了声“是我，别怕!”然后想进行一番解释，但已来不及了。那人大叫了一声，惊退了几步。理查兹夫人朝他走去，只见他 “砰”的一声关上门逃走了。</p>
</blockquote>
<h2 id="A-noble-gangster"><a href="#A-noble-gangster" class="headerlink" title="A noble gangster"></a>A noble gangster</h2><blockquote>
<p>There was a time when the owners of shops and businesses in Chicago had to pay large sums of money to gangsters in return for ‘protection.’ If the money was not paid promptly, the gangsters would quickly put a man out of business by destroying his shop. Obtaining ‘protection money’ is not a modern crime. As long ago as the fourteenth century, an Englishman, Sir John Hawkwood, made the remarkable discovery that people would rather pay large sums of money than have their life work destroyed by gangsters.<br>Six hundred years ago, Sir Johan Hawkwood arrived in Italy with a band of soldiers and settled near Florence. He soon made a name for himself and came to be known to the Italians as Giovanni Acuto. Whenever the Italian city-states were at war with each other, Hawkwood used to hire his soldiers to princes who were willing to pay the high price he demanded. In times of peace, when business was bad, Hawkwood and his men would march into a city-state and, after burning down a few farms, would offer to go away if protection money was paid to them. Hawkwood made large sums of money in this way. In spite of this, the Italians regarded him as a sort of hero. When he died at the age of eighty, the Florentines gave him a state funeral and had a pictured painted which was dedicated to the memory of ‘the most valiant soldier and most notable leader, Signor Giovanni Haukodue.’</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>曾经有一个时期,芝加哥的店主和商行的老板们不得不拿出大笔的钱给歹徒以换取”保护”。如果交款不及时,歹徒们就会很快捣毁他的商店,让他破产.榨取”保护金”并不是一种现代的罪恶行径.早在14世纪,英国人约翰.霍克伍德就有过非凡的发现:”人们情愿拿出大笔的钱,也不愿毕生的心血毁于歹徒之手.<br>600年前,约翰.霍克伍德爵士带着一队士兵来到意大利,在佛罗伦萨附近驻扎下来,很快就出了名.意大利人叫他乔凡尼.阿库托.每次意大利各城邦之间打伏,霍克伍德把他的士兵雇佣给愿给他出高价的君主。和平时期,当生意萧条时,霍克伍德便带领士兵进入某个城邦,纵火烧毁一两个农场,然后提出,如向他们缴纳保护金,他们便主动撤离。霍克伍德用这种方法挣了大笔钱.尽管如此,意大利人还是把他视作某种英雄。他80岁那年死去时,佛罗伦萨人为他举行了国葬,并为他画像以纪念这位”骁勇无比的战士、杰出的领袖乔凡尼.阿库托先生.”</p>
</blockquote>
<h2 id="Fifty-pence-worth-of-trouble"><a href="#Fifty-pence-worth-of-trouble" class="headerlink" title="Fifty pence worth of trouble"></a>Fifty pence worth of trouble</h2><blockquote>
<p>Children always appreciate small gifts of money. Mum or dad, of course, provide a regular supply of pocket money, but uncles and ants are always a source of extra income. With some children, small sums go a long way. If fifty pence pieces are not exchanged for sweets, they rattle for months inside money boxes. Only very thrifty children manage to fill up a money box. For most of them, fifty pence is a small price to pay for a nice big bar of chocolate.<br>My nephew, George, has a money box but it is always empty. Very few of the fifty pence pieces and pound coins I have given him have found heir way there. I gave him fifty pence yesterday and advised him to save it. Instead he bought himself fifty pence worth of trouble. On his way to the sweet shop, he dropped his fifty pence and it bounced along the pavement and then disappeared down a drain. George took off his jacket, rolled up his sleeves and pushed is right arm through the drain cover. He could not find his fifty pence piece anywhere, and what is more, he could no get his arm out. A crowd of people gathered round him and a lady rubbed his arm with soap and butter, but George was firmly stuck. The fire brigade was called and two fire fighter freed George using a special type of grease. George was not too upset by his experience because the lady who owns the sweet shop heard about his troubles and rewarded him with large box of chocolates.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>孩子们总是喜欢得到一些零花钱。爸爸妈妈当然经常给孩子零花钱，但是，叔舅婶姨也是孩子们额外收入来源。对于有些孩子来说，少量的钱可以花很长一段时间。如果50便士不拿来换糖吃，则可以放在储蓄罐里叮当响上好几月。但是能把储蓄罐装满的只有屈指可数的几个特别节俭的孩子。对大部分孩子来说，用50便士来买一大块好的巧克力，是算不了什么的。<br>我的外甥乔治有一个储蓄罐，但总是空空的。我给了不少50便士的硬币，但没有几个存到储蓄罐里。昨天，我给了他50便士让存起来，却拿这钱给自己买了50 便士的麻烦。在他去糖果店的路上，50便士掉在地上，在人行道上跳了几下，掉进了阴沟里。乔治脱掉外套，卷起袖子，将右胳膊伸进了阴沟盖。但他摸了半天也没找到那50便士硬币，他的胳膊反倒退不出来了。这时在他周围上了许多人，一位女士在乔治胳膊上抹了肥皂，黄油，但乔治的胳膊仍然卡得紧紧的。有人打电话叫来消防队，两位消防队员使用了一种特殊的润滑剂才使乔治得以解脱。不过，此事并没使乔治过于伤心，因为糖果店老板娘听说了他遇到的麻烦后，赏给他一大盒巧克力。</p>
</blockquote>
<h2 id="Mary-had-a-little-lamb"><a href="#Mary-had-a-little-lamb" class="headerlink" title="Mary had a little lamb"></a>Mary had a little lamb</h2><blockquote>
<p>Mary and her husband Dimitri lived in the tiny village of Perachora in southern Greece. One of Mary’s prize possessions was a little white lamb which her husband had given her. She kept it tied to a tree in a field during the day and went to fetch it every evening. One evening, however, the lamb was missing. The rope had been cut, so it was obvious that the lamb had been stolen.<br>When Dimitri came in from the fields, his wife told him what had happened. Dimitri at once set out to find the thief. He knew it would not prove difficult in such a small village. After telling several of his friends about the theft, Dimitri found out that his neighbour, Aleko, had suddenly acquired a new lamb. Dimitri immediately went to Aleko’s house and angrily accused him of stealing the lamb. He told him he had better return it or he would call the police. Aleko denied taking it and led Dimitri into his backyard. It was true that he had just bought a lamb, he explained, but his lamb was black. Ashamed of having acted so rashly, Dimitri apologized to Aleko for having accused him. While they were talking it began to rain and Dimitri stayed in Aleko’s house until the rain stopped. When he went outside half an hour later, he was astonished to find the little black lamb was almost white. Its wool, which had been dyed black, had been washed clean by the rain!</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>玛丽与丈夫迪米特里住在希腊南部一个叫波拉考拉的小村庄里。玛丽最珍贵的财产之一就是丈夫送给她的一只白色小羔羊。白天，玛丽把羔羊拴在地里的一颗树上，每天晚上把它牵回家。可是，一天晚上，那只小羔羊失踪了。绳子被人割断，很明显小羔羊是被人偷了。<br>迪米特里从地里回来，妻子把情况跟他一说，他马上出去找偷羔羊的人。他知道在这样一个小村庄里抓住小偷并不困难。把失窃的事告诉几个朋友后，迪米特里发出他的邻居阿列科家突然多了一只小羔羊。迪米特里立刻去了阿列科家，气呼呼地指责他偷了羔羊，告诉他最好把羊交还，否则就去叫警察。阿列科不承认，并把迪米特里领进院子。不错，他的确刚买了一只羔羊，阿列科解释说，但他的羔羊是黑色的。迪米特里为自己的鲁莽而感到不好意思，向阿列科道了歉，说是错怪了他。就在他俩说话的时候，天下起了雨，迪米特里便呆在阿列科家里避雨，一直等到雨停为止。半小时后，当他从屋里出来时，他惊奇地发现小黑羔羊全身几乎都变成白色。原来羊毛上染的黑色被雨水冲掉了!</p>
</blockquote>
<h2 id="The-longest-suspension-bridge-in-the-world"><a href="#The-longest-suspension-bridge-in-the-world" class="headerlink" title="The longest suspension bridge in the world"></a>The longest suspension bridge in the world</h2><blockquote>
<p>Verrazano, an Italian about whom little is known, sailed into New York Harbour in 1524 and named it Angouleme. He described it as ‘a very agreeable situation located within two small hills in the midst of which flowed a great river.’ Though Verrazano is by no means considered to be a great explorer, his name will probably remain immortal, for on November 21st, 1964, the longest suspension bridge in the world was named after him.<br>The Verrazano Bridge, which was designed by Othmar Ammann, joins Brooklyn to Staten Island. It has a span of 4,260 feet. The bridge is so long that the shape of the earth had to be taken into account by its designer. Two great towers support four huge cables. The towers are built on immense underwater platforms make of steel and concrete. The platforms extend to a depth of over 100 feet under the sea. These alone took sixteen months to build. Above the surface of the water, the towers rise to a height of nearly 700 feet. They support the cables from which the bridge has been suspended. Each of the four cables contains 26,108 lengths of wire. It has been estimated that if the bridge were packed with cars, it would still only be carrying a third of its total capacity. However, size and strength are not the only important things about this bridge. Despite its immensity, it is both simple and elegant, fulfilling its designer’s dream to create ‘an enormous object drawn as faintly as possible’.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>1524年，一位鲜为人知的意大利人维拉萨诺驾船驶进纽约港，并将该港名为安古拉姆。他对该港作了这样的描述：“地理位置十分适宜，位于两座小山的中间，一条大河从中间流过”。虽然维拉萨诺绝对算不上一个伟大的探险家，但他的名字将流芳百世，因为1964年11月21日建成的一座世界上最长的吊桥是以他的名字命名。<br>维拉萨诺大桥由奥斯马.阿曼设计，连结着布鲁克林与斯塔顿岛，桥长4,260英尺。由于桥身太长，设计者不得不考虑了地表的形状。两座巨塔支撑着4根粗大的钢缆。塔身建在巨大的水下钢盘混凝土平台上。平台深入海底100英尺。仅这两座塔就花了16个月才建成。塔身高出水面将近700英尺。高塔支撑着钢缆，而钢缆又悬吊着大桥，4根钢缆中的每根由26，108股钢绳组成。据估计，若桥上摆满了汽车，也只不过是桥的总承载力的1/3。然而，这座桥重要特点不仅是它的规模与强度。尽管此桥很大，但它的结构简单，造型优美，实现了设计者企图创造一个“尽量用细线条勾画出一个庞然大物”的梦想。</p>
</blockquote>
<h2 id="Electric-currents-in-modern-art"><a href="#Electric-currents-in-modern-art" class="headerlink" title="Electric currents in modern art"></a>Electric currents in modern art</h2><blockquote>
<p>Modern sculpture rarely surprises us any more. The idea that modern art can only be seen in museums is mistaken. Even people who take no interest in art cannot have failed to notice examples of modern sculpture on display in public places. Strange forms stand in gardens, and outside buildings and shops. We have got quite used to them. Some so-called ‘modern’ pieces have been on display for nearly eighty years.<br>In spite of this, some people – including myself – were surprise by a recent exhibition of modern sculpture. The first thing I saw when I entered the art gallery was a notice which said: ‘Do not touch the exhibits. Some of them are dangerous!’ The objects on display were pieces of moving sculpture. Oddly shaped forms that are suspended form the ceiling and move in response to a gust of wind are quite familiar to everybody. These objects, however, were different. Lined up against the wall, there were long thin wires attached to metal spheres. The spheres had been magnetized and attracted or repelled each other all the time. In the centre of the hall, there were a number of tall structures which contained coloured lights. These lights flickered continuously like traffic lights which have gone mad. Sparks were emitted from small black boxes and red lamps flashed on and off angrily. It was rather like an exhibition of prehistoric electronic equipment. These peculiar forms not only seemed designed to shock people emotionally, but to give them electric shocks as well!</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>现代雕塑不再使我们感到惊讶了。那种认为现代艺术只能在博物馆里才能看到的观点是错误的。即使是对艺术不感兴趣的人也不会注意到在公共场所展示的现代艺术品。公园里、大楼和商店外竖立着的奇形怪状的雕塑，对这些，我们已经司空见惯了。有些所谓的“现代”艺术品在那里已经陈列了近80年了。<br>尽管如此，最近举办的一次现代雕塑展览还是使一些人(包括我在内)大吃了一惊。走进展厅首先看到的是一张告示，上面写着“切勿触摸展品，某些展品有危险!”展品都是些活动的雕像。人们所熟悉的是悬挂在天花板上、造型奇特、随风飘荡的雕塑品。这些展品却使人大开眼界。靠墙排列着许多细长的电线，而电线又连着金属球。金属球经过磁化，互相之间不停地相互吸引或相互排斥。展厅中央是装有彩色灯泡的许多高高的构件，灯泡一刻不停地闪烁着，就像失去了控制的红绿灯。小黑盒子里迸出火花，红色灯泡发怒似地忽明忽暗。这儿倒像是在展览古老的电子设备。好像设计这些奇形怪状的展品不仅是为了给人感情上的强烈刺激，而且还想给人以电击似的!</p>
</blockquote>
<h2 id="A-very-dear-cat"><a href="#A-very-dear-cat" class="headerlink" title="A very dear cat"></a>A very dear cat</h2><blockquote>
<p>Kidnappers are rarely interested in animals, but they recently took considerable interest in Mrs. Eleanor Ramsay’s cat. Mrs. Eleanor Ramsay, a very wealthy old lady, has shared a flat with her cat, Rastus, for a great many years. Rastus leads an orderly life. He usually takes a short walk in the evenings and is always home by seven o’clock. One evening, however, he failed to arrive. Mrs. Ramsay got very worried. She looked everywhere for him but could not find him.<br>Three days after Rastus’ disappearance, Mrs. Ramsay received an anonymous letter. The writer stated that Rastus was in safe hands and would be returned immediately if Mrs. Ramsay paid a ransom of $1,000. Mrs. Ramsay was instructed to place the money in a cardboard box and to leave it outside her door. At first she decided to go to the police, but fearing that she would never see Rastus again – the letter had made that quite clear – she changed her mind. She withdrew $1000 from her bank and followed the kidnapper’s instructions. The next morning, the box had disappeared but Mrs. Ramsay was sure that the kidnapper would keep his word. Sure enough, Rastus arrived punctually at seven o’clock that evening. He looked very well though he was rather thirsty, for he drank half a bottle of milk. The police were astounded when Mrs. Ramsay told them what she had done. She explained that Rastus was very dear to her. Considering the amount she paid, he was dear in more ways than one!</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>绑架者很少对动物感兴趣。最近，绑架者却盯上了埃莉诺·拉姆齐太太的猫。埃莉诺·拉姆齐太太是一个非常富有的老妇人，多年来，一直同她养的猫拉斯一起住在一所公寓里。拉斯特斯生活很有规律，傍晚常常出去溜达一会儿，并且总是在7点钟以前回来。可是，有一天晚上，它出去后再也没回来。拉姆齐太太急坏了，四处寻找，但没有找着。<br>拉斯特斯失踪3天后，拉姆齐太太收到一封匿名信。写信人声称拉斯特斯安然无恙，只要拉姆齐太太愿意支付1,000 英镑赎金，可以立即将猫送还。他让拉姆齐太太把钱放在一个纸盒里，然后将纸盒放在门口。一开始拉姆齐太太打算报告警察，但又害怕再也见不到拉斯特斯——这点，信上说得十分明白——于是便改变了主意。她从银行取出1,000 英镑，并照绑架者的要求做了。第二天早晨，放钱的盒子不见了。但拉姆齐太太确信绑架者是会履行诺言的。果然，当天晚上7点正，拉斯特斯准时回来了。它看上去一切正常，只是口渴得很，喝了半瓶牛奶。拉姆齐太太把她所做的事告诉了警察，警察听后大为吃惊。拉姆齐太太解释说她心疼她的猫拉斯特斯。想到她所花的那笔钱，她的心疼就具有双重意义了。</p>
</blockquote>
<h2 id="Pioneer-pilots"><a href="#Pioneer-pilots" class="headerlink" title="Pioneer pilots"></a>Pioneer pilots</h2><blockquote>
<p>In 1908 Lord Northcliffe offered a prize of $1,000 to the first man who would fly across the English Channel. Over a year passed before the first attempt was made. On July 19th, 1909, in the early morning, Hubert Latham took off from the French coast in his plane the ‘Antoinette IV.’ He had travelled only seven miles across the Channel when his engine failed and he was forced to land on sea. The ‘Antoinette’ floated on the water until Latham was picked up by a ship.<br>Two days alter, Louis Bleriot arrived near Calais with a plane called ‘No. XI’. Bleriot had been making planes since 1905 and this was his latest model. A week before, he had completed a successful overland flight during which he covered twenty-six miles. Latham, however, did not give up easily. He, too, arrived near Calais on the same day with a new ‘Antoinette’. It looked as if there would be an exciting race across the Channel. Both planes were going to take off on July 25th, but Latham failed to get up early enough, After making a short test flight at 4,15 a.m., Bleriot set off half an hour later. His great flight lasted thirty-seven minutes. When he landed near Dover, the first person to greet him was a local policeman. Latham made another attempt a week later and got within half a mile of Dover, but he was unlucky again. His engine failed and he landed on the sea for the second time.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>1908年，诺斯克利夫勋爵拿出1,000英镑，作为对第一个飞越英吉利海峡的人的奖励。然而一年多过去了才有人出来尝试。1909年7月19日凌晨，休伯特.莱瑟姆驾驶“安特瓦特4号”飞机从法国海岸起飞，但他只在海峡上空飞行7英里，引擎就发生了故障，他只好降落在海面上。“安特瓦特”号飞机在海上漂浮，后来有船经过，莱瑟姆方才获救。<br>两天之后，路易斯.布莱里奥驾驶一名为“11号”的飞机来到加来附近。布莱里奥从1905年起便开始研制飞机，“11号”飞机是他制作的最新型号。一周以前，他曾成功地进行了一次26英里的陆上飞行。但是莱瑟姆不肯轻易罢休。同一天，他驾驶一架新的“安特瓦特”号飞机来到了加来附近。看来会有一场激烈的飞越英吉利海峡的竞争。两天飞机都打算在7月25日起飞，但莱瑟姆那天起床晚了。布莱里奥凌晨4点15分作了一次短距离试飞，半小时后便正式出发了。他这次伟大的飞行持续37分钟。当他在多佛着陆后，第一个迎接他的是当地一名警察。莱瑟姆一周以后也作了一次尝试，飞到离多佛不到半英里的地方。这次他又遭厄运，因引擎故障第二次降落在海面上。</p>
</blockquote>
<h2 id="Daniel-Mendoza"><a href="#Daniel-Mendoza" class="headerlink" title="Daniel Mendoza"></a>Daniel Mendoza</h2><blockquote>
<p>Boxing matches were very popular in England two hundred years ago. In those days, boxers fought with bare fists for prize money. Because of this, they were known as ‘prizefighters’. However, boxing was very crude, for these were no rules and a prizefighter could be seriously injured or even killed during a match.<br>One of the most colourful figures in boxing history was Daniel Mendoza, who was born in 1764. The use of gloves was not introduced until 1860, when the Marquis of Queensberry drew up the first set of rules. Though he was technically a prizefighter, Mendoza did much to change crude prizefighting into a sport, for he brought science to the game. In this day, Mendoza enjoyed tremendous popularity. He was adored by rich and poor alike.<br>Mendoza rose to fame swiftly after a boxing match when he was only fourteen years old. This attracted the attention of Richard Humphries who was then the most eminent boxer in England. He offered to train Mendoza and his young pupil was quick to learn. In fact, Mendoza soon became so successful that Humphries turned against him. The two men quarrelled bitterly and it was clear that the argument could only be settled by a fight. A match was held at Stilton, where both men fought for an hour. The public bet a great deal of money on Mendoza, but he was defeated. Mendoza met Humphries in the ring on a later occasion and he lost for a second time. It was not until his third match in 1790 that he finally beat Humphries and became Champion of England. Meanwhile, he founded a highly successful Academy and even Lord Byron became one of his pupils. He earned enormous sums of money and was paid as much as $100 for a single appearence. Despite this, he was so extravagant that he was always in debt. After he was defeated by a boxer called Gentleman Jackson, he was quickly forgotten. He was sent to prison for failing to pay his debt and died in poverty in 1836.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>两百年前，拳击比赛在英国非常盛行。当时，拳击手们不戴手套，为争夺奖金而搏斗。因此，他们被称作“职业拳击手”。不过，拳击是十分野蛮的，因为当时没有任何比赛规则，职业拳击手有可能在比赛中受重伤，甚至丧命。<br>拳击史上最引人注目的人物之一是丹尼尔.门多萨，他生于1764年。1860年昆斯伯里侯爵第一次为拳击比赛制定了规则，拳击比赛这才用上了手套。虽然门多萨严格来讲不过是个职业拳击手，但在把这种粗野的拳击变成一种体育运动方面，他作出了重大贡献。是他把科学引进了这项运动。门多萨在的全盛时期深受大家欢迎，无论是富人还是穷人都对他祟拜备至。<br>门多萨在14岁时参加一场拳击赛后一举成名。这引起当时英国拳坛名将理查德汉弗莱斯的注意。他主动提出教授门多萨，而年少的门多萨一学就会。事实上，门多萨不久便名声大振，致使汉弗莱斯与他反目为敌。两个人争吵不休，显而易见，只有较量一番才能解决问题。于是两人在斯蒂尔顿设下赛场，厮打了一个小时。公众把大笔赌注下到了门多萨身上，但他却输了。后来，门多萨与汉弗莱斯再次在拳击场上较量，门多萨又输了一场。直到1790年他们第3次对垒，门多萨才终于击败汉弗莱斯，成了全英拳击冠军。同时，他建立了一所拳击学校，办得很成功，连拜伦勋爵也成了他的学生。门多萨挣来大笔大笔的钱，一次出场费就多可达100英镑。尽管收入不少，但他挥霍无度，经常债台高筑。他在被一个叫杰克逊绅士的拳击手击败后很快被遗忘。他因无力还债而被捕入狱，最后于1836年在贫困中死去。</p>
</blockquote>
<h2 id="By-heart"><a href="#By-heart" class="headerlink" title="By heart"></a>By heart</h2><blockquote>
<p>Some plays are so successful that they run for years on end, In many ways, this is unfortunate for the poor actors who are required to go on repeating the same lines night after night. One would expect them to know their parts by heart and never have cause to falter. Yet this is not always the case.<br>A famous actor in a highly successful play was once cast in the role of an aristocrat who had been imprisoned in the Bastille for twenty years. In the last act, a gaoler would always come on to the stage with a letter which he would hand to the prisoner. Even though the noble was expected to read the letter at each performance, he always insisted that it should be written out in full.<br>One night, the gaoler decided to play a joke on his colleague to find out if, after so many performances, he had managed to learn the contents of the letter by heart. The curtain went up on the final act of the play and revealed the aristocrat sitting alone behind bars in his dark cell. Just then, the gaoler appeared with the precious letter in his hands. He entered the cell and presented the letter to the aristocrat. But the copy he gave him had not been written out in full as usual. It was simply a blank sheet of paper. The gaoler looked on eagerly, anxious to see if his fellow actor had at last learnt his lines. The noble stared at the blank sheet of paper for a few seconds.<br>Then, squinting his eyes, he said: ‘The light is dim. Read the letter to me’. And he promptly handed the sheet of paper to the gaoler. Finding that he could not remember a word of the letter either, the gaoler replied: ‘The light is indeed dim, sire, I must get my glasses.’ With this, he hurried off the stage. Much to the aristocrat’s amusement, the gaoler returned a few moments later with a pair of glasses and the usual copy of the letter with he proceeded to read to the prisoner.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>有些剧目十分成功，以致连续上演好几年。这样一来，可怜的演员们可倒霉了。因为他们需要一夜连着一夜地重复同样的台词。人们以为，这些演员一定会把台词背得烂熟，绝不会临场结巴的，但情况却并不总是这样。<br>有一位名演员曾在一出极为成功的剧目中扮演一个贵族角色，这个贵族已在巴士底狱被关押了20年。在最后一幕中，狱卒手持一封信上场，然后将信交给狱中那位贵族。尽管那个贵族每场戏都得念一遍那封信。但他还是坚持要求将信的全文写在信纸上。<br>一天晚上，狱卒决定与他的同事开一个玩笑，看看他反复演出这么多场之后，是否已将信的内容记熟了。大幕拉开，最后一幕戏开演，贵族独自一人坐在铁窗后阴暗的牢房里。这时狱卒上场，手里拿着那封珍贵的信。狱卒走进牢房，将信交给贵族。但这回狱卒给贵族的信没有像往常那样把全文写全，而是一张白纸。狱卒热切地观察着，急于想了解他的同事是否记熟了台词。贵族盯着纸看了几秒钟，然后，眼珠一转，说道：“光线太暗，请给我读一下这封信。”说完，他一下子把信递给狱卒。狱卒发现自己连一个字也记不住，于是便说：“陛下，这儿光线的确太暗了，我得去把眼镜拿来。”他一边说着，一边匆匆下台。贵族感到非常好笑的是：一会儿工夫，狱卒重新登台，拿来一副眼镜以及平时使用的那封信，然后为那囚犯念了起来。</p>
</blockquote>
<h2 id="One-man’s-meat-is-another-man’s-poison"><a href="#One-man’s-meat-is-another-man’s-poison" class="headerlink" title="One man’s meat is another man’s poison"></a>One man’s meat is another man’s poison</h2><blockquote>
<p>People become quite illogical when they try to decide what can be eaten and what cannot be eaten. If you lived in the Mediterranean, for instance, you would consider octopus a great delicacy. You would not be able to understand why some people find it repulsive. On the other hand, your stomach would turn at the idea of frying potatoes in animal fat – the normally accepted practice in many northern countries. The sad truth is that most of us have been brought up to eat certain foods and we stick to them all our lives.<br>No creature has received more praise and abuse than the common garden snail. Cooked in wine, snails are a great luxury in various parts of the world. There are countless people who, ever since their early years, have learned to associate snails with food. My friend, Robert, lives in a country where snails are despised. As his flat is in a large town, he has no garden of his own. For years he has been asking me to collect snails from my garden and take them to him. The idea never appealed to me very much, but one day, after a heavy shower, I happened to be walking in my garden when I noticed a huge number of snails taking a stroll on some of my prize plants. Acting on a sudden impulse, I collected several dozen, put them in a paper bag, and took them to Robert. Robert was delighted to see me and equally pleased with my little gift. I left the bag in the hall and Robert and I went into the living room where we talked for a couple of hours. I had forgotten all about the snails when Robert suddenly said that I must stay to dinner. Snails would, of course, be the main dish. I did not fancy the idea and I reluctantly followed Robert out of the room. To our dismay, we saw that there were snails everywhere: they had escaped from the paper bag and had taken complete possession of the hall! I have never been able to look at a snail since then.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>在决定什么能吃而什么不能吃的时候，人们往往变得不合情理。比如，如果你住在地中海地区，你会把章鱼视作是美味佳肴，同时不能理解为什么有人一见章鱼就恶心。另一方面，你一想到动物油炸土豆就会反胃，但这在北方许多国家却是一种普通的烹任方法。不无遗憾的是，我们中的大部分人，生来就只吃某几种食品，而且一辈子都这样。<br>没有一种生物所受到的赞美和厌恶会超过花园里常见的蜗牛了。蜗牛加酒烧煮后，便成了世界上许多地方的一道珍奇的名菜。有不计其数的人们从小就知道蜗牛可做菜。但我的朋友罗伯特却住在一个厌恶蜗牛的国家中。他住在大城市里的一所公寓里，没有自己的花园。多年来，他一直让我把我园子里的蜗牛收集起来给他捎去。一开始，他的这一想法没有引起我多大兴趣。后来有一天，一场大雨后，我在花园里漫无目的散步，突然注意到许许多多蜗牛在我的一些心爱的花木上慢悠悠的蠕动着。我一时冲动，逮了几十只，装进一只纸袋里，带着去找罗伯特。罗伯特见到我很高兴，对我的薄礼也感到满意。我把纸袋放在门厅里，与罗伯特一起进了起居室，在那里聊了好几个钟头。我把蜗牛的事已忘得一干二净，罗伯特突然提出一定要我留下来吃晚饭，这才提醒了我。蜗牛当然是道主菜。我并不喜欢这个主意，所以我勉强跟着罗伯特走进了起居室。使我们惊愕的是门厅里到处爬满了蜗牛：它们从纸袋里逃了出来，爬得满厅都是!从那以后，我再也不能看一眼蜗牛了。</p>
</blockquote>
<h2 id="A-skeleton-in-the-cupboard"><a href="#A-skeleton-in-the-cupboard" class="headerlink" title="A skeleton in the cupboard"></a>A skeleton in the cupboard</h2><blockquote>
<p>We often read in novels how a seemingly respectable person or family has some terrible secret which has been concealed from strangers for years. The English language possesses a vivid saying to describe this sort of situation. The terrible secret is called ‘a skeleton in the cupboard’. At some dramatic moment in the story, the terrible secret becomes known and a reputation is ruined. The reader’s hair stands on end when he reads in the final pages of the novel that the heroine a dear old lady who had always been so kind to everybody, had, in her youth, poisoned every one of her five husbands.<br>It is all very well for such things to occur in fiction. To varying degrees, we all have secrets which we do not want even our closest friends to learn, but few of us have skeletons in the cupboard. The only person I know who has a skeleton in the cupboard is George Carlton, and he is very pound of the fact. George studied medicine in his youth. Instead of becoming a doctor, however, he became a successful writer of detective stories. I once spend an uncomfortable weekend which I shall never forget at his house. George showed me to the guestroom which, he said, was rarely used. He told me to unpack my things and then come down to dinner. After I had stacked my shirts and underclothes in two empty drawers, I decided to hang one of the tow suits I had brought with me in the cupboard. I opened the cupboard door and then stood in front of two suits I had brought with me in the cupboard. I opened the cupboard door and then stood in front of it suits I had brought with me in the cupboard. I opened the cupboard door and then stood in front of it petrified. A skeleton was dangling before my eyes. The sudden movement of the door made it sway slightly and it gave me the impression that it was about to leap out at me. Dropping my suit, I dashed downstairs to tell George. This was worse than “a terrible secret’; this was a real skeleton! But George was unsympathetic. ‘Oh, that,’ he said with a smile as if he were talking about an old friend. ‘That’s Sebastian. You forget that I was a medical student once upon a time.’</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>在小说中，我们经常读到一个表面上受人尊重的人物或家庭，却有着某种多年不为人所知的骇人听闻的秘密。英语中有一个生动的说法来形容这种情况。惊人的秘密称作“柜中骷髅”。在小说的某个戏剧性时刻，可怕的秘密泄漏出来，接着便是某人的声誉扫地。当读者到小说最后几页了解到书中女主人公，那位一向待大家很好的可爱的老妇人年轻时一连毒死了她的5个丈夫时，不禁会毛骨悚然。<br>这种事发生在小说中是无可非议的。尽管我们人人都有各种大小秘密。连最亲密的朋友都不愿让他们知道， 但我们当中极少有人有柜中骷髅。我所认识的唯一的在柜中藏骷嵝的人便是乔治.卡尔顿，他甚至引以为自豪。乔治年轻时学过医，然而，他后来没当上医生，却成了一位成功的侦探小说作家。有一次，我在他家里度周末，过得很不愉快。这事我永远不会忘记。乔治把我领进客房，说这间很少使用。他让我打开行装后下楼吃饭。我将衬衫、内衣放进两个空抽屉里，然后我想把随身带来的两套西服中的一套挂到大衣柜里去。我打开柜门，站在柜门前一下惊呆了。一具骷髅悬挂在眼前，由于柜门突然打开，它也随之轻微摇晃起来，让我觉得它好像马上要跳出柜门朝我扑过来似的。我扔下西服冲下楼去告诉乔治。这是比“骇人听闻的秘密”更加惊人的东西，这是一具真正的骷髅啊!但乔治却无动于衷。“噢，是它呀!他笑着说道，俨然在谈论一位老朋友。“那是塞巴斯蒂安。你忘了我以前是学医的了。”</p>
</blockquote>
<h2 id="The-Cutty-Sark"><a href="#The-Cutty-Sark" class="headerlink" title="The Cutty Sark"></a>The Cutty Sark</h2><blockquote>
<p>One of the most famous sailing ships of the nineteenth century, the Cutty Sark, can still be seen at Greewich. She stands on dry land and is visited by thousands of people each year. She serves as an impressive reminder of the great ships of past. Before they were replaced by steamships, sailing vessels like the Cutty Sark were used to carry tea from China and wool from Australia. The Cutty Sark was one the fastest sailing ships that has ever been built. The only other ship to match her was the Thermopylae. Both these ships set out from Shanghai on June 18th, 1872 on an exciting race to England. This race, which went on for exactly four exactly four months, was the last of its kind. It marked the end of the great tradition of ships with sails and the beginning of a new era.<br>The first of the two ships to reach Java after the race had begun was the Thermopylae, but on the Indian Ocean, the Cutty Sark took lead. It seemed certain that she would be the first ship home, but during the race she had a lot of bad luck. In August, she was struck by a very heavy storm during which her rudder was torn away. The Cutty Sark rolled from side to side and it became impossible to steer her. A temporary rudder was made on board from spare planks and it was fitted with great difficulty. This greatly reduced the speed of the ship, for there was a danger that if she traveled too quickly, this rudder would be torn away as well. Because of this, the Cutty Sark lost her lead. After crossing the Equator, the captain called in at a port to have a new rudder fitted, but by now the Thermopylae was over five hundred miles ahead. Though the new rudder was fitted at tremendous speed, it was impossible for the Cutty Sark to win. She arrived in England a week after the Thermopylae. Even this was remarkable, considering that she had had so many delays. These is no doubt that if she had not lost her rudder she would have won the race easily.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>人们在格林威治仍可看到19世纪最有名的帆船之一“卡蒂萨克”号。它停在陆地上，每年接待成千上万的参观者。它给人们留下深刻的印象，使人们回忆起历史上的巨型帆船，在蒸汽船取代帆船之前。“卡蒂萨克”号之类的帆船被用来从中国运回茶叶，从澳大利亚运回羊毛。“卡蒂萨克”号是帆船制造史上建造的最快的一艘帆船。唯一可以与之一比高低的是“塞姆皮雷”号帆船。两船于1872年6月18日同时从上海启航驶往英国，途中展开了一场激烈的比赛。这场比赛持续了整整4个月，是这类比赛中的最后一次，它标志着帆船伟大传统的结束与一个新纪元的开始。<br>比赛开始后，“赛姆皮雷”号率先抵达爪哇岛。但在印度洋上，“卡萨萨克”号驶到了前面。看来，它首先返抵英国是确信无疑的了，但它却在比赛中连遭厄运。8月份“卡蒂萨克”号遭到一场特大风暴的袭击，失去了一只舵。船身左右摇晃，无法操纵。船员用备用的木板在船上赶制了一只应急用的舵，并克服重重困难将舵安装就位，这样一来，大大降低了船的航速。因为船不能开得太快，否则就有危险，应急舵也会被刮走。因为这个缘故，“卡蒂萨克”号落到了后面。跨越赤道后，船长将船停靠在一个港口，在那儿换了一只舵。但此时，“赛姆皮雷”号早已在500多英里之遥了。尽管换装新舵时分秒必争，但“卡蒂萨克”号已经不可能取胜了，它抵达英国时比“塞姆皮雷”号晚了1个星期。但考虑到路上的多次耽搁，这个成绩也已很不容易了。毫无疑问，如果中途没有失去舵，“卡帝萨克”号肯定能在比赛中轻易夺冠。</p>
</blockquote>
<h2 id="Wanted-a-large-biscuit-tin"><a href="#Wanted-a-large-biscuit-tin" class="headerlink" title="Wanted: a large biscuit tin"></a>Wanted: a large biscuit tin</h2><blockquote>
<p>No one can avoid being influenced by advertisements. Much as we may pride ourselves on our good taste, we are no longer free to choose the things we want, for advertising exerts a subtle influence on us. In their efforts to persuade us to buy this or that product, advertisers have made a close study of human nature and have classified all our little weaknesses.<br>Advertisers discovered years ago that all of us love to get something for nothing. An advertisement which begins with the magic word FREE can rarely go wrong. These days, advertisers not only offer free samples, but free cars, free houses, and free trips round the world as well. They devise hundreds of competitions which will enable us to win huge sums of money. Radio and television have made it possible for advertisers to capture the attention of millions of people in this way.<br>During a radio programme, a company of biscuit manufacturers once asked listeners to bake biscuits and send them to their factory. They offered to pay $10 a pound for the biggest biscuit baked by a listener. The response to this competition was tremendous. Before long, biscuits of all shapes and sizes began arriving at the factory. One lady brought in a biscuit on a wheelbarrow. It weighed nearly 500 pounds. A little later, a man came along with a biscuit which occupied the whole boot of his car. All the biscuits that were sent were carefully weighed. The largest was 713 pounds. It seemed certain that this would win the prize. But just before the competition closed, a lorry arrived at the factory with a truly colossal biscuit which weighed 2,400 pounds. It had been baked by a college student who had used over 1,000 pounds of flour, 800 pounds of sugar, 200 pounds of fat, and 400 pounds of various other ingredients. It was so heavy that a crane had to be used to remove it from the lorry. The manufacturers had to pay more money than they had anticipated, or they bought the biscuit from the student for $24,000.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>没有人能避免受广告的影响。尽管我们可以自夸自己的鉴赏力如何敏锐，但我们已经无法独立自主地选购自己所需的东西了。这是因为广告在我们身上施加着一种潜移默化的影响。做广告的人在力图劝说我们买下这种产品或那种产品之前，已经仔细地研究了人的本性，并把人的弱点进行了分类。<br>做广告的人们多年前就发现我们大家都喜欢免费得到东西。凡是用“免费”这个神奇的词开头的广告很少会失败的。目前，做广告的人不仅提供免费样品，而且还提供免费汽车，免费住房，免费周游世界。他们设计数以百计的竞赛，竞赛中有人可赢得巨额奖金。电台、电视使做广告的人可以用这种手段吸引成百万人的注意力。<br>有一次，在电台播放的节目里，一个生产饼干的公司请听众烘制饼干送到他们的工厂去。他们愿意以每磅10美元的价钱买下由听众烘制的最大的饼干。这次竞赛在听众中引起极其热烈的反响。不久，形状各异，大小不一的饼干陆续送到工厂。一位女士用手推车运来一个饼干，重达500磅左右。相隔不一会儿，一个男子也带来一个大饼干，那个饼干把汽车的行李箱挤得满满的。凡送来的饼干都仔细地称量。最重的一个达713磅，看来这个饼干获奖无疑了。但就在竞赛截止时间将到之际，一辆卡车驶进了工厂，运来了一个特大无比、重达2,400磅的饼干。它是由一个大学生烘制的，用去1,000多磅的面粉、800磅食糖、200磅动物脂肪及400磅其他各种原料。饼干份量太重了，用了一台起重机才把它从卡车上卸下。饼干公司不得不付出比他们预计多得多的钱，因为为买下那学生烘制的饼干他们支付了24,000美元。</p>
</blockquote>
<h2 id="Nothing-to-sell-and-nothing-to-buy"><a href="#Nothing-to-sell-and-nothing-to-buy" class="headerlink" title="Nothing to sell and nothing to buy"></a>Nothing to sell and nothing to buy</h2><blockquote>
<p>It has been said that everyone lives by selling something. In the light of this statement, teachers live by selling knowledge, philosophers by selling wisdom and priests by selling spiritual comfort. Though it may be possible to measure the value of material good in terms of money, it is extremely difficult to estimate the true value of the services which people perform for us. There are times when we would willingly give everything we possess to save our lives, yet we might grudge paying a surgeon a high fee for offering us precisely this service. The conditions of society are such that skills have to be paid for in the same way that goods are paid for at a shop. Everyone has something to sell.<br>Tramps seem to be the only exception to this general rule. Beggars almost sell themselves as human being to arouse the pity of passers-by. But real tramps are not beggars. They have nothing to sell and require nothing from others. In seeking independence, they do not sacrifice their human dignity. A tramp may ask you for money, but he will never ask you to feel sorry for him. He has deliberately chosen to lead the life he leads and is fully aware of the consequences. He may never be sure where the next meal is coming from, but his is free from the thousands of anxieties which afflict other people. His few material possessions make it possible for him to move from place to place with ease. By having to sleep in the open, he gets far closer to the world of nature than most of us ever do. He may hunt, beg, or stead occasionally to keep himself alive; he may even, in times of real need, do a little work; but he will never sacrifice his freedom. We often speak of my even, in times of real need, do a little work; but he will never sacrifice his freedom. We often speak of tramps with contempt and put them in the same class as beggars, but how many of us can honestly say that we have not felt a little envious of their simple way of life and their freedom from care?</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>据说每个人都靠出售某种东西来维持生活。根据这种说法，教师靠卖知识为生，哲学家靠卖智慧为生，牧师靠卖精神安慰为生。虽然物质产品的价值可以用金钱来衡量，但要估算别人为我们为所提供的服务的价值却是极其困难的。有时，我们为了挽救生命，愿意付出我们所占有的一切。但就在外科大夫给我们提供了这种服务后，我们却可能为所支付的昂贵的费用而抱怨。社会上的情况就是如此，技术是必须付钱去买的，就像在商店里要花钱买商品一样。人人都有东西可以出售。<br>在这条普遍的规律前面，好像只有流浪汉是个例外，乞丐出售的几乎是他本人，以引起过路人的怜悯。但真正的流浪并不是乞丐。他们既不出售任何东西，也不需要从别人那儿得到任何东西，在追求独立自由的同时，他们并不牺牲为人的尊严。游浪汉可能会向你讨钱，但他从来不要你可怜他。他是故意在选择过那种生活的，并完全清楚以这种方式生活的后果。他可能从不知道下顿饭有无着落，但他不像有人那样被千万桩愁事所折磨。他几乎没有什么财产，这使他能够轻松自如地在各地奔波。由于被迫在露天睡觉，他比我们中许多人都离大自然近得多。为了生存，他可能会去打猎、乞讨，偶尔偷上一两回;确实需要的时候，他甚至可能干一点儿活，但他决不会牺牲自由。说起流浪汉，我们常常带有轻蔑并把他们与乞丐归为一类。但是，我们中有多少人能够坦率地说我们对流浪汉的简朴生活与无忧无虑的境况不感到有些羡慕呢?</p>
</blockquote>
<h2 id="Five-pound-too-dear"><a href="#Five-pound-too-dear" class="headerlink" title="Five pound too dear"></a>Five pound too dear</h2><blockquote>
<p>Small boats loaded with wares sped to the great liner as she was entering the harbour. Before she had anchored, the men from the boats had climbed on board and the decks were soon covered with colourful rugs from Persia, silks from India, copper coffee pots, and beautiful handmade silverware. It was difficult not to be tempted. Many of the tourists on board had begun bargaining with the tradesmen, but I decide not to buy anything until I had disembarked.<br>I had no sooner got off the ship than I was assailed by a man who wanted to sell me a diamond ring. I had no intention of buying one, but I could not conceal the fact that I was impressed by the size of the diamonds. Some of them were as big as marbles. The man went to great lengths to prove that the diamonds were real. As we were walking past a shop, he held a diamond firmly against the window and made a deep impression in the glass. It took me over half an hour to get rid of him.<br>The next man to approach me was selling expensive pens and watches. I examined one of the pens closely. It certainly looked genuine. At the base of the gold cap, the words ‘made in the U.S.A’ had been nearly inscribed. The man said that the pen was worth $50, but as a special favour, he would let me have it for $30. I shook my head and held up five fingers indicating that I was willing to pay $5. Gesticulating wildly, the man acted as if he found my offer outrageous, but he eventually reduced the price to $10. Shrugging my shoulders, I began to walk away when, a moment later, he ran after me and thrust the pen into my hands. Though he kept throwing up his arms in despair, he readily accepted the $5 I have him. I felt especially pleased with my wonderful bargain – until I got back to the ship. No matter how hard I tried, it was impossible to fill this beautiful pen with ink and to this day it has never written a single world!</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>当一艘大型班船进港的时候，许多小船载着各种杂货快速向客轮驶来。大船还未下锚。小船上的人就纷纷爬上客轮。一会儿工夫，甲板上就摆满了色彩斑斓的波斯地毯。印度丝绸。铜咖啡壶以及手工制作的漂亮的银器。要想不为这些东西所动心是很困难的。船上许多游客开始同商贩讨价还价起来，但我打定主意上岸之前什么也不买。<br>我刚下船，就被一个人截住，他向我兜售一枚钻石戒指。我根本不想买，但我不能掩饰这样一个事实：其钻石之大给我留下了深刻的印象。有的钻石像玻璃球那么大。那人竭力想证明那钻石是真货。我们路过一家商店时，他将一颗钻石使劲地往橱窗上一按，在玻璃上留下一道深痕。我花了半个多小时才摆脱了他的纠缠。<br>向我兜售的第二个人是卖名贵钢笔和手表的。我仔细察看了一枝钢笔，那看上去确实不假，金笔帽下方整齐地刻有“美国制造”字样。那人说那支笔值50英镑，作为特别优惠，他愿意让我出30英镑成交。我摇摇头，伸出5根手指表示我只愿出5镑钱。那人激动地打着手势，仿佛我的出价使他不能容忍。但他终于把价钱降到了10英镑。我耸耸肩膀掉头走开了。一会儿，他突然从后追了上来，把笔塞到我手里。虽然他绝望地举起双手，但他毫不迟疑地收下了我付给他的5镑钱。在回到船上之前，我一直为我的绝妙的讨价还价而洋洋得意。然而不管我如何摆弄，那枝漂亮的钢笔就是吸不进墨水来。直到今天，那枝笔连一个字也没写过!</p>
</blockquote>
<h2 id="Funny-or-not"><a href="#Funny-or-not" class="headerlink" title="Funny or not?"></a>Funny or not?</h2><blockquote>
<p>Whether we find a joke funny or not largely depends on where we have been brought up. The sense of humour is mysteriously bound up with national characteristics. A Frenchman, for instance, might find it hard to laugh at a Russian joke. In the same way, a Russian might fail to see anything amusing in a joke which would make an Englishman laugh to tears.<br>Most funny stories are based on comic situations. In spite of national differences, certain funny situations have a universal appeal. No matter where you live, you would find it difficult not to laugh at, say, Charlie Chaplin’s early films. However, a new type of humour, which stems largely from the U.S., has recently come into fashion. It is called ‘sick humour’. Comedians base their jokes on tragic situation like violent death or serious accidents. Many people find this sort of joke distasteful The following example of ‘sick humour’ will enable you to judge for yourself.<br>A man who had broken his right leg was taken to hospital a few weeks before Christmas. From the moment he arrived there, he kept on pestering his doctor to tell him when he would be able to go home. He dreaded having to spend Christmas in hospital. Though the doctors did his best, the patient’s recovery was slow. On Christmas Day, the man still had his right leg in plaster. He spent a miserable day in bed thinking of all the fun he was missing. The following day, however, the doctor consoled him by telling him that his chances of being able to leave hospital in time for New Year celebrations were good. The good. The man took heart and, sure enough, on New Years’ Eve he was able to hobble along to a party. To compensate for his unpleasant experiences in hospital, the man drank a little more than was good for him. In the process, he enjoyed himself thoroughly and kept telling everybody how much he hated hospitals. He was still mumbling something about hospitals at the end of the party when he slipped on a piece of ice and broke his left leg.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>我们觉得一则笑话是否好笑，很大程度取决于我们是在哪儿长大的。幽默感与民族有着神秘莫测的联系。譬如，法国人听完一则俄国笑话可能很难发笑。同样的道理，一则可以令英国人笑出泪来的笑话，俄国人听了可能觉得没有什么可笑之处。<br>大部分令人发笑的故事都是根据喜剧情节编写的。尽管民族不同，有些滑稽的情节却能产生普遍的效果。比如说，不管你生活在哪里，你看查理·卓别林的早期电影很难不发笑。然而，近来一种新式幽默流行了起来，这种幽默主要来自美国。它被叫作“病态幽默”。喜剧演员根据悲剧情节诸如暴死，重大事故等来编造笑话。许多人认为这种笑话是低级庸俗的。下面是个“病态幽默”的实例，你可据此自己作出判断。<br>圣诞节前几周，某人摔断了右腿被送进医院。从他进医院那一刻时，他就缠住医生，让医生告诉他什么时候能回家。他十分害怕在医院过圣诞。尽管医生竭力医治，但病人恢复缓慢。圣诞节那天，他的右腿还上着石膏，他在床上郁郁不乐地躺了一天，想着他错过的种种欢乐。然而，第二天，医生安慰他说，出院欢度新年的可能性还是很大的，那人听后振作了精神。果然，除夕时他可以一瘸一拐地去参加晚会了。为了补偿住院这一段不愉快的经历，那人喝得稍许多了一点。在晚会上他尽情娱乐，一再告诉大家他是多么讨厌医院。晚会结束时，他嘴里还在嘟哝着医院的事，突然踩到一块冰上滑倒了，摔断了左腿。</p>
</blockquote>
<h2 id="The-death-of-a-ghost"><a href="#The-death-of-a-ghost" class="headerlink" title="The death of a ghost"></a>The death of a ghost</h2><blockquote>
<p>For years, villagers believed that Endley Farm was haunted. The farm was owned by two brothers, Joe and Bob Cox. They employed a few farmhands, but no one was willing to work there long. Every time a worker gave up his job, he told the same story. Farm labourers said that they always woke up to find that work had been done overnight. Hay had been cut and cowsheds had been cleaned. A farm worker, who stayed up all night, claimed to have seen a figure人 cutting corn in the moonlight. In time, it became an accepted fact that the Cox brothers employed a conscientious ghost that did most of their work for them.<br>No one suspectedthat there might be someone else on the farm who had never been seen. This was indeed the case. A short time ago, villagers were astonished to learn that the ghost of Endley had died. Everyone went to the funeral, for the ‘ghost’ was none other than Eric Cox, a third brother who was supposed to have died as a young man. After the funeral, Joe and Bob revealed a secret which they had kept for over fifty years.<br>Eric had been the eldest son of the family, very much older than his two brothers. He had been obliged to join the army during the Second World War. As he hated army life, he decided to desert his regiment. When he learnt that he would be sent abroad, he returned to the farm and his father hid him until the end of the war. Fearing the authorities, Eric remained in hiding after the war as well. His father told everybody that Eric had been killed in action. The only other people who knew the secret were Joe and Bob. They did not even tell their wives. When their father died, they thought it their duty to keep Eric in hiding. All these years, Eric had lived as a recluse. He used to sleep during the day and work at night, quite unaware of the fact that he had become the ghost of Endley. When he died, however, his borthers found it impossible to keep the secret any longer.</p>
</blockquote>
<p><strong>翻译</strong></p>
<blockquote>
<p>多年来，村民们一直认为恩得利农场在闹鬼。恩得利农场属于乔·考科斯和鲍勃·考科斯兄弟俩所有。他们雇了几个农工，但谁也不愿意在那儿长期工作下去。每次雇工辞职后都叙述着同样的故事。雇工们说，常常一早起来发现有人在夜里把活干了，干草已切好，牛棚也打扫干净了。有一个彻夜未眠的雇工还声称他看见一个人影在月光下收割庄稼。随着时间的流逝，考科斯兄弟雇了一个尽心尽责的鬼，他们家的活大部分都让鬼给干了，这件事成了公认的事实。<br>谁也没想到农场竟会有一个从未露面的人。但事实上确有此人。不久之前，村民们惊悉恩得利农场的鬼死了。大家都去参加了葬礼，因为那“鬼”不是别人，正是农场主的兄弟埃里克.考科斯。人们以为埃里克年轻时就死了。葬礼之后，乔和鲍勃透露了他们保守了长达50多年的秘密。<br>埃里克是这家长子。年龄比他两个弟弟大很多，第二次世界大战期间被迫参军。他讨厌军旅生活，决定逃离所在部队。当他了解自己将被派遣出国时，他逃回农场，父亲把他藏了起来，直到战争结束。由于害怕当局，埃里克战后继续深藏不露。他的父亲告诉大家，埃里克在战争中被打死了。除此之外，只有乔与鲍知道这个秘密。但他俩连自己的妻子都没告诉。父亲死后，他们兄弟俩认为有责任继续把埃里克藏起来。这些年来，埃里克过着隐士生活，白天睡觉，夜里出来干活，一点不知道自己已成了恩得利家场的活鬼。他死后，他的弟弟们才觉得无法再保守这个秘密了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新概念英语第三册前30篇，一定要熟记于心，长语句，语法这些也是可以套用的。&lt;br&gt;
    
    </summary>
    
      <category term="英语" scheme="http://xiaohao890809.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>工作备忘录</title>
    <link href="http://xiaohao890809.github.io/2017/12/02/The-notes-of-work/"/>
    <id>http://xiaohao890809.github.io/2017/12/02/The-notes-of-work/</id>
    <published>2017-12-02T09:52:23.000Z</published>
    <updated>2018-03-21T15:01:53.480Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些工作过程中可能遇到的一些配置，汇总起来作为参考，以便以后使用。<br><a id="more"></a> </p>
<h2 id="requests代理设置"><a href="#requests代理设置" class="headerlink" title="requests代理设置"></a>requests代理设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">my_headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"</span>&#125;</div><div class="line">my_proxies = &#123;</div><div class="line">    <span class="string">'http'</span>:<span class="string">'http://用户名:密码@proxycn2.huawei.com:8080/'</span>,</div><div class="line">    <span class="string">'https'</span>:<span class="string">'https://用户名:密码@proxycn2.huawei.com:8080/'</span></div><div class="line">&#125;</div><div class="line">res = requests.get(<span class="string">'http:www.baidu.com'</span>, headers=my_headers, proxies=my_proxies)</div><div class="line">res.encoding = <span class="string">'utf-8'</span></div><div class="line">print(res.text)</div></pre></td></tr></table></figure>
<h2 id="弹窗验证方案-http验证"><a href="#弹窗验证方案-http验证" class="headerlink" title="弹窗验证方案(http验证)"></a>弹窗验证方案(http验证)</h2><p>首先需要下载 <code>Chromedriver.exe</code> 在 python 安装根目录里</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line"><span class="keyword">import</span> pyperclip</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">user_name = <span class="string">""</span></div><div class="line">user_pwd = <span class="string">""</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(url)</span>:</span></div><div class="line">    driver = webdriver.Chrome()</div><div class="line">    driver.get(url)</div><div class="line">    time.sleep(<span class="number">0.5</span>)</div><div class="line">    pyperclip.copy(user_name)</div><div class="line">    pyautogui.hotkey(<span class="string">'ctrl'</span>,<span class="string">'v'</span>)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    pyperclip.copy(user_pwd)</div><div class="line">    <span class="comment"># keyDown表示按下去</span></div><div class="line">    pyautogui.keyDown(<span class="string">'tab'</span>)</div><div class="line">    pyautogui.hotkey(<span class="string">'ctrl'</span>,<span class="string">'v'</span>)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    pyautogui.keyDown(<span class="string">'enter'</span>)</div><div class="line">    time.sleep(<span class="number">3</span>)</div><div class="line">    <span class="keyword">return</span> driver</div><div class="line"></div><div class="line">driver = log(<span class="string">'http://...'</span>)</div><div class="line"><span class="comment"># 获取网页源代码</span></div><div class="line">print(driver.page_source)</div><div class="line">driver.close()</div></pre></td></tr></table></figure>
<p>还有另外一种方法，更加直接，通过 requests 访问：</p>
<blockquote>
<p>http:账号:密码@网页</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些工作过程中可能遇到的一些配置，汇总起来作为参考，以便以后使用。&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://xiaohao890809.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>保持某些好的习惯</title>
    <link href="http://xiaohao890809.github.io/2017/09/26/Some-good-habits-need-to-insist/"/>
    <id>http://xiaohao890809.github.io/2017/09/26/Some-good-habits-need-to-insist/</id>
    <published>2017-09-26T02:45:23.000Z</published>
    <updated>2017-12-19T15:08:18.702Z</updated>
    
    <content type="html"><![CDATA[<p>优秀是一种习惯，保持一个良好的习惯往往能引导一种健康的生活姿态，现在记录一些自己认为是比较好的一些习惯，自己经常去看看，用于监督和督促自己。<br><a id="more"></a> </p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ol>
<li>一周至少运动两次（跑步，爬山，打球等）</li>
<li>晚上11点半准备看书，然后睡觉</li>
<li>一天至少三大杯水</li>
<li>平时多吃点水果</li>
<li>一个月清理一次房间</li>
<li>晚上睡前刷牙</li>
</ol>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ol>
<li>代码写完后多检查下注释有没有写全，没写的补上，以免以后都不知道自己当初写的啥</li>
<li>LeetCode过三遍</li>
<li>js和go语言了解下</li>
<li>正则表达式多熟悉</li>
</ol>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ol>
<li>每天问一遍自己，想进BAT吗，以你现在的能力能进BAT吗，不能的话哪些地方需要加强呢？</li>
</ol>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ol>
<li>平时多看下面试相关的信息，刷刷题</li>
<li>把跟自己业务相关的数据库表多检查下</li>
</ol>
<h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ol>
<li>熟读新概念英语第三册前30篇</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优秀是一种习惯，保持一个良好的习惯往往能引导一种健康的生活姿态，现在记录一些自己认为是比较好的一些习惯，自己经常去看看，用于监督和督促自己。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://xiaohao890809.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>我的阅读清单</title>
    <link href="http://xiaohao890809.github.io/2017/04/28/The-list-of-my-reading-book/"/>
    <id>http://xiaohao890809.github.io/2017/04/28/The-list-of-my-reading-book/</id>
    <published>2017-04-28T14:47:23.000Z</published>
    <updated>2018-02-26T12:02:40.506Z</updated>
    
    <content type="html"><![CDATA[<p>正所谓人丑就要多读书，杨绛先生曾说过：你的问题主要在于读书不多而想得太多。现在记录一下我阅读的一些书籍，电子书目前主要用 kindle 看，因为不伤眼，技术类的书还是纸质的比较好，但是纸质的书挺贵的。</p>
<blockquote class="blockquote-center"><p><i class="fa fa-thumbs-o-up"></i> 表示好评<br><i class="fa fa-thumbs-o-down"></i> 表示差评</p>
</blockquote>
<a id="more"></a> 
<h2 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h2><ol>
<li><a href="https://book.douban.com/subject/26791407" target="_blank" rel="external">北京折叠</a>，by 郝景芳，2017年2月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/25737043" target="_blank" rel="external">霸王别姬</a>，by 李碧华，2017年3月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/10763902" target="_blank" rel="external">偷影子的人</a>，by 马克·李维，2017年4月</li>
<li><a href="https://book.douban.com/subject/26319003" target="_blank" rel="external">写下你的墓志铭</a>，by 毕淑敏，2017年5月</li>
<li><a href="https://book.douban.com/subject/26861949" target="_blank" rel="external">你要像喜欢甜一样喜欢苦</a>，by 斯蒂芬妮·丹勒，2017年8月</li>
<li><a href="https://book.douban.com/subject/25867688" target="_blank" rel="external">一粒红尘</a>，by 独木舟，2017年9月</li>
<li><a href="https://book.douban.com/subject/4580972" target="_blank" rel="external">流星之绊</a>，by 东野圭吾，2017年9月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/27029890" target="_blank" rel="external">外婆的道歉信</a>，by 弗雷德里克·巴克曼，2017年11月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/26733851" target="_blank" rel="external">月亮与六便士</a>，by 威廉·萨默塞特·毛姆 ，2017年12月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/26745041" target="_blank" rel="external">面纱</a>，by 威廉·萨默塞特·毛姆 ，2017年12月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/2053249" target="_blank" rel="external">麦田里的守望者</a>，by J·D·塞林格 ，2018年2月</li>
</ol>
<h2 id="英语学习"><a href="#英语学习" class="headerlink" title="英语学习"></a>英语学习</h2><ol>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/1400585" target="_blank" rel="external">经典英语谚语赏析</a>，by 祝宝珠，2017年3月</li>
</ol>
<h2 id="个人传记"><a href="#个人传记" class="headerlink" title="个人传记"></a>个人传记</h2><ol>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/6847760" target="_blank" rel="external">随遇而安</a>，by 孟非，2017年3月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/4250782" target="_blank" rel="external">留德十年</a>，by 季羡林，2017年6月</li>
<li><a href="https://book.douban.com/subject/26694904" target="_blank" rel="external">世界很大,幸好有你</a>，by 杨澜，2017年7月</li>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/20424572" target="_blank" rel="external">敢问路在何方</a>，by 杨洁，2017年8月</li>
</ol>
<h2 id="社会"><a href="#社会" class="headerlink" title="社会"></a>社会</h2><ol>
<li><a href="https://book.douban.com/subject/20428922" target="_blank" rel="external">学会提问</a>，by 尼尔·布朗，2017年4月</li>
</ol>
<h2 id="诗歌"><a href="#诗歌" class="headerlink" title="诗歌"></a>诗歌</h2><ol>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/26682576" target="_blank" rel="external">给孩子读诗</a>，by 果麦，2017年6月</li>
</ol>
<h2 id="散文"><a href="#散文" class="headerlink" title="散文"></a>散文</h2><ol>
<li><i class="fa fa-thumbs-o-up"></i> <a href="https://book.douban.com/subject/26974162" target="_blank" rel="external">孤独是生命的礼物</a>，by 林清玄等，2018年1月</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正所谓人丑就要多读书，杨绛先生曾说过：你的问题主要在于读书不多而想得太多。现在记录一下我阅读的一些书籍，电子书目前主要用 kindle 看，因为不伤眼，技术类的书还是纸质的比较好，但是纸质的书挺贵的。&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;i class=&quot;fa fa-thumbs-o-up&quot;&gt;&lt;/i&gt; 表示好评&lt;br&gt;&lt;i class=&quot;fa fa-thumbs-o-down&quot;&gt;&lt;/i&gt; 表示差评&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://xiaohao890809.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="书籍" scheme="http://xiaohao890809.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>记录博客的第一天</title>
    <link href="http://xiaohao890809.github.io/2015/08/14/First-day/"/>
    <id>http://xiaohao890809.github.io/2015/08/14/First-day/</id>
    <published>2015-08-14T14:47:23.000Z</published>
    <updated>2017-12-12T13:39:37.387Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见，大家好！很高兴，今天终于开通了这个博客，这期间也得到了不少网友的帮助。之前在网上找了很多模板，但是选来选去，最终还是定了这个模板，因为这个模板比较简洁，而且也符合我预期的效果。<br><a id="more"></a> </p>
<blockquote>
<p>首先要感谢 <code>enml</code>，我是引用了他的模板。</p>
</blockquote>
<p>先把他的模板下载到本地，然后传到自己建立的仓库下就可以进行修改模板了。将一些基本的信息，比如名字，多说的 id 以及一些图标都加以修改即可。刚开始的模板的导航栏上没有留言板和关于我这一栏，我后来自己补上的。之前模板的一个出口的 page 被我删掉了，因为感觉那个功能不太实用。还有原来的评论系统貌似用的是国外的一个系统，我将其改为了多说的评论系统，非常好用！</p>
<blockquote>
<p>其次是感谢 <code>liberize</code> 的帮助</p>
</blockquote>
<p>在他的帮助下，我在评论框的头像加上了炫酷的旋转效果，看起来非常漂亮。只是原作者是圆形的图标，而我这个背景如果用了圆形的头像，会有一个阴影在下面，看起来非常不舒服，于是我改为了方形的效果，默认下的头像旋转是没有阴影的，这一点我至今还是很疑惑。</p>
<blockquote>
<p>再者感谢 tk 域名</p>
</blockquote>
<p>博客搭建好了，但是域名太长，不太方便随时输入。所以也百度了很多资料，看到网上都是说加一个 CNAME 文件，然后把域名加上去，在去域名管理页面加一个 A 地址。折腾了半天也没有成功。最后发现前提应该是自己得有一个 .com 或者 .me 域名，但是我木有。于是乎这条路便走不通了。后来无意间看到 tk 域名的网址，听说进去可以免费注册域名，于是抱着试一试的态度进去了，后来发现其实根本不用那么麻烦，只有把自己的博客地址指向到你要注册的 .tk 域名就 ok 了。省去了很多步骤。而且最后的网页比之前的网页更加完整了，之前没显示出来额头像图标和 github 图标都显示出来了，太惊喜了。只是某些字体不知道怎么回事，还是显示不完美。不过这样已经很满足了。</p>
<blockquote>
<p>最后感谢 <code>liberize</code> 和百度文库的帮助</p>
</blockquote>
<p>模板本来已经弄得差不多了，后来想来想去看了别人的很多模板，都在首页有<strong>分页</strong>的功能（PS：分类和标签是没有这个功能的），于是自己也想加上，所以结合了好几个人的模板，最后把每一个标签换了个颜色，显得不是那么单调。最后文章也要截取部分显示在首页中，这部分调式了好久，最后用了下面这个代码搞定了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post.content | truncate:<span class="number">300</span></div></pre></td></tr></table></figure>
<p>其实就是把中间一部分舍掉了，因为加上中间那一部分的话，是按照文本进行分割的，而我想保留自己原来的格式，于是只取后面一部分就搞定了。当理想的界面出现在 html 上的时候，那个感觉非常好。也许博客到现在格式方面已经差不多了。不过到后面估计还得修改一些小细节，不断地进步才有动力前进！</p>
<p><strong>总结</strong>  </p>
<p><code>github</code> 真是个不错的平台，幸好天朝没有进行封杀，里面的资源和牛人特别多。他们秉着开源的精神，无私地分享了自己得许多经验和代码。所以，学无止境，多学习，多总结肯定是没有错的。</p>
<p>但无论如何，万事开头难，希望自己能够坚持下去，记录生活点滴，同时也写一些技术类的博客，虽然比较菜，但是进步空间比较大，加油，耗子！</p>
<p>另外本博客已经使用 <code>hexo</code> 主题，之前的 <code>jekyll</code> 已经<del>不用了</del>。因为这个框架的主题配置起来比较容易，不用修改很多地方。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不见，大家好！很高兴，今天终于开通了这个博客，这期间也得到了不少网友的帮助。之前在网上找了很多模板，但是选来选去，最终还是定了这个模板，因为这个模板比较简洁，而且也符合我预期的效果。&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://xiaohao890809.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="第一滴血" scheme="http://xiaohao890809.github.io/tags/%E7%AC%AC%E4%B8%80%E6%BB%B4%E8%A1%80/"/>
    
  </entry>
  
</feed>
