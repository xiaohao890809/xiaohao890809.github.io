<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Etiquette&#39;s Blog</title>
  <subtitle>越努力，越幸运！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaohao890809.github.io/"/>
  <updated>2019-01-07T11:57:53.097Z</updated>
  <id>http://xiaohao890809.github.io/</id>
  
  <author>
    <name>追寻原风景</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习基础之概率论</title>
    <link href="http://xiaohao890809.github.io/2018/03/07/The-note-of-probability-theory/"/>
    <id>http://xiaohao890809.github.io/2018/03/07/The-note-of-probability-theory/</id>
    <published>2018-03-07T15:54:23.000Z</published>
    <updated>2019-01-07T11:57:53.097Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习算法中有很多用到概率论知识的地方，比如贝叶斯定理，频繁挖掘，条件概率等，掌握好概率论的基础知识有利于更好的理解机器学习中的相关算法。<br><a id="more"></a> </p>
<p>三箱零件，其中第一箱 10 个零件，第二箱 20 个零件，第三箱 15 个。检验结果表明第一箱有 1 个不合格，第二箱有 3 个不合格，第三箱有 2 个不合格，从中抽取一个零件，合格的概率有多少？</p>
<blockquote>
<p>记 $A_i$ 为从第 $i$ 个箱子拿的零件，拿到正品的事件记为B。<br>$$<br>\begin{align}<br>P(B)&amp;=P(A_1)\cdot P(B|A_1)+P(A_2)\cdot P(B|A_2)+P(A_3)\cdot P(B|A_3)\\<br>&amp;=P(A_1)+P(A_2)\cdot P(B|A_2)+P(A_3)\cdot P(B|A_3)\\<br>&amp;=\frac{1}{3}\cdot \frac{9}{10}+\frac{1}{3}\cdot \frac{17}{20}+\frac{1}{3}\cdot \frac{13}{15}\\<br>&amp;=0.872<br>\end{align}<br>$$问题：求逆向概率$P(A_{1}|B)$，抽到的这个合格品来自箱子 $A_{1}$ 的概率。<br>$$<br>\begin{align}<br>P(A_{1}|B)&amp;=\frac{P(A_1\cdot B)}{P(B)}\\<br>&amp;=\frac{P(A_1)\cdot P(B|A_1)}{P(B)}\\<br>&amp;=\frac{\frac{1}{3}\cdot \frac{9}{10}}{P(B)}\\<br>&amp;=\frac{0.3}{0.872}=0.344<br>\end{align}<br>$$</p>
</blockquote>
<p>注意条件概率 $P(B|A_1)$ 和联合概率 $P(A_1\cdot B)$ 的使用。</p>
<p><strong>分类问题概述：</strong><br>通过对已知类别信息的数据进行学习后获得分类模型(classifier)，利用分类模型对未知类别信息的数据进行分类(classification)。</p>
<h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><p>分类算法举例——朴素贝叶斯(Naive Bayesian Model, NBM)</p>
<p>$$\begin{cases}<br>P(C_i|X)=\frac{P(X|C_i)\cdot P(C_i)}{P(X)}\\<br>P(X|C_i)=\prod_{K=1}^{n}P(X_k|C_i)\\<br>P(AB)=P(A)\cdot P(B)\\<br>\end{cases}<br>$$</p>
<ul>
<li>$P(C_i|X)$: 后验概率</li>
<li>$P(X|C_i)$: 条件概率</li>
<li>$P(C_i)$: 最大似然估计</li>
</ul>
<p>通过数据元组的各个属性表示(值)，计算出该数据元素属于$C_i$的概率。<br>根据贝叶斯定理，将已知各属性表示求所属后验概率的问题转为已知所属类各属性表示组合的条件概率的问题。</p>
<p>需要对已标记类别的训练样本进行统计分析。<br>对样本库数据计算各类的最大似然用以估计各类的先验概率。<br>计算各属性值的条件概率。<br>假设各属性间相互独立。</p>
<table>
<thead>
<tr>
<th style="text-align:center">ID</th>
<th style="text-align:center">age</th>
<th style="text-align:center">income</th>
<th style="text-align:center">student</th>
<th style="text-align:center">credit</th>
<th style="text-align:center">class:buy</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">high</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">high</td>
<td style="text-align:center">no</td>
<td style="text-align:center">excellent</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">high</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">low</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">youth</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">high</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">fair</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">senior</td>
<td style="text-align:center">medium</td>
<td style="text-align:center">no</td>
<td style="text-align:center">excelent</td>
<td style="text-align:center">no</td>
</tr>
</tbody>
</table>
<p>样本库中各类数据的先验概率：<br>$$<br>\begin{align}<br>&amp;P(buy=yes)=\frac{9}{14}=0.643\\<br>&amp;P(buy=no)=\frac{5}{14}=0.357<br>\end{align}<br>$$</p>
<p>每一项属性值的条件概率：<br>$$<br>\begin{align}<br>&amp;P(age=youth|buy=yes)=\frac{2}{9}=0.222\\<br>&amp;P(age=youth|buy=no)=\frac{3}{5}=0.600\\<br>&amp;P(income=medium|buy=yes)=\frac{4}{9}=0.444\\<br>&amp;P(income=medium|buy=no)=\frac{2}{5}=0.400\\<br>&amp;P(student=yes|buy=yes)=\frac{6}{9}=0.667\\<br>&amp;P(student=yes|buy=no)=\frac{1}{5}=0.200\\<br>&amp;P(credict=fair|buy=yes)=\frac{6}{9}=0.667\\<br>&amp;P(credict=fair|buy=no)=\frac{2}{5}=0.400<br>\end{align}<br>$$</p>
<p>求 $x=(youth,medium,yes,fair)$ 属于哪个类？<br>假设各属性之间相互独立，求得测试数据属性向量的条件该概率：<br>$$<br>\begin{align}<br>P(x|buy=yes)&amp;=P(age=youth|buy=yes)\\<br>&amp;\cdot P(income=medium|buy=yes)\\<br>&amp;\cdot P(student=yes|buy=yes)\\<br>&amp;\cdot P(credit=fair|buy=yes)\\<br>&amp;=0.222\cdot 0.444\cdot 0.667\cdot 0.667\\<br>&amp;=0.044<br>\end{align}<br>$$</p>
<p>同理：<br>$$<br>P(x|buy=no)=0.019<br>$$</p>
<p>选取能使以下公式取值最大的分类：<br>$$<br>P(C_i|x)=\frac{P(x|C_i)\cdot P(C_i)}{P(x)}<br>$$</p>
<p>其中 $P(x)$ 为该特征向量取值的先验概率，始终为常量。<br>$$<br>\begin{align}<br>&amp;P(x|buy=yes)\cdot P(buy=yes)=0.044\cdot 0.643=0.082\\<br>&amp;P(x|buy=no)\cdot P(buy=no)=0.019\cdot 0.357=0.007<br>\end{align}<br>$$<br>所以判定测试数据属于 $buy=yes$类。</p>
<h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><blockquote>
<p>摘自：数据挖掘中决策树的探讨(马秀红)</p>
</blockquote>
<p>某装备维修项目如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">役龄</th>
<th style="text-align:center">价格</th>
<th style="text-align:center">是否关键部件</th>
<th style="text-align:center">可靠性</th>
<th style="text-align:center">是否更换</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">高</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">高</td>
<td style="text-align:center">否</td>
<td style="text-align:center">好</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">高</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">低</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">高</td>
<td style="text-align:center">是</td>
<td style="text-align:center">好</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">低</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">中</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">低</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">是</td>
<td style="text-align:center">好</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">好</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">高</td>
<td style="text-align:center">是</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">中</td>
<td style="text-align:center">否</td>
<td style="text-align:center">好</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>使用信息增益进行属性选择，更新的备件数为$p$，不更新的备件数为$n$，则样本分类的期望信息：</p>
<p>$$<br>\begin{align}<br>I(p,n)&amp;=I(9,5)\\<br>&amp;=-\frac{9}{14}\cdot log_{2}\frac{9}{14}-\frac{5}{14}\cdot log_{2}\frac{5}{14}\\<br>&amp;=0.940<br>\end{align}<br>$$</p>
<p>计算各属性的熵：</p>
<table>
<thead>
<tr>
<th style="text-align:center">役龄</th>
<th style="text-align:center">$P_i$</th>
<th style="text-align:center">$N_i$</th>
<th style="text-align:center">$I(P_i,N_i)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;=10</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">0.971</td>
</tr>
<tr>
<td style="text-align:center">11-20</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0.971</td>
</tr>
<tr>
<td style="text-align:center">&gt;20</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>有役龄划分为子集的熵：</p>
<p>$$<br>\begin{align}<br>E(役龄)&amp;=\frac{5}{14}I(2,3)+\frac{5}{14}I(3,2)+\frac{4}{14}I(4,0)\\<br>&amp;=0.6936<br>\end{align}<br>$$</p>
<p>役龄为属性，具有3个不同取值的信息增益为：</p>
<p>$$<br>Gain(役龄)=I(p,n)-E(役龄)=0.2464<br>$$</p>
<p>同理：</p>
<p>$$<br>\begin{align}<br>&amp;Gain(价格)=0.2098\\<br>&amp;Gain(关键部件)=0.151\\<br>&amp;Gain(可靠性)=0.10194<br>\end{align}<br>$$</p>
<p>因此：<br>$$<br>Gain(可靠性)&lt;Gain(关键部件)&lt;Gain(价格)&lt;Gain(役龄)<br>$$</p>
<p>分类结果如图所示：<br><img src="/images/信息增益.jpg" alt="信息增益" title="信息增益"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习算法中有很多用到概率论知识的地方，比如贝叶斯定理，频繁挖掘，条件概率等，掌握好概率论的基础知识有利于更好的理解机器学习中的相关算法。&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://xiaohao890809.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>VBA知识点总结</title>
    <link href="http://xiaohao890809.github.io/2018/03/01/The-note-of-vba/"/>
    <id>http://xiaohao890809.github.io/2018/03/01/The-note-of-vba/</id>
    <published>2018-03-01T14:53:23.000Z</published>
    <updated>2018-04-18T13:58:43.621Z</updated>
    
    <content type="html"><![CDATA[<p>VBA是一门比较早的语言了，用于处理 Office 办公软件的数据，不过最近听说以后会被 Python 代替（笑脸），现在总结一些使用 VBA 的过程遇到的一些问题以及解决办法。<br><a id="more"></a> </p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><blockquote>
<p>此文件正由应用程序或另一用户使用。</p>
</blockquote>
<p>解决方案：打开后记得做退出关闭操作。</p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Set</span> wdApp = GetObject(,<span class="string">"word.application"</span>)</div><div class="line"><span class="keyword">If</span> wdApp <span class="keyword">is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">   Sef wdApp = CreatObject(<span class="string">"word.application"</span>)</div><div class="line">   wdApp.Visible = <span class="literal">True</span></div><div class="line"><span class="keyword">End</span> <span class="keyword">If</span></div><div class="line">wdApp.NormalTemplate.Saved = <span class="literal">True</span></div><div class="line">wdApp.Quit</div><div class="line"><span class="keyword">Set</span> wdApp = <span class="literal">Nothing</span></div></pre></td></tr></table></figure>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="获取最大有效行数"><a href="#获取最大有效行数" class="headerlink" title="获取最大有效行数"></a>获取最大有效行数</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> GetLastRow(theSheet <span class="keyword">As</span> Worksheet, <span class="keyword">ByVal</span> col <span class="keyword">As</span> <span class="built_in">Integer</span>) <span class="keyword">As</span> <span class="built_in">Integer</span></div><div class="line">  </div><div class="line">   <span class="keyword">Dim</span> findreg <span class="keyword">As</span> Range, ret <span class="keyword">As</span> Range</div><div class="line">   <span class="keyword">Set</span> findreg = theSheet.Columns(col)</div><div class="line">   <span class="keyword">Set</span> ret = findreg.Find(what:=<span class="string">"*"</span>, searchDirection:=xlPrevious)</div><div class="line">   <span class="keyword">If</span> <span class="keyword">Not</span> ret <span class="keyword">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">      GetLastRow = ret.Row</div><div class="line">   <span class="keyword">Else</span></div><div class="line">      GetLastRow = <span class="number">0</span></div><div class="line">   <span class="keyword">End</span> <span class="keyword">If</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h3 id="获取最大有效列数"><a href="#获取最大有效列数" class="headerlink" title="获取最大有效列数"></a>获取最大有效列数</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> GetLastCol(theSheet <span class="keyword">As</span> Worksheet, <span class="keyword">ByVal</span> row <span class="keyword">As</span> <span class="built_in">Integer</span>) <span class="keyword">As</span> <span class="built_in">Integer</span></div><div class="line">  </div><div class="line">   <span class="keyword">Dim</span> findreg <span class="keyword">As</span> Range, ret <span class="keyword">As</span> Range </div><div class="line">   <span class="keyword">Set</span> findreg = theSheet.Rows(row)</div><div class="line">   <span class="keyword">Set</span> ret = findreg.Find(what:=<span class="string">"*"</span>, searchDirection:=xlPrevious)</div><div class="line">   <span class="keyword">If</span> <span class="keyword">Not</span> ret <span class="keyword">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">      GetLastCol = ret.Column</div><div class="line">   <span class="keyword">Else</span></div><div class="line">      GetLastCol = <span class="number">0</span></div><div class="line">   <span class="keyword">End</span> <span class="keyword">If</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Dim a as Variant</div><div class="line">Dim b as Variant</div><div class="line">a = Split("Red$Blue$Yellow","$")</div><div class="line">b = ubound(a)</div><div class="line">For i = 0 to b</div><div class="line">   MsgBox a(i)</div><div class="line">Next</div></pre></td></tr></table></figure>
<h3 id="写入txt"><a href="#写入txt" class="headerlink" title="写入txt"></a>写入txt</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Sub</span> test()</div><div class="line">   Open ThisWorkbook.Path &amp; <span class="string">"1.txt"</span> <span class="keyword">For</span> Output(覆盖)/Append(追加) <span class="keyword">As</span> <span class="meta">#1</span></div><div class="line">   Print <span class="meta">#1, "test2"</span></div><div class="line">   Print <span class="meta">#1, "test3"</span></div><div class="line">   Close <span class="meta">#1</span></div><div class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></div></pre></td></tr></table></figure>
<h3 id="查看下拉框所有内容"><a href="#查看下拉框所有内容" class="headerlink" title="查看下拉框所有内容"></a>查看下拉框所有内容</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Range(<span class="string">"D4"</span>).Validation.Formula1</div></pre></td></tr></table></figure>
<h3 id="下拉框进行赋值"><a href="#下拉框进行赋值" class="headerlink" title="下拉框进行赋值"></a>下拉框进行赋值</h3><ol>
<li><p>第一种方法</p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ComboBox1.List = Split(<span class="string">"张三,李四"</span>,<span class="string">","</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方法</p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">With</span> ComboBox1</div><div class="line">   .AddItem(<span class="string">"str1"</span>)</div><div class="line"><span class="keyword">End</span> <span class="keyword">With</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="获取选定单元格所在的行和列"><a href="#获取选定单元格所在的行和列" class="headerlink" title="获取选定单元格所在的行和列"></a>获取选定单元格所在的行和列</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ActiveCell.Row</div><div class="line">ActiveCell.Column</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VBA是一门比较早的语言了，用于处理 Office 办公软件的数据，不过最近听说以后会被 Python 代替（笑脸），现在总结一些使用 VBA 的过程遇到的一些问题以及解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式知识积累</title>
    <link href="http://xiaohao890809.github.io/2018/02/27/The-study-of-reg-expression/"/>
    <id>http://xiaohao890809.github.io/2018/02/27/The-study-of-reg-expression/</id>
    <published>2018-02-27T15:07:23.000Z</published>
    <updated>2018-04-04T11:28:54.887Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，正则表达式是非常重要的一个模块，在爬虫中用的好的话可以事半功倍，从复杂文本中根据规则去筛选数据等，掌握常用的一些正则通配符，从此刻开始。<br><a id="more"></a> </p>
<h2 id="正则表达式概念"><a href="#正则表达式概念" class="headerlink" title="正则表达式概念"></a>正则表达式概念</h2><ol>
<li>使用单个字符串来描述匹配一系列符合某个句法规则的字符串</li>
<li>是对字符串操作的一种逻辑公式</li>
<li>应用场景：处理文本和数据</li>
</ol>
<h2 id="举例分析"><a href="#举例分析" class="headerlink" title="举例分析"></a>举例分析</h2><h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><p>匹配中括号中有任何一个字符，匹配里面的或者情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'\[[\w]\]'</span>,<span class="string">'[a]'</span>)</div><div class="line">ret = re.findall(<span class="string">r'[abc]f'</span>,<span class="string">'afufobfidlfodcfr'</span>)</div><div class="line"><span class="comment"># ['af', 'bf', 'cf']</span></div></pre></td></tr></table></figure>
<h3 id="含有换行"><a href="#含有换行" class="headerlink" title="含有换行"></a>含有换行</h3><p>正则修饰符re.S可以匹配包括换行在内的所有字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">content = <span class="string">'''Hello 1234567Word-This</span></div><div class="line">    is a Regex Demo'''</div><div class="line"><span class="comment"># 非贪婪匹配</span></div><div class="line">result = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, content, re.S)</div><div class="line">print(result.group(<span class="number">1</span>)) <span class="comment"># 1234567</span></div></pre></td></tr></table></figure></p>
<h3 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="comment"># 贪婪模式，最大范围的匹配标准</span></div><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(.*)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/div&gt;&lt;div&gt;hello&lt;/div&gt;'</span>)</div><div class="line">print(ret) <span class="comment"># ['hello&lt;/div&gt;&lt;div&gt;hello']</span></div><div class="line"><span class="comment"># 非贪婪模式</span></div><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(.*?)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/div&gt;&lt;div&gt;hello&lt;/div&gt;'</span>)</div><div class="line">print(ret) <span class="comment"># ['hello', 'hello']</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'[0-9][a-z]*'</span>,<span class="string">'1bc'</span>) <span class="comment">#全部匹配</span></div><div class="line">print(ma.group()) <span class="comment">#1bc</span></div><div class="line">ma = re.match(<span class="string">r'[0-9][a-z]*?'</span>,<span class="string">'1bc'</span>) <span class="comment">#最小匹配，0个</span></div><div class="line">print(ma.group()) <span class="comment">#1</span></div><div class="line">ma = re.match(<span class="string">r'[0-9][a-z]+?'</span>,<span class="string">'1bc'</span>) <span class="comment">#最小匹配，一个</span></div><div class="line">print(ma.group()) <span class="comment">#1b</span></div></pre></td></tr></table></figure>
<h3 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(hello)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/DIV&gt;'</span>)</div><div class="line">print(ret) <span class="comment"># []</span></div><div class="line">ret = re.findall(<span class="string">r'&lt;div&gt;(hello)&lt;/div&gt;'</span>,<span class="string">'&lt;div&gt;hello&lt;/DIV&gt;'</span>,re.I)</div><div class="line">print(ret) <span class="comment"># ['hello']</span></div></pre></td></tr></table></figure>
<h3 id="匹配邮箱"><a href="#匹配邮箱" class="headerlink" title="匹配邮箱"></a>匹配邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mail = re.finall(<span class="string">r'\w+@\w+\.com|\w+@\w+\.cn|\w+@\w+\.net'</span>,<span class="string">'...'</span>)</div></pre></td></tr></table></figure>
<h3 id="匹配多个"><a href="#匹配多个" class="headerlink" title="匹配多个"></a>匹配多个</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'[a-zA-Z0-9]&#123;6&#125;'</span>,<span class="string">'abc123'</span>)</div><div class="line">print(ma.group()) <span class="comment">#abc123</span></div><div class="line"><span class="comment"># 匹配6-10个字符</span></div><div class="line">ma = re.match(<span class="string">r'[a-zA-Z0-9]&#123;6,10&#125;'</span>,<span class="string">'abc123456'</span>)</div><div class="line">print(ma.group()) <span class="comment">#abc123456</span></div></pre></td></tr></table></figure>
<h3 id="的用法"><a href="#的用法" class="headerlink" title="| 的用法"></a>| 的用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ma = re.match(<span class="string">r'[\w]&#123;4,6&#125;@(126|163).com'</span>,<span class="string">'immoc@126.com'</span>)</div><div class="line">print(ma.group()) <span class="comment">#immoc@126.com</span></div></pre></td></tr></table></figure>
<h2 id="findall的用法"><a href="#findall的用法" class="headerlink" title="findall的用法"></a>findall的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">str2 = <span class="string">'c++=100, java=90, python=80'</span></div><div class="line">info = re.findall(<span class="string">r'\d+'</span>,str2)</div><div class="line">print(info) <span class="comment">#['100', '90', '80']</span></div><div class="line">print(sum([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> info])) <span class="comment">#270</span></div></pre></td></tr></table></figure>
<h2 id="sub的用法"><a href="#sub的用法" class="headerlink" title="sub的用法"></a>sub的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(match)</span>:</span></div><div class="line">    val = match.group()</div><div class="line">    num = int(val) + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> str(num)</div><div class="line"></div><div class="line">str1 = <span class="string">'immodc vedio = 1001'</span></div><div class="line"><span class="comment"># 将数字整体加1</span></div><div class="line">ret = re.sub(<span class="string">r'\d+'</span>,add1,str1)</div><div class="line">print(ret) <span class="comment">#immodc vedio = 1002</span></div></pre></td></tr></table></figure>
<h2 id="split的用法"><a href="#split的用法" class="headerlink" title="split的用法"></a>split的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str1 = <span class="string">'immoc:C C++ Java Python,C#'</span></div><div class="line">list1 = re.split(<span class="string">r':| |,'</span>, str1)</div><div class="line">print(list1) <span class="comment">#['immoc', 'C', 'C++', 'Java', 'Python', 'C#']</span></div></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.imooc.com/learn/550" target="_blank" rel="external">python正则表达式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，正则表达式是非常重要的一个模块，在爬虫中用的好的话可以事半功倍，从复杂文本中根据规则去筛选数据等，掌握常用的一些正则通配符，从此刻开始。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="正则" scheme="http://xiaohao890809.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>VBA实现Excel的笛卡尔积</title>
    <link href="http://xiaohao890809.github.io/2018/01/12/The-decare-by-excel/"/>
    <id>http://xiaohao890809.github.io/2018/01/12/The-decare-by-excel/</id>
    <published>2018-01-12T15:40:23.000Z</published>
    <updated>2019-04-10T15:10:25.851Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个任务需求，就是把 Excel 里的两列元素，里面的元素有多个信息，将其分别拆分，然后取笛卡尔积，写到一个新的工作簿中。刚开始准备用 Python 实现的，后来想了下，VBA作为 Office 工具的原生态语言，何不用 VBA 实现呢，于是整理了下便写出来了，下面介绍下过程，为方便起见，弄了一些简易的数据，针对不同的数据需要做一些相应的调整。<br><a id="more"></a> </p>
<p>Excel的原始数据如下：</p>
<p><img src="/images/beforeDiCar.jpeg" alt="原始数据"></p>
<p>整个 <code>VBA</code> 的代码框架如下：</p>
<p><img src="/images/mould.jpeg" alt="代码框架" title="代码框架"></p>
<h2 id="类模块"><a href="#类模块" class="headerlink" title="类模块"></a>类模块</h2><p>原始数据对应的首行信息，每一列对应一个元素，将其列出，作为一个新的数组。<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> a <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">Public</span> b <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">Public</span> c <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">Public</span> d <span class="keyword">As</span> <span class="built_in">String</span></div></pre></td></tr></table></figure></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Const</span> maxNum = <span class="number">100000</span></div><div class="line"><span class="keyword">Public</span> MyArr(maxNum) <span class="keyword">As</span> <span class="keyword">New</span> MyAttr</div><div class="line"><span class="keyword">Public</span> MyNum <span class="keyword">As</span> <span class="built_in">Integer</span></div></pre></td></tr></table></figure>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>思路是分别拆分每一行的那两列元素，然后将得到的元素做两个循环，遍历写入新的数组中，然后将新的数组传到工作簿中。</p>
<h3 id="获取最大行数"><a href="#获取最大行数" class="headerlink" title="获取最大行数"></a>获取最大行数</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> GetLastRow(theSheet <span class="keyword">As</span> Worksheet, <span class="keyword">ByVal</span> col <span class="keyword">As</span> <span class="built_in">Integer</span>) <span class="keyword">As</span> <span class="built_in">Integer</span></div><div class="line">  </div><div class="line">  <span class="keyword">Dim</span> findreg <span class="keyword">As</span> Range, ret <span class="keyword">As</span> Range</div><div class="line">  <span class="keyword">Set</span> findreg = theSheet.Columns(col)</div><div class="line">  <span class="keyword">Set</span> ret = findreg.Find(what:=<span class="string">"*"</span>, searchDirection:=xlPrevious)</div><div class="line">  <span class="keyword">If</span> <span class="keyword">Not</span> ret <span class="keyword">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></div><div class="line">    GetLastRow = ret.Row</div><div class="line">  <span class="keyword">Else</span></div><div class="line">    GetLastRow = <span class="number">0</span></div><div class="line">  <span class="keyword">End</span> <span class="keyword">If</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h3 id="写入数组元素"><a href="#写入数组元素" class="headerlink" title="写入数组元素"></a>写入数组元素</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> WriteMsg(a <span class="keyword">As</span> <span class="built_in">String</span>, b <span class="keyword">As</span> <span class="built_in">String</span>, c <span class="keyword">As</span> <span class="built_in">String</span>, d <span class="keyword">As</span> <span class="built_in">String</span>)</div><div class="line"></div><div class="line">  MyArr(MyNum).a = a</div><div class="line">  MyArr(MyNum).b = b</div><div class="line">  MyArr(MyNum).c = c</div><div class="line">  MyArr(MyNum).d = d</div><div class="line">  MyNum = MyNum + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Function</span></div></pre></td></tr></table></figure>
<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>假设新的工作簿的名字叫<code>Sheet2</code>，并且首行元素已经事先写好。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">Sub calc()</div><div class="line">    </div><div class="line">  Dim thisSheet As Worksheet</div><div class="line">  Set thisSheet = ActiveSheet</div><div class="line">  </div><div class="line">  Dim lastRow As Integer</div><div class="line">  lastRow = GetLastRow(thisSheet, 1)</div><div class="line"></div><div class="line">  MyNum = 0</div><div class="line">  </div><div class="line">  Dim a As Variant</div><div class="line">  Dim b As Variant</div><div class="line">  Dim c As Variant</div><div class="line">  Dim d As Variant</div><div class="line"></div><div class="line">  Dim tmp1 As String</div><div class="line">  Dim tmp2 As String</div><div class="line"></div><div class="line">  For i = 2 To lastRow</div><div class="line">    a = Split(Range("B" &amp; i), ";")</div><div class="line">    b = UBound(a)</div><div class="line">    c = Split(Range("C" &amp; i), ";")</div><div class="line">    d = UBound(c)</div><div class="line"></div><div class="line">    For j = 0 To b</div><div class="line">      tmp1 = a(j)</div><div class="line">      For k = 0 To d</div><div class="line">        tmp2 = c(k)</div><div class="line">        WriteMsg Range("A" &amp; i), tmp1, tmp2, Range("D" &amp; i)</div><div class="line">      Next</div><div class="line"></div><div class="line">    Next</div><div class="line"></div><div class="line">  Next</div><div class="line">  </div><div class="line">  MsgBox MyNum</div><div class="line">  </div><div class="line">  For i = 0 To MyNum - 1</div><div class="line">    Sheets("Sheet2").Range("A" &amp; i + 2) = MyArr(i).a</div><div class="line">    Sheets("Sheet2").Range("B" &amp; i + 2) = MyArr(i).b</div><div class="line">    Sheets("Sheet2").Range("C" &amp; i + 2) = MyArr(i).c</div><div class="line">    Sheets("Sheet2").Range("D" &amp; i + 2) = MyArr(i).d</div><div class="line">  Next</div><div class="line"></div><div class="line">End Sub</div></pre></td></tr></table></figure></p>
<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="/images/beforeDiCar.jpeg" alt="效果预览" title="效果预览"></p>
<h2 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h2><p><a href="/images/笛卡尔积.xlsm">笛卡尔积.xlsm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有一个任务需求，就是把 Excel 里的两列元素，里面的元素有多个信息，将其分别拆分，然后取笛卡尔积，写到一个新的工作簿中。刚开始准备用 Python 实现的，后来想了下，VBA作为 Office 工具的原生态语言，何不用 VBA 实现呢，于是整理了下便写出来了，下面介绍下过程，为方便起见，弄了一些简易的数据，针对不同的数据需要做一些相应的调整。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>经典排序法之Python版</title>
    <link href="http://xiaohao890809.github.io/2018/01/11/The-classic-sorts/"/>
    <id>http://xiaohao890809.github.io/2018/01/11/The-classic-sorts/</id>
    <published>2018-01-11T15:11:23.000Z</published>
    <updated>2019-02-27T03:23:57.522Z</updated>
    
    <content type="html"><![CDATA[<p>大学的时候学习的经典算法忘记差不多了，现在赶紧拾起来，基本算法往往是复杂算法的基础，牢记掌握才是王道。<br><a id="more"></a> </p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="/images/冒泡排序.gif" alt="冒泡排序"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">BubbleSorted</span><span class="params">(nums)</span>:</span></div><div class="line">    length = len(nums)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length-i<span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> nums[j]&gt;nums[j+<span class="number">1</span>]:</div><div class="line">                nums[j],nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>],nums[j]</div><div class="line">    <span class="keyword">return</span> nums</div></pre></td></tr></table></figure>
<div class="note success">
            <p><strong>思考：</strong>如果原来的列表是有序列表呢，能否优化一下呢？ </p>
          </div>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(input_list)</span>:</span></div><div class="line">    <span class="string">"""冒泡排序"""</span></div><div class="line">    length = len(input_list)</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(length - <span class="number">1</span>):</div><div class="line">        <span class="comment"># 当列表已经是有序列表的，节省空间</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length - j - <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> input_list[i] &gt; input_list[i+<span class="number">1</span>]:</div><div class="line">                input_list[i], input_list[i+<span class="number">1</span>] = input_list[i+<span class="number">1</span>], input_list[i]</div><div class="line">                count += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> count == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div></pre></td></tr></table></figure>
<p><strong>属性：</strong></p>
<ul>
<li>最优时间复杂度：$O(n)$ (表示遍历一次没有发现任何可以交换的元素，排序结束)</li>
<li>最坏时间复杂度：$O(n^2)$</li>
<li>稳定性：稳定</li>
</ul>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="/images/插入排序.gif" alt="插入排序"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSorted</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="comment"># 从第二元素开始直到最后一个元素</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</div><div class="line">        tmp = nums[i]</div><div class="line">        print(nums)</div><div class="line">        j = i<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[j] &gt; tmp:</div><div class="line">            nums[j+<span class="number">1</span>] = nums[j]</div><div class="line">            j = j - <span class="number">1</span></div><div class="line">        nums[j+<span class="number">1</span>] = tmp</div><div class="line">    <span class="keyword">return</span> nums</div></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="/images/选择排序.gif" alt="选择排序"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SelectSorted</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</div><div class="line">        minIndex = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(nums)):</div><div class="line">            <span class="keyword">if</span> nums[j] &lt; nums[minIndex]:</div><div class="line">                minIndex = j</div><div class="line">        nums[i],nums[minIndex] = nums[minIndex],nums[i]</div><div class="line">    <span class="keyword">return</span> nums</div></pre></td></tr></table></figure>
<p><strong>图片来源：</strong><a href="http://www.cnblogs.com/ytb-wpq/p/6479240.html" target="_blank" rel="external">常用算法js版</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学的时候学习的经典算法忘记差不多了，现在赶紧拾起来，基本算法往往是复杂算法的基础，牢记掌握才是王道。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://xiaohao890809.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode题解Python版本</title>
    <link href="http://xiaohao890809.github.io/2017/12/31/The-leetcode-of-python/"/>
    <id>http://xiaohao890809.github.io/2017/12/31/The-leetcode-of-python/</id>
    <published>2017-12-31T03:26:23.000Z</published>
    <updated>2019-05-12T06:15:00.449Z</updated>
    
    <content type="html"><![CDATA[<p>记录 LeetCode 的算法习题，用 Python3 语言进行实现，Python还是很强大的，有些 built-in 函数很简洁，一行代码解决问题。<br><a id="more"></a> </p>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="3的幂"><a href="#3的幂" class="headerlink" title="3的幂"></a>3的幂<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/power-of-three/description/" target="_blank" rel="external">326. 3的幂</a><br>给定一个整数，写一个函数来判断它是否是 3 的幂次方。<br><strong>进阶:</strong><br>你能不使用循环或者递归来完成本题吗？?</p>
<p><strong>题解：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfThree</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> n&gt;<span class="number">0</span> <span class="keyword">and</span> <span class="number">1162261467</span>%n == <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>最大正整数：$2^{31}-1$，寻找 3 的最大次幂数</li>
<li>此题疑似作弊</li>
</ol>
<h3 id="自除数"><a href="#自除数" class="headerlink" title="自除数"></a>自除数<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/self-dividing-numbers/description/" target="_blank" rel="external">728. 自除数</a><br><em>自除数</em> 是指可以被它包含的每一位数除尽的数。<br>例如，128 是一个自除数，因为 <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>。<br>还有，自除数不允许包含 0 。<br>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入： 上边界left = 1, 下边界right = 22</div><div class="line">输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong><br>每个输入参数的边界满足 <code>1 &lt;= left &lt;= right &lt;= 10000</code>.</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selfDividingNumbers</span><span class="params">(left, right)</span>:</span></div><div class="line">    selfDivde = <span class="keyword">lambda</span> num: <span class="string">'0'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(num) <span class="keyword">and</span> all(num % int(item) == <span class="number">0</span> <span class="keyword">for</span> item <span class="keyword">in</span> str(num))</div><div class="line">    <span class="keyword">return</span> list(filter(selfDivde,range(left, right+<span class="number">1</span>)))</div><div class="line">    <span class="comment"># return filter(selfDivde,range(left, right+1)) Python2的写法</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：all([num % int(item) == 0 for item in str(num)])中的括号去掉了，这样子节省了一部分时间复杂度。</p>
</blockquote>
<p><strong>学习要点：</strong></p>
<ol>
<li>lamba表达式</li>
<li>过滤器 filter 的用法</li>
<li>all函数的用法</li>
</ol>
<h3 id="计数质数"><a href="#计数质数" class="headerlink" title="计数质数"></a>计数质数<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/count-primes/description/" target="_blank" rel="external">204. 计数质数</a><br>统计所有小于非负整数 n 的质数的数量。</p>
<p><strong>示例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 10</div><div class="line">输出: 4</div><div class="line">解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    res = [<span class="keyword">True</span>] * n</div><div class="line">    res[<span class="number">0</span>] = res[<span class="number">1</span>] = <span class="keyword">False</span></div><div class="line">    tmpDict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</div><div class="line">        <span class="keyword">if</span> res[i]:</div><div class="line">            <span class="comment"># 查看是否有因子，如果有因子的话，肯定不是质数</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, (n<span class="number">-1</span>)//i+<span class="number">1</span>):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> i*j <span class="keyword">in</span> tmpDict:</div><div class="line">                    <span class="comment"># 是否出现重复的情况呢</span></div><div class="line">                    tmpDict[i*j] = <span class="string">'Yes'</span></div><div class="line">                    print(<span class="string">'i*j:'</span>, i * j)</div><div class="line">                    res[i*j] = <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> sum(res)</div></pre></td></tr></table></figure></p>
<h3 id="旋转函数"><a href="#旋转函数" class="headerlink" title="旋转函数"></a>旋转函数<i class="fa fa-star-half-o"></i></h3><p><a href="https://leetcode.com/problems/rotate-function/description/" target="_blank" rel="external">396. 旋转函数</a><br>给定一个长度为 n 的整数数组 <code>A</code>。<br>假设 $B_{k}$ 是数组 <code>A</code> 顺时针旋转 k 个位置后的数组，我们定义 <code>A</code> 的“旋转函数” <code>F</code> 为:<br>$F(k) = 0 \cdot B_k[0] + 1 \cdot B_k[1] + \dots + (n-1) \cdot B_k[n-1]$.<br>计算 <code>F(0), F(1), ..., F(n-1)</code> 中的最大值。</p>
<p><strong>注意:</strong><br>可以认为 n 的值小于 $10^5$。</p>
<p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">A = [4, 3, 2, 6]</div><div class="line">F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25</div><div class="line">F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16</div><div class="line">F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23</div><div class="line">F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26</div><div class="line">所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26.</div></pre></td></tr></table></figure></p>
<p><strong>题解：</strong><br><del>之前的思路是这样子的(不可取)</del>，一次旋转列表，得到新的列表，然后用各自的元素乘以索引得到结果，后来发现这样子会列表溢出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxRotateFunction</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type A: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    ret = sum(i * num <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(A))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(A)):</div><div class="line">        B = A[i:] + A[:i] <span class="comment"># 或者下面两行代替，by 刘亮钧</span></div><div class="line">        <span class="comment"># num = A.pop()</span></div><div class="line">        <span class="comment"># A.insert(0,num) # 下面的B改为A</span></div><div class="line">        cal = sum(i * num <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(B))</div><div class="line">        <span class="keyword">if</span> cal &gt; ret:</div><div class="line">            ret = cal</div><div class="line">    <span class="keyword">return</span> ret</div></pre></td></tr></table></figure></p>
<p>后来参考了答案，不拼接列表，采取巧妙的方法计算出结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxRotateFunction</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type A: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    lMax = sum(i * num <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(A))</div><div class="line">    totalSum = sum(A)</div><div class="line">    rMax = lMax</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</div><div class="line">        lMax += (totalSum - A[i]*len(A))</div><div class="line">        rMax = max(lMax, rMax)</div><div class="line">    <span class="keyword">return</span> rMax</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>考虑操作列表会溢出的情形</li>
<li>enumerate的用法，返回两个值，一个是索引，一个是元素的值</li>
</ol>
<h3 id="最大交换"><a href="#最大交换" class="headerlink" title="最大交换"></a>最大交换<i class="fa fa-star-half-o"></i></h3><p><a href="https://leetcode.com/problems/maximum-swap/description/" target="_blank" rel="external">670. 最大交换</a><br>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 2736</div><div class="line">输出: 7236</div><div class="line">解释: 交换数字2和数字7。</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 9973</div><div class="line">输出: 9973</div><div class="line">解释: 不需要交换。</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong><br>给定数字的范围是 $[0,10^8]$ </p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximumSwap</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type num: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    numList = list(str(num))</div><div class="line">    newList = sorted(str(num), reverse=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numList)):</div><div class="line">        <span class="keyword">if</span> numList[i] != newList[i]:</div><div class="line">            numList[len(numList) - <span class="number">1</span> - numList[::<span class="number">-1</span>].index(newList[i])], numList[i] = \</div><div class="line">            numList[i], numList[len(numList) - <span class="number">1</span> - numList[::<span class="number">-1</span>].index(newList[i])]</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(<span class="string">''</span>.join(numList))</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>[1,2,6,6]中取最后一个 6 的索引的方法</li>
<li>交换顺序 a,b = b,a 的时候注意 index 的那个调换的数字必须放在前面的位置</li>
</ol>
<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><h3 id="两整数之和"><a href="#两整数之和" class="headerlink" title="两整数之和"></a>两整数之和<i class="fa fa-star-o"></i></h3><p><a href="https://leetcode.com/problems/sum-of-two-integers/description/" target="_blank" rel="external">371. 两整数之和</a><br><strong>不使用</strong>运算符 + 和-，计算两整数a 、b之和。</p>
<p><strong>示例:</strong><br>若 a = 1 ，b = 2，返回 3。</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSum</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type a: int</div><div class="line">    :type b: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 32 bits integer max</span></div><div class="line">    MAX = <span class="number">0x7FFFFFFF</span></div><div class="line">    <span class="comment"># 32 bits interger min</span></div><div class="line">    MIN = <span class="number">0x80000000</span></div><div class="line">    <span class="comment"># mask to get last 32 bits</span></div><div class="line">    mask = <span class="number">0xFFFFFFFF</span></div><div class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</div><div class="line">        <span class="comment"># ^ get different bits and &amp; gets double 1s, &lt;&lt; moves carry</span></div><div class="line">        a, b = (a ^ b) &amp; mask, ((a &amp; b) &lt;&lt; <span class="number">1</span>) &amp; mask</div><div class="line">    <span class="comment"># if a is negative, get a's 32 bits complement positive first</span></div><div class="line">    <span class="comment"># then get 32-bit positive's Python complement negative</span></div><div class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> a &lt;= MAX <span class="keyword">else</span> ~(a ^ mask)</div></pre></td></tr></table></figure></p>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和<i class="fa fa-star-half-o"></i></h3><p><a href="https://leetcode.com/problems/minimum-path-sum/description/" target="_blank" rel="external">64. 最小路径和</a><br>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<br><strong>说明：</strong>每次只能向下或者向右移动一步。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[</div><div class="line">  [1,3,1],</div><div class="line">  [1,5,1],</div><div class="line">  [4,2,1]</div><div class="line">]</div><div class="line">输出: 7</div><div class="line">解释: 因为路径 1→3→1→1→1 的总和最小。</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(grid)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type grid: List[List[int]]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    m = len(grid) <span class="comment"># 宽度</span></div><div class="line">    n = len(grid[<span class="number">0</span>]) <span class="comment"># 长度</span></div><div class="line">    <span class="comment"># 第一列累加求和</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</div><div class="line">        grid[i][<span class="number">0</span>] += grid[i<span class="number">-1</span>][<span class="number">0</span>]</div><div class="line">    <span class="comment"># 第一行累加求和</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</div><div class="line">        grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i<span class="number">-1</span>]</div><div class="line">    <span class="comment"># 依次往下往右取上面和左边的最小值进行累加求和</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</div><div class="line">            grid[i][j] += min(grid[i][j<span class="number">-1</span>],grid[i<span class="number">-1</span>][j])</div><div class="line">    <span class="keyword">return</span> grid[<span class="number">-1</span>][<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 类似百度地图的求最短路径</span></div></pre></td></tr></table></figure></p>
<h2 id="腾讯2018秋招精选"><a href="#腾讯2018秋招精选" class="headerlink" title="腾讯2018秋招精选"></a>腾讯2018秋招精选</h2><h3 id="数学与数字"><a href="#数学与数字" class="headerlink" title="数学与数字"></a>数学与数字</h3><h4 id="求众数"><a href="#求众数" class="headerlink" title="求众数"></a>求众数<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/majority-element/description/" target="_blank" rel="external">169. 求众数</a><br>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,3]</div><div class="line">输出: 3</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [2,2,1,1,1,2,2]</div><div class="line">输出: 2</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 思路1：用字典进行存储</span></div><div class="line">    <span class="comment"># dic = &#123;&#125;</span></div><div class="line">    <span class="comment"># for item in nums:</span></div><div class="line">    <span class="comment">#     if item not in dic:</span></div><div class="line">    <span class="comment">#         dic[item] = 1</span></div><div class="line">    <span class="comment">#     if dic[item] &gt; len(nums)//2:</span></div><div class="line">    <span class="comment">#         return item</span></div><div class="line">    <span class="comment">#     else:</span></div><div class="line">    <span class="comment">#         dic[item] += 1</span></div><div class="line"></div><div class="line">    <span class="comment"># 思路2：简介的思路，因为传入的众数总是存在</span></div><div class="line">    <span class="keyword">return</span> sorted(nums)[len(nums)//<span class="number">2</span>]</div></pre></td></tr></table></figure></p>
<h4 id="2的幂"><a href="#2的幂" class="headerlink" title="2的幂"></a>2的幂<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/power-of-two/description/" target="_blank" rel="external">231. 2的幂</a><br>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p>
<p><strong>题解：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> (n &amp; n<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>n &amp; n - 1 removes the left most bit of n. If an integer is power of 2, there is a single bit in the binary representation of n. e.g. 16 = b10000, 16 - 1 = b01111, and 16 &amp; 16 - 1 = b10000 &amp; b01111 = 0, also 16 != 0, based on these facts there is only one bit in b10000, so 16 is power of 2.</p>
</blockquote>
<h4 id="反转整数"><a href="#反转整数" class="headerlink" title=" 反转整数 "></a><font color="#f47920"> 反转整数<i class="fa fa-star-o"></i> </font></h4><p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="external">7. 反转整数</a><br>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 123</div><div class="line">输出: 321</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: -123</div><div class="line">输出: -321</div></pre></td></tr></table></figure></p>
<p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 120</div><div class="line">输出: 21</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong><br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 $[−2^{31},  2^{31} − 1]$。根据这个假设，如果反转后的整数溢出，则返回 0。</p>
<p><strong>解题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    result = <span class="number">0</span></div><div class="line">    pos_x = abs(x)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> pos_x:</div><div class="line">        result = result * <span class="number">10</span> + pos_x % <span class="number">10</span></div><div class="line">        <span class="comment"># python3和python2的不同之处，这里求余数是小数，要转换成整数</span></div><div class="line">        pos_x = pos_x // <span class="number">10</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> result &gt;= <span class="number">2147483647</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> result <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> result * (<span class="number">-1</span>)</div></pre></td></tr></table></figure></p>
<h4 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="external">136. 只出现一次的数字</a><br>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br><strong>说明：</strong><br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [2,2,1]</div><div class="line">输出: 1</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [4,1,2,1,2]</div><div class="line">输出: 4</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span> * sum(set(nums)) - sum(nums)</div></pre></td></tr></table></figure></p>
<h4 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">9. 回文数</a><br>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 121</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: -121</div><div class="line">输出: false</div><div class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</div></pre></td></tr></table></figure></p>
<p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 10</div><div class="line">输出: false</div><div class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</div></pre></td></tr></table></figure></p>
<p><strong>进阶:</strong><br>你能不将整数转为字符串来解决这个问题吗？</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    x = str(x)</div><div class="line">    length = len(x)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length//<span class="number">2</span>):</div><div class="line">        <span class="keyword">if</span> x[i] != x[length - i - <span class="number">1</span>]:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 另外一种思路，将数字倒序，然后进行比较</span></div><div class="line"><span class="string">'''</span></div><div class="line">x = str(x)</div><div class="line">return True if x==x[::-1] else False</div><div class="line">'''</div></pre></td></tr></table></figure></p>
<p><em>不转换成字符串</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome2</span><span class="params">(x)</span>:</span></div><div class="line"></div><div class="line">    num = x</div><div class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    res = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>):</div><div class="line">        <span class="comment"># 从各位到高位依次取出</span></div><div class="line">        res = res * <span class="number">10</span></div><div class="line">        res = res + x % <span class="number">10</span></div><div class="line">        x = x // <span class="number">10</span></div><div class="line">    <span class="keyword">return</span> (num == res)</div></pre></td></tr></table></figure>
<p><strong>学习要点：</strong></p>
<ol>
<li>逆向字符串的表示方法</li>
<li>不使用字符串的转换方式要熟练</li>
</ol>
<h3 id="数组与字符串"><a href="#数组与字符串" class="headerlink" title="数组与字符串"></a>数组与字符串</h3><h4 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/reverse-string/description/" target="_blank" rel="external">344. 反转字符串</a><br>编写一个函数，其作用是将输入的字符串反转过来。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;hello&quot;</div><div class="line">输出: &quot;olleh&quot;</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</div><div class="line">输出: &quot;amanaP :lanac a ,nalp a ,nam A&quot;</div></pre></td></tr></table></figure></p>
<p><strong>解题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">def reverseString(s):</div><div class="line">    """</div><div class="line">    :type s: str</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    return s[::-1]</div><div class="line"></div><div class="line"># 另一种方法，夹逼法则</div><div class="line">def reverseString(s):</div><div class="line">    s_list = list(s)</div><div class="line">    i,j = 0, len(s_list)-1</div><div class="line">    while i&lt;j:</div><div class="line">        s_list[i],s_list[j] = s_list[j],s_list[i]</div><div class="line">        i += 1</div><div class="line">        j -= 1</div><div class="line">    return ''.join(s_list)</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># 递归的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(s)</span>:</span></div><div class="line">    l = len(s)</div><div class="line">    <span class="keyword">if</span> l &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> s</div><div class="line">    <span class="keyword">return</span> reverseString(s[l//<span class="number">2</span>:]) + reverseString(s[:l//<span class="number">2</span>])</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>多种角度，多种思路。</li>
</ol>
<h4 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/contains-duplicate/description/" target="_blank" rel="external">217. 存在重复元素</a><br>给定一个整数数组，判断是否存在重复元素。<br>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3,1]</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3,4]</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>示例3</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [1,1,1,3,3,4,3,2,4,2]</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="comment"># 去重前和去重后比较列表长度</span></div><div class="line">    <span class="keyword">return</span> len(set(nums)) != len(nums)</div><div class="line">    <span class="comment"># 另外一种解法</span></div><div class="line">    <span class="comment"># return True if len(set(nums)) &lt; len(nums) else False</span></div></pre></td></tr></table></figure></p>
<h4 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="external">20. 有效的括号</a><br>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;()&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;()[]&#123;&#125;&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;(]&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>示例 4:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;([)]&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>示例 5:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;&#123;[]&#125;&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    my_dict = &#123;<span class="string">']'</span>:<span class="string">'['</span>, <span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>,<span class="string">')'</span>:<span class="string">'('</span>&#125;</div><div class="line">    stack = []</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> my_dict.values():</div><div class="line">            stack.append(char)</div><div class="line">        <span class="keyword">elif</span> char <span class="keyword">in</span> my_dict.keys():</div><div class="line">            <span class="keyword">if</span> stack == [] <span class="keyword">or</span> my_dict[char] != stack.pop():</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> stack == []</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid2</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    n = len(s)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> n %<span class="number">2</span> != <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'()'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'[]'</span> <span class="keyword">in</span> s:</div><div class="line">        s.replace(<span class="string">'()'</span>,<span class="string">''</span>).replace(<span class="string">'[]'</span>,<span class="string">''</span>).replace(<span class="string">'&#123;&#125;'</span>,<span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> s == <span class="string">''</span></div></pre></td></tr></table></figure></p>
<h4 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成<i class="fa fa-star-half-o"></i></h4><p><a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="external">22. 括号生成</a><br>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p>
<p><strong>示例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">例如，给出 n = 3，生成结果为：</div><div class="line">[</div><div class="line">  &quot;((()))&quot;,</div><div class="line">  &quot;(()())&quot;,</div><div class="line">  &quot;(())()&quot;,</div><div class="line">  &quot;()(())&quot;,</div><div class="line">  &quot;()()()&quot;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方法1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: List[str]</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">genreate</span><span class="params">(p, left, right, paren=[])</span>:</span></div><div class="line">        <span class="keyword">if</span> left:</div><div class="line">            <span class="comment"># 不能加上return</span></div><div class="line">            genreate(p + <span class="string">'('</span>, left - <span class="number">1</span>, right)</div><div class="line">        <span class="keyword">if</span> right &gt; left:</div><div class="line">            <span class="comment"># 不能加上return</span></div><div class="line">            genreate(p + <span class="string">')'</span>, left, right - <span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> right:</div><div class="line">            <span class="comment"># paren += p,</span></div><div class="line">            <span class="comment"># 上面跟下面是等价的</span></div><div class="line">            paren += [p]</div><div class="line">        <span class="keyword">return</span> paren</div><div class="line">    <span class="keyword">return</span> genreate(<span class="string">''</span>, n, n)</div><div class="line"></div><div class="line"><span class="comment"># 方法2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis2</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: List[str]</div><div class="line">    """</div><div class="line">    <span class="comment"># 真正的生成器</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(p, left, right)</span>:</span></div><div class="line">        <span class="keyword">if</span> right &gt;= left &gt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> right:</div><div class="line">                <span class="keyword">yield</span> p</div><div class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> generate(p + <span class="string">'('</span>, left - <span class="number">1</span>, right): <span class="keyword">yield</span> q</div><div class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> generate(p + <span class="string">')'</span>, left, right - <span class="number">1</span>): <span class="keyword">yield</span> q</div><div class="line">    <span class="keyword">return</span> list(generate(<span class="string">''</span>, n, n))</div><div class="line"></div><div class="line"><span class="comment"># 方法3</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis3</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: List[str]</div><div class="line">    """</div><div class="line">    dp = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(n + <span class="number">1</span>)]</div><div class="line">    dp[<span class="number">0</span>].append(<span class="string">''</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n + <span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</div><div class="line">            dp[i] += [<span class="string">'('</span> + x + <span class="string">')'</span> + y <span class="keyword">for</span> x <span class="keyword">in</span> dp[j] <span class="keyword">for</span> y <span class="keyword">in</span> dp[i - j - <span class="number">1</span>]]</div><div class="line">    <span class="keyword">return</span> dp[n]</div></pre></td></tr></table></figure></p>
<h4 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/" target="_blank" rel="external">26. 删除排序数组中的重复项</a><br>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定数组 nums = [1,1,2], </div><div class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</div><div class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<p><strong>说明:</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">为什么返回数值是整数，但输出的答案是数组呢?</div><div class="line">请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</div><div class="line">你可以想象内部操作如下:</div><div class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</div><div class="line">int len = removeDuplicates(nums);</div><div class="line"></div><div class="line">// 在函数里修改输入数组对于调用者是可见的。</div><div class="line">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</div><div class="line">for (int i = 0; i &lt; len; i++) &#123;</div><div class="line">    print(nums[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    dulNum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</div><div class="line">        <span class="keyword">if</span> nums[i] != nums[dulNum]:</div><div class="line">            dulNum += <span class="number">1</span></div><div class="line">            nums[dulNum] = nums[i]</div><div class="line">            </div><div class="line">    <span class="comment"># 返回处理后数组的长度，前几位就是想要的结果</span></div><div class="line">    <span class="comment"># print(nums)</span></div><div class="line">    <span class="comment"># print(dulNum+1)</span></div><div class="line">    <span class="keyword">return</span> dulNum+<span class="number">1</span></div></pre></td></tr></table></figure></p>
<h4 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">14. 最长公共前缀</a><br>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</div><div class="line">输出: &quot;fl&quot;</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</div><div class="line">输出: &quot;&quot;</div><div class="line">解释: 输入不存在公共前缀。</div></pre></td></tr></table></figure></p>
<blockquote>
<p>说明: 所有输入只包含小写字母 a-z 。</p>
</blockquote>
<p><strong>解题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(strs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type strs: List[str]</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    <span class="comment"># 我的思路：先找出最大字符串的长度，然后按照这个长度一次取各个元素的前n个元素，看是否相等，用set去重即可</span></div><div class="line">    <span class="keyword">if</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    min_len = min([len(i) <span class="keyword">for</span> i <span class="keyword">in</span> strs])</div><div class="line">    <span class="keyword">while</span> min_len &gt; <span class="number">0</span>:</div><div class="line">        new_str = [i[:min_len] <span class="keyword">for</span> i <span class="keyword">in</span> strs]</div><div class="line">        <span class="keyword">if</span> len(set(new_str)) == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> list(set(new_str))[<span class="number">0</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            min_len -= <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 第二种方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix2</span><span class="params">(strs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type strs: List[str]</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    sz, ret = zip(*strs), <span class="string">""</span></div><div class="line">    <span class="comment"># looping corrected based on @StefanPochmann's comment below</span></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> sz:</div><div class="line">        <span class="keyword">if</span> len(set(c)) &gt; <span class="number">1</span>: <span class="keyword">break</span></div><div class="line">        ret += c[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> ret</div></pre></td></tr></table></figure></p>
<h4 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title=" 最长回文子串 "></a><font color="#f47920"> 最长回文子串<i class="fa fa-star-half-o"></i> </font></h4><p><a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="external">5. 最长回文子串</a><br>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。</p>
<p><strong>示例1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: &quot;babad&quot;</div><div class="line">输出: &quot;bab&quot;</div><div class="line">注意: &quot;aba&quot;也是一个有效答案。</div></pre></td></tr></table></figure></p>
<p><strong>示例2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;cbbd&quot;</div><div class="line">输出: &quot;bb&quot;</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(s, l, r)</span>:</span></div><div class="line">    <span class="keyword">while</span> l &gt;= <span class="number">0</span> <span class="keyword">and</span> r &lt; len(s) <span class="keyword">and</span> s[l] == s[r]:</div><div class="line">        l -= <span class="number">1</span>; r += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> s[l+<span class="number">1</span>:r]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    res = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">        <span class="comment"># odd case, like "aba"</span></div><div class="line">        tmp = helper(s, i, i)</div><div class="line">        print(<span class="string">'tmp1:'</span>,tmp)</div><div class="line">        <span class="keyword">if</span> len(tmp) &gt; len(res):</div><div class="line">            res = tmp</div><div class="line">        <span class="comment"># even case, like "abba"</span></div><div class="line">        tmp = helper(s, i, i + <span class="number">1</span>)</div><div class="line">        <span class="comment"># print('tmp2:',tmp)</span></div><div class="line">        <span class="keyword">if</span> len(tmp) &gt; len(res):</div><div class="line">            res = tmp</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure></p>
<h4 id="两数之和"><a href="#两数之和" class="headerlink" title=" 两数之和 "></a><font color="#f47920"> 两数之和<i class="fa fa-star-o"></i> </font></h4><p><a href="https://leetcode.com/problems/3sum/description/" target="_blank" rel="external">1. 两数之和</a><br>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那<strong>两个</strong>整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定 nums = [2, 7, 11, 15], target = 9</div><div class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</div><div class="line">所以返回 [0, 1]</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(nums, target)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type target: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    buff_dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">        <span class="keyword">if</span> nums[i] <span class="keyword">in</span> buff_dict:</div><div class="line">            <span class="keyword">return</span> [buff_dict[nums[i]], i]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            buff_dict[target - nums[i]] = i</div></pre></td></tr></table></figure></p>
<h4 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和<i class="fa fa-star-half-o"></i></h4><p><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">15. 三数之和</a><br>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 $a，b，c$ ，使得 $a + b + c = 0 ？$ 找出所有满足条件且不重复的三元组。<br><strong>注意：</strong>答案中不可以包含重复的三元组。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</div><div class="line">满足要求的三元组集合为：</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    <span class="comment"># 当长度小于3时，直接返回空列表</span></div><div class="line">    <span class="keyword">if</span> len(nums) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="comment"># 进行排序处理</span></div><div class="line">    nums.sort()</div><div class="line">    ret = set()</div><div class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(nums[:len(nums)<span class="number">-2</span>]):</div><div class="line">        <span class="comment"># 防止出现重复的情况</span></div><div class="line">        <span class="keyword">if</span> i &gt; <span class="number">1</span> <span class="keyword">and</span> j == nums[i<span class="number">-1</span>]:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        d = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nums[i+<span class="number">1</span>:]:</div><div class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> d:</div><div class="line">                d[-j-v] = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                ret.add((j,-v-j,v))</div><div class="line"></div><div class="line">    <span class="comment"># 对于Python2而言，map(list,ret)即可</span></div><div class="line">    <span class="keyword">return</span> [*map(list,ret)]</div></pre></td></tr></table></figure></p>
<h4 id="字符串相乘"><a href="#字符串相乘" class="headerlink" title="字符串相乘"></a>字符串相乘<i class="fa fa-star-half-o"></i></h4><p><a href="https://leetcode.com/problems/multiply-strings/" target="_blank" rel="external">43. 字符串相乘</a><br>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;</div><div class="line">输出: &quot;6&quot;</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: num1 = &quot;123&quot;, num2 = &quot;456&quot;</div><div class="line">输出: &quot;56088&quot;</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ol>
<li>num1 和 num2 的长度小于110。</li>
<li>num1 和 num2 只包含数字 0-9。</li>
<li>num1 和 num2 均不以零开头，除非是数字 0 本身。</li>
<li><strong>不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。</strong></li>
</ol>
<p><strong>题解</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(num1, num2)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type num1: str</div><div class="line">    :type num2: str</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    res = [<span class="number">0</span>]*(len(num1) + len(num2))</div><div class="line">    <span class="keyword">for</span> i,e1 <span class="keyword">in</span> enumerate(reversed(num1)):</div><div class="line">        <span class="keyword">for</span> j,e2 <span class="keyword">in</span> enumerate(reversed(num2)):</div><div class="line">            <span class="comment"># res[i+j] += int(e1) * int(e2)</span></div><div class="line">            res[i + j] += (ord(e1) - ord(<span class="string">'0'</span>)) * (ord(e2) - ord(<span class="string">'0'</span>))</div><div class="line">            res[i+j+<span class="number">1</span>] += res[i+j] // <span class="number">10</span></div><div class="line">            res[i+j] %= <span class="number">10</span></div><div class="line">    print(res)</div><div class="line">    <span class="keyword">while</span> len(res) &gt; <span class="number">1</span> <span class="keyword">and</span> res[<span class="number">-1</span>] == <span class="number">0</span> : res.pop()</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(map(str,res[::<span class="number">-1</span>]))</div></pre></td></tr></table></figure></p>
<h4 id="寻找两个有序数组的中位数"><a href="#寻找两个有序数组的中位数" class="headerlink" title=" 寻找两个有序数组的中位数 "></a><font color="#f47920"> 寻找两个有序数组的中位数<i class="fa fa-star"></i> </font></h4><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="external">4. 寻找两个有序数组的中位数</a><br>给定两个大小为 <code>m</code> 和 <code>n</code> 的有序数组 <code>nums1</code> 和 <code>nums2</code>。<br>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 $O(log(m + n))$。<br>你可以假设 <code>nums1</code> 和 <code>nums2</code> 不会同时为空。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div><div class="line">则中位数是 2.0</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div><div class="line">则中位数是 (2 + 3)/2 = 2.5</div></pre></td></tr></table></figure></p>
<p><strong>题解</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMedinums1nSortednums1rrnums1ys</span><span class="params">(nums1, nums2)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums1: List[int]</div><div class="line">    :type nums2: List[int]</div><div class="line">    :rtype: flonums1t</div><div class="line">    """</div><div class="line">    l = len(nums1) + len(nums2)</div><div class="line">    <span class="keyword">if</span> l % <span class="number">2</span> == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> kth(nums1, nums2, l // <span class="number">2</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> (kth(nums1, nums2, l // <span class="number">2</span>) + kth(nums1, nums2, l // <span class="number">2</span> - <span class="number">1</span>)) / <span class="number">2.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">kth</span><span class="params">(nums1, nums2, k)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums1:</div><div class="line">        <span class="keyword">return</span> nums2[k]</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums2:</div><div class="line">        <span class="keyword">return</span> nums1[k]</div><div class="line">    inums1, inums2 = len(nums1) // <span class="number">2</span>, len(nums2) // <span class="number">2</span></div><div class="line">    mnums1, mnums2 = nums1[inums1], nums2[inums2]</div><div class="line"></div><div class="line">    <span class="comment"># when k is nums2igger thnums1n the sum of nums1 nums1nd nums2's medinums1n indices</span></div><div class="line">    <span class="keyword">if</span> inums1 + inums2 &lt; k:</div><div class="line">        <span class="comment"># if nums1's medinums1n is nums2igger thnums1n nums2's, nums2's first hnums1lf doesn't include k</span></div><div class="line">        <span class="keyword">if</span> mnums1 &gt; mnums2:</div><div class="line">            <span class="keyword">return</span> kth(nums1, nums2[inums2 + <span class="number">1</span>:], k - inums2 - <span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> kth(nums1[inums1 + <span class="number">1</span>:], nums2, k - inums1 - <span class="number">1</span>)</div><div class="line">    <span class="comment"># when k is smnums1ller thnums1n the sum of nums1 nums1nd nums2's indices</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># if nums1's medinums1n is nums2igger thnums1n nums2's, nums1's second hnums1lf doesn't include k</span></div><div class="line">        <span class="keyword">if</span> mnums1 &gt; mnums2:</div><div class="line">            <span class="keyword">return</span> kth(nums1[:inums1], nums2, k)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> kth(nums1, nums2[:inums2], k)</div></pre></td></tr></table></figure></p>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="external">121. 买卖股票的最佳时机</a><br>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。<br>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 5</div><div class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5。</div><div class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div><div class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</div></pre></td></tr></table></figure></p>
<p><strong>题解</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自己的思路：从前往后遍历寻找，直到找到相差最大的数为止</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 这种算法超出时间限制了</span></div><div class="line">    <span class="keyword">if</span> len(prices) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    maxPrice = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices)<span class="number">-1</span>):</div><div class="line">        tmpPriceList = [x-prices[i] <span class="keyword">for</span> x <span class="keyword">in</span> prices[i+<span class="number">1</span>:]]</div><div class="line">        maxPrice.extend(tmpPriceList)</div><div class="line">    print(maxPrice)</div><div class="line">    <span class="comment"># 最大差值为负数的时候利润应该为0</span></div><div class="line">    <span class="keyword">return</span> max(max(maxPrice),<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 参考答案</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    maxProfit,minPrice = <span class="number">0</span>,float(<span class="string">'inf'</span>)</div><div class="line">    <span class="keyword">for</span> price <span class="keyword">in</span> prices:</div><div class="line">        minPrice = min(minPrice, price)</div><div class="line">        profit = price - minPrice</div><div class="line">        maxProfit = max(maxProfit,profit)</div><div class="line">    <span class="keyword">return</span> maxProfit</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>注意考虑时间限制</li>
<li>充分利用前后之前的数字关系</li>
</ol>
<h4 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii" target="_blank" rel="external">122. 买卖股票的最佳时机 II</a><br>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 7</div><div class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</div><div class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3,4,5]</div><div class="line">输出: 4</div><div class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</div><div class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</div><div class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</div></pre></td></tr></table></figure></p>
<p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div><div class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> prices <span class="keyword">or</span> len(prices) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    profit = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(prices)):</div><div class="line">        <span class="keyword">if</span> prices[i] &gt; prices[i<span class="number">-1</span>]:</div><div class="line">            profit += prices[i] - prices[i<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> profit</div><div class="line"></div><div class="line"><span class="comment"># 第二种方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit2</span><span class="params">(prices)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(max(prices[i]-prices[i<span class="number">-1</span>],<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(prices)))</div></pre></td></tr></table></figure></p>
<h4 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="external">70. 爬楼梯</a><br>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>注意：给定 n 是一个正整数。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入： 2</div><div class="line">输出： 2</div><div class="line">解释： 有两种方法可以爬到楼顶。</div><div class="line">1.  1 阶 + 1 阶</div><div class="line">2.  2 阶</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入： 3</div><div class="line">输出： 3</div><div class="line">解释： 有三种方法可以爬到楼顶。</div><div class="line">1.  1 阶 + 1 阶 + 1 阶</div><div class="line">2.  1 阶 + 2 阶</div><div class="line">3.  2 阶 + 1 阶</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 超过时间限制了</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">2</span>: <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> climbStairs(n<span class="number">-1</span>) + climbStairs(n<span class="number">-2</span>)</div><div class="line"></div><div class="line"><span class="comment"># 第二种方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs2</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    res = [<span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</div><div class="line">    res[<span class="number">0</span>], res[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> helper(n - <span class="number">1</span>, res)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(n, res)</span>:</span></div><div class="line">    <span class="keyword">if</span> res[n] == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> helper(n - <span class="number">2</span>, res) + helper(n - <span class="number">1</span>, res)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> res[n]</div><div class="line"></div><div class="line"><span class="comment"># 第三种方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs3</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 斐波那契数列</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</div><div class="line">    res[<span class="number">0</span>], res[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">2</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</div><div class="line">        res[i] = res[i<span class="number">-1</span>] + res[i<span class="number">-2</span>]</div><div class="line">    <span class="keyword">return</span> res[<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 第四种方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs4</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="comment"># 斐波那契数列</span></div><div class="line">    a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        a, b = b, a+b</div><div class="line">    <span class="keyword">return</span> a</div></pre></td></tr></table></figure></p>
<h4 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/maximum-subarray" target="_blank" rel="external">53. 最大子序和</a><br>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</div><div class="line">输出: 6</div><div class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</div></pre></td></tr></table></figure></p>
<p><strong>进阶:</strong><br>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</div><div class="line">        nums[i] = max(nums[i], nums[i] + nums[i<span class="number">-1</span>])</div><div class="line">    <span class="keyword">return</span> max(nums)</div><div class="line"></div><div class="line"><span class="comment"># 第二种方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArray2</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</div><div class="line">        <span class="keyword">if</span> nums[i<span class="number">-1</span>] &gt; <span class="number">0</span>:</div><div class="line">            nums[i] += nums[i<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> max(nums)</div></pre></td></tr></table></figure></p>
<h4 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径<i class="fa fa-star-half-o"></i></h4><p><a href="https://leetcode.com/problems/unique-paths" target="_blank" rel="external">62. 不同路径</a><br>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。<br>问总共有多少条不同的路径？</p>
<p><img src="/images/robot_maze.png" alt="机器人移步"><br>例如，上图是一个7 x 3 的网格。有多少可能的路径？<br><strong>说明：</strong>m 和 n 的值均不超过 100。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: m = 3, n = 2</div><div class="line">输出: 3</div><div class="line">解释:</div><div class="line">从左上角开始，总共有 3 条路径可以到达右下角。</div><div class="line">1. 向右 -&gt; 向右 -&gt; 向下</div><div class="line">2. 向右 -&gt; 向下 -&gt; 向右</div><div class="line">3. 向下 -&gt; 向右 -&gt; 向右</div></pre></td></tr></table></figure></p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: m = 7, n = 3</div><div class="line">输出: 28</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态规划，可以将二维数组优化成一维数组进行</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(m, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type m: int</div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> m <span class="keyword">or</span> <span class="keyword">not</span> n:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    cur = [<span class="number">1</span>] * n</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">            cur[j] += cur[j<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> cur[<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 动态规划解法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths2</span><span class="params">(m, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type m: int</div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    Dp = [[<span class="number">1</span>] * n] * m</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">            Dp[i][j] = Dp[i - <span class="number">1</span>][j] + Dp[i][j - <span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> Dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<h4 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集<i class="fa fa-star-half-o"></i></h4><p><a href="https://leetcode.com/problems/subsets" target="_blank" rel="external">78. 子集</a><br>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。<br>说明：解集不能包含重复的子集。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">输入: nums = [1,2,3]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [3],</div><div class="line">  [1],</div><div class="line">  [2],</div><div class="line">  [1,2,3],</div><div class="line">  [1,3],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    <span class="comment"># 可以不用进行排序</span></div><div class="line">    <span class="comment"># nums.sort()</span></div><div class="line">    result = [[]]</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">        result += [i + [num] <span class="keyword">for</span> i <span class="keyword">in</span> result]</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure></p>
<h3 id="链表突击"><a href="#链表突击" class="headerlink" title="链表突击"></a>链表突击</h3><h4 id="反转链表"><a href="#反转链表" class="headerlink" title=" 反转链表 "></a><font color="#f47920"> 反转链表<i class="fa fa-star-o"></i> </font></h4><p><a href="https://leetcode.com/problems/reverse-linked-list" target="_blank" rel="external">206. 反转链表</a><br>反转一个单链表。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</div><div class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</div></pre></td></tr></table></figure></p>
<p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># 打印链表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printListNode</span><span class="params">(l)</span>:</span></div><div class="line">    strList = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> l != <span class="keyword">None</span>:</div><div class="line">        strList = strList + str(l.val)</div><div class="line">        l = l.next</div><div class="line">    <span class="comment"># strList = strList[::-1]</span></div><div class="line">    print(strList)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(head)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    prev =  <span class="keyword">None</span></div><div class="line">    <span class="keyword">while</span> head:</div><div class="line">        curr = head</div><div class="line">        head = head.next</div><div class="line">        curr.next = prev</div><div class="line">        prev = curr</div><div class="line">    <span class="keyword">return</span> prev</div><div class="line"></div><div class="line"><span class="comment"># 第二种方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reverse</span><span class="params">(node,prev=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</div><div class="line">        <span class="keyword">return</span> prev</div><div class="line">    n = node.next</div><div class="line">    node.next = prev</div><div class="line">    <span class="keyword">return</span> _reverse(n, node)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList2</span><span class="params">(head)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> _reverse(head)</div></pre></td></tr></table></figure></p>
<h4 id="删除链表中的节点"><a href="#删除链表中的节点" class="headerlink" title="删除链表中的节点 "></a>删除链表中的节点<i class="fa fa-star-o"></i> </h4><p><a href="https://leetcode.com/problems/delete-node-in-a-linked-list" target="_blank" rel="external">237. 删除链表中的节点</a><br>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。<br>现有一个链表 – head = [4,5,1,9]，它可以表示为:<br><img src="/images/273.png" alt="删除链表中的节点"></p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: head = [4,5,1,9], node = 5</div><div class="line">输出: [4,1,9]</div><div class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: head = [4,5,1,9], node = 1</div><div class="line">输出: [4,5,9]</div><div class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</div></pre></td></tr></table></figure></p>
<p><strong>说明:</strong></p>
<ul>
<li>链表至少包含两个节点。</li>
<li>链表中所有节点的值都是唯一的。</li>
<li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li>
<li>不要从你的函数中返回任何结果。</li>
</ul>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># 打印链表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printListNode</span><span class="params">(l)</span>:</span></div><div class="line">    strList = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> l != <span class="keyword">None</span>:</div><div class="line">        strList = strList + str(l.val)</div><div class="line">        l = l.next</div><div class="line">    <span class="comment"># strList = strList[::-1]</span></div><div class="line">    print(strList)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(node)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type node: ListNode</div><div class="line">    :rtype: void Do not return anything, modify node in-place instead.</div><div class="line">    """</div><div class="line">    node.val = node.next.val</div><div class="line">    node.next = node.next.next</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 初始化第一个链表</span></div><div class="line">currNode1 = ListNode1 = ListNode(<span class="number">2</span>)</div><div class="line">currNode1.next = ListNode(<span class="number">4</span>)</div><div class="line">currNode1 = currNode1.next</div><div class="line">currNode1.next = ListNode(<span class="number">3</span>)</div><div class="line"></div><div class="line">printListNode(ListNode1)</div><div class="line">deleteNode(ListNode1.next)</div><div class="line">printListNode(ListNode1)</div></pre></td></tr></table></figure></p>
<h4 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表 "></a>旋转链表<i class="fa fa-star-half-o"></i> </h4><p><a href="https://leetcode.com/problems/rotate-list" target="_blank" rel="external">61. 旋转链表</a><br>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</div><div class="line">输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</div><div class="line">解释:</div><div class="line">向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</div><div class="line">向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</div></pre></td></tr></table></figure></p>
<p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4</div><div class="line">输出: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line">解释:</div><div class="line">向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line">向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</div><div class="line">向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</div><div class="line">向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># 打印链表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printListNode</span><span class="params">(l)</span>:</span></div><div class="line">    strList = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> l != <span class="keyword">None</span>:</div><div class="line">        strList = strList + str(l.val)</div><div class="line">        l = l.next</div><div class="line">    <span class="comment"># strList = strList[::-1]</span></div><div class="line">    print(strList)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(head, k)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :type k: int</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    p = q = head</div><div class="line">    l = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> p.next:</div><div class="line">        p = p.next</div><div class="line">        l += <span class="number">1</span></div><div class="line"></div><div class="line">    p.next = head</div><div class="line"></div><div class="line">    k %= l</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(l-k<span class="number">-1</span>):</div><div class="line">        q = q.next</div><div class="line">    ans = q.next</div><div class="line">    q.next = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> ans</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 初始化第一个链表</span></div><div class="line">currNode1 = ListNode1 = ListNode(<span class="number">2</span>)</div><div class="line">currNode1.next = ListNode(<span class="number">4</span>)</div><div class="line">currNode1 = currNode1.next</div><div class="line">currNode1.next = ListNode(<span class="number">3</span>)</div><div class="line">printListNode(ListNode1)</div><div class="line">printListNode(rotateRight(ListNode1,<span class="number">2</span>))</div></pre></td></tr></table></figure></p>
<h4 id="两数相加"><a href="#两数相加" class="headerlink" title=" 两数相加 "></a><font color="#f47920"> 两数相加<i class="fa fa-star-half-o"></i> </font></h4><p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="external">2. 两数相加</a><br>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。<br>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>
<p><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line">输出：7 -&gt; 0 -&gt; 8</div><div class="line">原因：342 + 465 = 807</div></pre></td></tr></table></figure></p>
<p><strong>解题：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># 打印链表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printListNode</span><span class="params">(l)</span>:</span></div><div class="line">    strList = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> l != <span class="keyword">None</span>:</div><div class="line">        strList = strList + str(l.val)</div><div class="line">        l = l.next</div><div class="line">    <span class="comment"># strList = strList[::-1]</span></div><div class="line">    print(strList)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(l1, l2)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type l1: ListNode</div><div class="line">    :type l2: ListNode</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    carry = <span class="number">0</span></div><div class="line">    root = n = ListNode(<span class="number">0</span>)</div><div class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</div><div class="line">        v1 = v2 = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> l1:</div><div class="line">            v1 = l1.val</div><div class="line">            l1 = l1.next</div><div class="line">        <span class="keyword">if</span> l2:</div><div class="line">            v2 = l2.val</div><div class="line">            l2 = l2.next</div><div class="line">        carry,val = divmod(v1+v2+carry,<span class="number">10</span>)</div><div class="line">        n.next = ListNode(val)</div><div class="line">        n = n.next</div><div class="line">    <span class="keyword">return</span> root.next</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 初始化第一个链表</span></div><div class="line">currNode1 = ListNode1 = ListNode(<span class="number">2</span>)</div><div class="line">currNode1.next = ListNode(<span class="number">4</span>)</div><div class="line">currNode1 = currNode1.next</div><div class="line">currNode1.next = ListNode(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 初始化第二个链表</span></div><div class="line">currNode2 = ListNode2 = ListNode(<span class="number">5</span>)</div><div class="line">currNode2.next = ListNode(<span class="number">6</span>)</div><div class="line">currNode2 = currNode2.next</div><div class="line">currNode2.next = ListNode(<span class="number">4</span>)</div><div class="line"></div><div class="line">printListNode(addTwoNumbers(ListNode1,ListNode2))</div></pre></td></tr></table></figure></p>
<p><strong>学习要点：</strong></p>
<ol>
<li>链表的初始化形式</li>
<li>求和高位进1的用法</li>
</ol>
<h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><h4 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏<i class="fa fa-star-o"></i></h4><p><a href="https://leetcode.com/problems/nim-game/description/" target="_blank" rel="external">292. Nim游戏</a><br>你和你的朋友，两个人一起玩 Nim游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。<br>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: 4</div><div class="line">输出: false </div><div class="line">解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；</div><div class="line">     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</div></pre></td></tr></table></figure></p>
<p><strong>解题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> bool(n % <span class="number">2</span>)</div><div class="line">    <span class="comment"># return bool(b &amp; 3)</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 LeetCode 的算法习题，用 Python3 语言进行实现，Python还是很强大的，有些 built-in 函数很简洁，一行代码解决问题。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xiaohao890809.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://xiaohao890809.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>保持某些好的习惯</title>
    <link href="http://xiaohao890809.github.io/2017/09/26/Some-good-habits-need-to-insist/"/>
    <id>http://xiaohao890809.github.io/2017/09/26/Some-good-habits-need-to-insist/</id>
    <published>2017-09-26T02:45:23.000Z</published>
    <updated>2017-12-19T15:08:18.702Z</updated>
    
    <content type="html"><![CDATA[<p>优秀是一种习惯，保持一个良好的习惯往往能引导一种健康的生活姿态，现在记录一些自己认为是比较好的一些习惯，自己经常去看看，用于监督和督促自己。<br><a id="more"></a> </p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ol>
<li>一周至少运动两次（跑步，爬山，打球等）</li>
<li>晚上11点半准备看书，然后睡觉</li>
<li>一天至少三大杯水</li>
<li>平时多吃点水果</li>
<li>一个月清理一次房间</li>
<li>晚上睡前刷牙</li>
</ol>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ol>
<li>代码写完后多检查下注释有没有写全，没写的补上，以免以后都不知道自己当初写的啥</li>
<li>LeetCode过三遍</li>
<li>js和go语言了解下</li>
<li>正则表达式多熟悉</li>
</ol>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ol>
<li>每天问一遍自己，想进BAT吗，以你现在的能力能进BAT吗，不能的话哪些地方需要加强呢？</li>
</ol>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ol>
<li>平时多看下面试相关的信息，刷刷题</li>
<li>把跟自己业务相关的数据库表多检查下</li>
</ol>
<h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ol>
<li>熟读新概念英语第三册前30篇</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优秀是一种习惯，保持一个良好的习惯往往能引导一种健康的生活姿态，现在记录一些自己认为是比较好的一些习惯，自己经常去看看，用于监督和督促自己。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://xiaohao890809.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>记录博客的第一天</title>
    <link href="http://xiaohao890809.github.io/2015/08/14/First-day/"/>
    <id>http://xiaohao890809.github.io/2015/08/14/First-day/</id>
    <published>2015-08-14T14:47:23.000Z</published>
    <updated>2017-12-12T13:39:37.387Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见，大家好！很高兴，今天终于开通了这个博客，这期间也得到了不少网友的帮助。之前在网上找了很多模板，但是选来选去，最终还是定了这个模板，因为这个模板比较简洁，而且也符合我预期的效果。<br><a id="more"></a> </p>
<blockquote>
<p>首先要感谢 <code>enml</code>，我是引用了他的模板。</p>
</blockquote>
<p>先把他的模板下载到本地，然后传到自己建立的仓库下就可以进行修改模板了。将一些基本的信息，比如名字，多说的 id 以及一些图标都加以修改即可。刚开始的模板的导航栏上没有留言板和关于我这一栏，我后来自己补上的。之前模板的一个出口的 page 被我删掉了，因为感觉那个功能不太实用。还有原来的评论系统貌似用的是国外的一个系统，我将其改为了多说的评论系统，非常好用！</p>
<blockquote>
<p>其次是感谢 <code>liberize</code> 的帮助</p>
</blockquote>
<p>在他的帮助下，我在评论框的头像加上了炫酷的旋转效果，看起来非常漂亮。只是原作者是圆形的图标，而我这个背景如果用了圆形的头像，会有一个阴影在下面，看起来非常不舒服，于是我改为了方形的效果，默认下的头像旋转是没有阴影的，这一点我至今还是很疑惑。</p>
<blockquote>
<p>再者感谢 tk 域名</p>
</blockquote>
<p>博客搭建好了，但是域名太长，不太方便随时输入。所以也百度了很多资料，看到网上都是说加一个 CNAME 文件，然后把域名加上去，在去域名管理页面加一个 A 地址。折腾了半天也没有成功。最后发现前提应该是自己得有一个 .com 或者 .me 域名，但是我木有。于是乎这条路便走不通了。后来无意间看到 tk 域名的网址，听说进去可以免费注册域名，于是抱着试一试的态度进去了，后来发现其实根本不用那么麻烦，只有把自己的博客地址指向到你要注册的 .tk 域名就 ok 了。省去了很多步骤。而且最后的网页比之前的网页更加完整了，之前没显示出来额头像图标和 github 图标都显示出来了，太惊喜了。只是某些字体不知道怎么回事，还是显示不完美。不过这样已经很满足了。</p>
<blockquote>
<p>最后感谢 <code>liberize</code> 和百度文库的帮助</p>
</blockquote>
<p>模板本来已经弄得差不多了，后来想来想去看了别人的很多模板，都在首页有<strong>分页</strong>的功能（PS：分类和标签是没有这个功能的），于是自己也想加上，所以结合了好几个人的模板，最后把每一个标签换了个颜色，显得不是那么单调。最后文章也要截取部分显示在首页中，这部分调式了好久，最后用了下面这个代码搞定了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post.content | truncate:<span class="number">300</span></div></pre></td></tr></table></figure>
<p>其实就是把中间一部分舍掉了，因为加上中间那一部分的话，是按照文本进行分割的，而我想保留自己原来的格式，于是只取后面一部分就搞定了。当理想的界面出现在 html 上的时候，那个感觉非常好。也许博客到现在格式方面已经差不多了。不过到后面估计还得修改一些小细节，不断地进步才有动力前进！</p>
<p><strong>总结</strong>  </p>
<p><code>github</code> 真是个不错的平台，幸好天朝没有进行封杀，里面的资源和牛人特别多。他们秉着开源的精神，无私地分享了自己得许多经验和代码。所以，学无止境，多学习，多总结肯定是没有错的。</p>
<p>但无论如何，万事开头难，希望自己能够坚持下去，记录生活点滴，同时也写一些技术类的博客，虽然比较菜，但是进步空间比较大，加油，耗子！</p>
<p>另外本博客已经使用 <code>hexo</code> 主题，之前的 <code>jekyll</code> 已经<del>不用了</del>。因为这个框架的主题配置起来比较容易，不用修改很多地方。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不见，大家好！很高兴，今天终于开通了这个博客，这期间也得到了不少网友的帮助。之前在网上找了很多模板，但是选来选去，最终还是定了这个模板，因为这个模板比较简洁，而且也符合我预期的效果。&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://xiaohao890809.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="第一滴血" scheme="http://xiaohao890809.github.io/tags/%E7%AC%AC%E4%B8%80%E6%BB%B4%E8%A1%80/"/>
    
  </entry>
  
</feed>
